import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkinter import simpledialog
import customtkinter as ctk
from PIL import Image, ImageTk
import os
import sqlite3
from datetime import datetime, timedelta
import shutil
import threading
import time
import requests
import json
from urllib.parse import quote
import hashlib
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# Imports para gera√ß√£o de relat√≥rios modernos
try:
    from reportlab.lib.pagesizes import A4, letter
    from reportlab.lib.units import cm, inch
    from reportlab.lib.colors import Color, HexColor, black, white, blue, green, red
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image as RLImage
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
    from reportlab.pdfgen import canvas
    from reportlab.lib import colors
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False
    print("‚ö†Ô∏è  ReportLab n√£o est√° instalado. Instale com: pip install reportlab")

# Sincroniza√ß√£o com Supabase desabilitada
SUPABASE_SYNC_AVAILABLE = False

# Fun√ß√µes stub para sincroniza√ß√£o (desabilitadas)
def sync_estudante_create(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_estudante_update(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_estudante_delete(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_orientador_create(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_orientador_update(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_orientador_delete(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_empresa_create(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_empresa_update(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_empresa_delete(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_estagio_create(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_estagio_update(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_estagio_delete(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

def sync_controle_ch_update(*args, **kwargs):
    """Fun√ß√£o stub - sincroniza√ß√£o desabilitada"""
    pass

class WhatsAppAPI:
    """Classe para integra√ß√£o com a API oficial do WhatsApp Business"""
    
    def __init__(self, access_token, phone_number_id, version="v18.0"):
        self.access_token = access_token
        self.phone_number_id = phone_number_id
        self.version = version
        self.base_url = f"https://graph.facebook.com/{version}/{phone_number_id}/messages"
        
    def enviar_mensagem(self, numero_destino, mensagem, tipo_mensagem="text"):
        """Enviar mensagem via WhatsApp Business API"""
        try:
            # Limpar e formatar n√∫mero
            numero_limpo = self.limpar_numero(numero_destino)
            
            headers = {
                "Authorization": f"Bearer {self.access_token}",
                "Content-Type": "application/json"
            }
            
            if tipo_mensagem == "text":
                payload = {
                    "messaging_product": "whatsapp",
                    "to": numero_limpo,
                    "type": "text",
                    "text": {
                        "body": mensagem
                    }
                }
            elif tipo_mensagem == "template":
                # Para mensagens de template (√∫til para notifica√ß√µes autom√°ticas)
                payload = {
                    "messaging_product": "whatsapp",
                    "to": numero_limpo,
                    "type": "template",
                    "template": {
                        "name": "alerta_estagio",  # Nome do template aprovado
                        "language": {
                            "code": "pt_BR"
                        },
                        "components": [
                            {
                                "type": "body",
                                "parameters": [
                                    {
                                        "type": "text",
                                        "text": mensagem
                                    }
                                ]
                            }
                        ]
                    }
                }
            
            response = requests.post(
                self.base_url,
                headers=headers,
                data=json.dumps(payload),
                timeout=30
            )
            
            if response.status_code == 200:
                return {
                    "sucesso": True,
                    "resposta": response.json(),
                    "status_code": response.status_code
                }
            else:
                return {
                    "sucesso": False,
                    "erro": response.text,
                    "status_code": response.status_code
                }
                
        except Exception as e:
            return {
                "sucesso": False,
                "erro": str(e),
                "status_code": 0
            }
    
    def limpar_numero(self, numero):
        """Limpar e formatar n√∫mero para padr√£o internacional"""
        # Remove todos os caracteres n√£o num√©ricos
        numero_limpo = ''.join(filter(str.isdigit, str(numero)))
        
        # Se n√£o tem c√≥digo do pa√≠s, adiciona o c√≥digo do Brasil (55)
        if len(numero_limpo) == 11 and numero_limpo.startswith('0'):
            numero_limpo = '55' + numero_limpo[1:]  # Remove 0 e adiciona 55
        elif len(numero_limpo) == 11:
            numero_limpo = '55' + numero_limpo
        elif len(numero_limpo) == 10:
            numero_limpo = '55' + numero_limpo
        
        return numero_limpo
    
    def validar_numero(self, numero):
        """Validar se o n√∫mero est√° em formato correto"""
        numero_limpo = self.limpar_numero(numero)
        
        # N√∫mero brasileiro deve ter 13 d√≠gitos (55 + 11 d√≠gitos)
        if len(numero_limpo) == 13 and numero_limpo.startswith('55'):
            return True
        return False
    
    def verificar_status_api(self):
        """Verificar se a API est√° funcionando"""
        try:
            headers = {
                "Authorization": f"Bearer {self.access_token}",
                "Content-Type": "application/json"
            }
            
            # Fazer uma requisi√ß√£o de teste para verificar o status
            test_url = f"https://graph.facebook.com/{self.version}/{self.phone_number_id}"
            response = requests.get(test_url, headers=headers, timeout=10)
            
            return response.status_code == 200
        except:
            return False


class LoginSystem:
    """Sistema de login profissional com controle de perfis (Administrador/Professor)"""
    
    def __init__(self, on_login_success):
        self.on_login_success = on_login_success
        self.usuario_logado = None
        self.perfis_acesso = {
            'administrador': {
                'nome': 'Administrador',
                'icone': 'üëë',
                'menus': ['dashboard', 'central_alertas', 'estudantes', 'empresas', 'orientadores', 'estagio_obrigatorio', 
                         'estagio_nao_obrigatorio', 'certificados', 'relatorios', 'configuracoes', 'backup']
            },
            'professor': {
                'nome': 'Professor',
                'icone': 'üë®‚Äçüè´',
                'menus': ['dashboard', 'estagio_obrigatorio', 'estagio_nao_obrigatorio', 'certificados', 'relatorios']
            }
        }
        self.setup_login_window()
    
    def setup_login_window(self):
        """Configurar janela de login moderna e profissional"""
        # Configurar tema moderno
        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")
        
        # Criar janela de login com tamanho otimizado
        self.login_window = ctk.CTk()
        self.login_window.title("EstagioPro - Sistema de Controle de Est√°gio")
        self.login_window.geometry("900x650")
        self.login_window.resizable(False, False)
        
        # Centralizar janela
        self.center_window()
        
        # Paleta de cores profissional
        self.cor_primaria = "#0f172a"      # Azul escuro profissional
        self.cor_secundaria = "#1e40af"    # Azul m√©dio
        self.cor_accent = "#3b82f6"        # Azul accent
        self.cor_fundo = "#f8fafc"         # Fundo claro
        self.cor_card = "#ffffff"          # Branco para cards
        self.cor_texto = "#334155"         # Texto principal
        self.cor_texto_light = "#64748b"   # Texto secund√°rio
        self.cor_sucesso = "#059669"       # Verde para sucesso
        self.cor_hover = "#1d4ed8"         # Hover azul
        self.cor_gradient_start = "#1e40af"
        self.cor_gradient_end = "#3b82f6"
        
        # Configurar √≠cone
        if os.path.exists("ufvjm.ico"):
            self.login_window.iconbitmap("ufvjm.ico")
        
        # Frame principal com gradiente visual
        self.main_frame = ctk.CTkFrame(
            self.login_window, 
            fg_color=self.cor_fundo,
            corner_radius=0
        )
        self.main_frame.pack(fill="both", expand=True)
        
        self.create_modern_login_interface()
    
    def center_window(self):
        """Centralizar janela na tela"""
        self.login_window.update_idletasks()
        width = 900
        height = 650
        x = (self.login_window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.login_window.winfo_screenheight() // 2) - (height // 2)
        self.login_window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_modern_login_interface(self):
        """Criar interface de login moderna e profissional"""
        
        # Container principal com layout em duas colunas
        main_container = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Coluna esquerda - Branding e informa√ß√µes
        left_column = ctk.CTkFrame(
            main_container,
            fg_color=self.cor_primaria,
            corner_radius=20,
            width=400
        )
        left_column.pack(side="left", fill="both", expand=True, padx=(0, 10))
        left_column.pack_propagate(False)
        
        # Logo e branding na coluna esquerda
        self.create_branding_section(left_column)
        
        # Coluna direita - Formul√°rio de login
        right_column = ctk.CTkFrame(
            main_container,
            fg_color=self.cor_card,
            corner_radius=20,
            width=400
        )
        right_column.pack(side="right", fill="both", expand=True, padx=(10, 0))
        right_column.pack_propagate(False)
        
        # Formul√°rio de login na coluna direita
        self.create_login_form(right_column)
    
    def create_branding_section(self, parent):
        """Criar se√ß√£o de branding na coluna esquerda"""
        
        # Container interno com padding
        branding_container = ctk.CTkFrame(parent, fg_color="transparent")
        branding_container.pack(fill="both", expand=True, padx=30, pady=40)
        
        # Logo UFVJM
        try:
            if os.path.exists("ufvjm.png"):
                logo_image = Image.open("ufvjm.png")
                logo_image = logo_image.resize((120, 120), Image.Resampling.LANCZOS)
                self.logo_photo = ImageTk.PhotoImage(logo_image)
                
                logo_label = tk.Label(
                    branding_container,
                    image=self.logo_photo,
                    bg=self.cor_primaria
                )
                logo_label.pack(pady=(20, 30))
        except Exception as e:
            print(f"Erro ao carregar logo: {e}")
            # Logo alternativo em texto
            logo_alt = ctk.CTkLabel(
                branding_container,
                text="üéì",
                font=ctk.CTkFont(size=80),
                text_color=self.cor_card
            )
            logo_alt.pack(pady=(20, 30))
        
        # T√≠tulo principal
        title_label = ctk.CTkLabel(
            branding_container,
            text="EstagioPro",
            font=ctk.CTkFont(size=36, weight="bold"),
            text_color=self.cor_card
        )
        title_label.pack(pady=(0, 10))
        
        # Subt√≠tulo
        subtitle_label = ctk.CTkLabel(
            branding_container,
            text="Sistema Profissional de\nControle de Est√°gio",
            font=ctk.CTkFont(size=18),
            text_color=self.cor_card,
            justify="center"
        )
        subtitle_label.pack(pady=(0, 20))
        
        # Institui√ß√£o
        institution_label = ctk.CTkLabel(
            branding_container,
            text="Universidade Federal dos Vales\ndo Jequitinhonha e Mucuri",
            font=ctk.CTkFont(size=14),
            text_color="#94a3b8",
            justify="center"
        )
        institution_label.pack(pady=(0, 30))
        
        # Features do sistema
        features_frame = ctk.CTkFrame(branding_container, fg_color="transparent")
        features_frame.pack(fill="x", pady=(20, 0))
        
        features = [
            ("‚ú®", "Interface Moderna"),
            ("üîí", "Login Seguro"),
            ("üìä", "Relat√≥rios Completos"),
            ("üéØ", "Controle Total")
        ]
        
        for icon, text in features:
            feature_frame = ctk.CTkFrame(features_frame, fg_color="transparent")
            feature_frame.pack(fill="x", pady=5)
            
            icon_label = ctk.CTkLabel(
                feature_frame,
                text=icon,
                font=ctk.CTkFont(size=16),
                text_color=self.cor_card,
                width=30
            )
            icon_label.pack(side="left")
            
            text_label = ctk.CTkLabel(
                feature_frame,
                text=text,
                font=ctk.CTkFont(size=13),
                text_color="#94a3b8",
                anchor="w"
            )
            text_label.pack(side="left", fill="x", expand=True)
    
    def create_login_form(self, parent):
        """Criar formul√°rio de login moderno na coluna direita"""
        
        # Container interno com padding
        form_container = ctk.CTkFrame(parent, fg_color="transparent")
        form_container.pack(fill="both", expand=True, padx=40, pady=40)
        
        # T√≠tulo do formul√°rio
        form_title = ctk.CTkLabel(
            form_container,
            text="Acesso ao Sistema",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        form_title.pack(pady=(0, 10))
        
        # Subt√≠tulo
        form_subtitle = ctk.CTkLabel(
            form_container,
            text="Entre com suas credenciais para continuar",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_texto_light
        )
        form_subtitle.pack(pady=(0, 40))
        
        # Campo de usu√°rio
        user_label = ctk.CTkLabel(
            form_container,
            text="Usu√°rio",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto,
            anchor="w"
        )
        user_label.pack(fill="x", pady=(0, 8))
        
        # Frame para entrada de usu√°rio com dom√≠nio
        user_input_frame = ctk.CTkFrame(form_container, fg_color="transparent")
        user_input_frame.pack(fill="x", pady=(0, 20))
        
        self.username_entry = ctk.CTkEntry(
            user_input_frame,
            placeholder_text="Digite seu usu√°rio",
            width=180,
            height=45,
            font=ctk.CTkFont(size=14),
            corner_radius=10,
            border_width=2,
            border_color="#e2e8f0"
        )
        
        # Bind para valida√ß√£o do usu√°rio
        self.username_entry.bind("<KeyRelease>", self.validate_username_input)
        self.username_entry.pack(side="left", padx=(0, 8))
        
        domain_label = ctk.CTkLabel(
            user_input_frame,
            text="@ufvjm.edu.br",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_primaria
        )
        domain_label.pack(side="left", pady=12)
        
        # Campo de senha
        password_label = ctk.CTkLabel(
            form_container,
            text="Senha",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto,
            anchor="w"
        )
        password_label.pack(fill="x", pady=(0, 8))
        
        self.password_entry = ctk.CTkEntry(
            form_container,
            placeholder_text="Digite sua senha (letras, n√∫meros e s√≠mbolos)",
            show="*",
            height=45,
            font=ctk.CTkFont(size=14),
            corner_radius=10,
            border_width=2,
            border_color="#e2e8f0"
        )
        
        # Bind para valida√ß√£o em tempo real
        self.password_entry.bind("<KeyRelease>", self.validate_password_input)
        self.password_entry.pack(fill="x", pady=(0, 30))
        
        # Bot√£o de login destacado
        login_button = ctk.CTkButton(
            form_container,
            text="üöÄ  Entrar no Sistema",
            command=self.authenticate_user,
            height=50,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_secundaria,
            hover_color=self.cor_hover,
            corner_radius=12
        )
        login_button.pack(fill="x", pady=(0, 30))
        
        # Separador
        separator = ctk.CTkFrame(form_container, height=1, fg_color="#e2e8f0")
        separator.pack(fill="x", pady=(0, 30))
        
        # Informa√ß√µes dos perfis de forma compacta
        profiles_title = ctk.CTkLabel(
            form_container,
            text="Perfis de Acesso",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_texto
        )
        profiles_title.pack(pady=(0, 15))
        
        # Perfis em linha
        profiles_container = ctk.CTkFrame(form_container, fg_color="transparent")
        profiles_container.pack(fill="x")
        
        # Perfil Admin
        admin_profile = ctk.CTkFrame(profiles_container, fg_color="#f0f9ff", corner_radius=8)
        admin_profile.pack(side="left", fill="x", expand=True, padx=(0, 8))
        
        admin_icon = ctk.CTkLabel(
            admin_profile,
            text="üëë",
            font=ctk.CTkFont(size=20)
        )
        admin_icon.pack(pady=(8, 2))
        
        admin_text = ctk.CTkLabel(
            admin_profile,
            text="Administrador\nAcesso Completo",
            font=ctk.CTkFont(size=11, weight="bold"),
            text_color=self.cor_secundaria,
            justify="center"
        )
        admin_text.pack(pady=(0, 8))
        
        # Perfil Professor
        prof_profile = ctk.CTkFrame(profiles_container, fg_color="#f0fdf4", corner_radius=8)
        prof_profile.pack(side="right", fill="x", expand=True, padx=(8, 0))
        
        prof_icon = ctk.CTkLabel(
            prof_profile,
            text="üë®‚Äçüè´",
            font=ctk.CTkFont(size=20)
        )
        prof_icon.pack(pady=(8, 2))
        
        prof_text = ctk.CTkLabel(
            prof_profile,
            text="Professor\nEst√°gios & Relat√≥rios",
            font=ctk.CTkFont(size=11, weight="bold"),
            text_color=self.cor_sucesso,
            justify="center"
        )
        prof_text.pack(pady=(0, 8))
        
        # Bind Enter key para login
        self.login_window.bind('<Return>', lambda event: self.authenticate_user())
        
        # Foco inicial no campo de usu√°rio
        self.username_entry.focus()
    
    def validate_username_input(self, event=None):
        """Validar entrada do usu√°rio em tempo real"""
        username = self.username_entry.get()
        
        # Permitir apenas caracteres alfanum√©ricos, pontos e h√≠fens
        import re
        if username and not re.match(r'^[a-zA-Z0-9.\-]+$', username):
            # Se cont√©m caracteres inv√°lidos, remover o √∫ltimo caractere
            self.username_entry.delete(len(username)-1, 'end')
            return False
        
        # Atualizar cor da borda baseada na validade
        if len(username) >= 3 and '.' in username:
            self.username_entry.configure(border_color="#059669")  # Verde para formato adequado
        elif len(username) >= 2:
            self.username_entry.configure(border_color="#f59e0b")  # Amarelo para incompleto
        else:
            self.username_entry.configure(border_color="#e2e8f0")  # Cinza padr√£o
        
        return True
    
    def validate_password_input(self, event=None):
        """Validar entrada da senha em tempo real"""
        password = self.password_entry.get()
        
        # Verificar se cont√©m caracteres v√°lidos (alfanum√©ricos e s√≠mbolos comuns)
        import re
        if password and not re.match(r'^[a-zA-Z0-9@#$%^&*()_+=\-\[\]{}|;:,.<>?/~`!]+$', password):
            # Se cont√©m caracteres inv√°lidos, remover o √∫ltimo caractere
            self.password_entry.delete(len(password)-1, 'end')
            return False
        
        # Atualizar cor da borda baseada no comprimento
        if len(password) >= 6:
            self.password_entry.configure(border_color="#059669")  # Verde para senha adequada
        elif len(password) >= 3:
            self.password_entry.configure(border_color="#f59e0b")  # Amarelo para senha curta
        else:
            self.password_entry.configure(border_color="#e2e8f0")  # Cinza padr√£o
        
        return True
    
    def hash_password(self, password):
        """Gerar hash SHA256 da senha"""
        return hashlib.sha256(password.encode()).hexdigest()

    def corrigir_senha_admin(self):
        """Corrigir senha do admin no banco de dados"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()

            # Hash correto da senha 'admin'
            hash_correto = self.hash_password('admin')

            # Atualizar senha do admin
            cursor.execute("""
                UPDATE orientadores
                SET senha = ?
                WHERE email_institucional = 'admin@ufvjm.edu.br'
            """, (hash_correto,))

            conn.commit()
            conn.close()

            print(f"‚úÖ Senha do admin corrigida. Hash: {hash_correto[:20]}...")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao corrigir senha do admin: {e}")
            return False
    
    def init_database_if_needed(self):
        """Inicializar banco de dados e criar usu√°rio admin se necess√°rio"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Verificar se a tabela orientadores existe
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='orientadores'")
            table_exists = cursor.fetchone() is not None
            
            if not table_exists:
                # Criar tabela de orientadores apenas se n√£o existir
                cursor.execute('''
                    CREATE TABLE orientadores (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT NOT NULL,
                        siape TEXT,
                        cpf TEXT,
                        departamento TEXT,
                        curso TEXT,
                        telefone TEXT,
                        email_institucional TEXT UNIQUE NOT NULL,
                        senha TEXT NOT NULL,
                        administrador INTEGER DEFAULT 0,
                        status TEXT DEFAULT 'Ativo',
                        data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                print("‚úÖ Tabela 'orientadores' criada")
            
            # Verificar se j√° existe o usu√°rio admin
            cursor.execute("SELECT COUNT(*) FROM orientadores WHERE email_institucional = ?", ("admin@ufvjm.edu.br",))
            admin_exists = cursor.fetchone()[0] > 0
            
            if not admin_exists:
                # Criar usu√°rio administrador padr√£o
                from datetime import datetime
                cursor.execute("""
                    INSERT INTO orientadores
                    (nome, siape, cpf, departamento, curso, telefone, email_institucional, senha, administrador, data_cadastro, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    'Administrador do Sistema',
                    'ADMIN001',
                    '000.000.000-00',
                    'FACSAE',
                    'Ci√™ncias Cont√°beis',
                    '(38) 3532-1200',
                    'admin@ufvjm.edu.br',
                    self.hash_password('admin'),
                    1,  # administrador = True
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'Ativo'
                ))
                print("‚úÖ Usu√°rio administrador criado: admin@ufvjm.edu.br / senha: admin")
            else:
                # Verificar se a senha est√° correta e corrigir se necess√°rio
                cursor.execute("SELECT senha FROM orientadores WHERE email_institucional = ?", ("admin@ufvjm.edu.br",))
                senha_atual = cursor.fetchone()[0]
                senha_correta = self.hash_password('admin')

                if senha_atual != senha_correta:
                    cursor.execute("""
                        UPDATE orientadores
                        SET senha = ?
                        WHERE email_institucional = 'admin@ufvjm.edu.br'
                    """, (senha_correta,))
                    print("‚úÖ Senha do administrador corrigida automaticamente")

            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"Erro ao inicializar banco de dados: {e}")
    
    def authenticate_user(self):
        """Autenticar usu√°rio"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        
        if not username or not password:
            self.show_message("Erro", "Por favor, preencha todos os campos!")
            return
        
        # Construir email completo
        email_completo = f"{username}@ufvjm.edu.br"
        
        try:
            # Conectar ao banco de dados
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            password_hash = self.hash_password(password)
            
            # Verificar credenciais
            cursor.execute("""
                SELECT id, nome, siape, departamento, curso, administrador, status
                FROM orientadores 
                WHERE email_institucional = ? AND senha = ? AND status = 'Ativo'
            """, (email_completo, password_hash))
            
            user_data = cursor.fetchone()
            
            conn.close()
            
            if user_data:
                # Determinar perfil baseado no campo administrador
                is_admin = bool(user_data[5])
                perfil_tipo = 'administrador' if is_admin else 'professor'
                perfil_info = self.perfis_acesso[perfil_tipo]
                
                self.usuario_logado = {
                    'id': user_data[0],
                    'nome': user_data[1],
                    'siape': user_data[2],
                    'departamento': user_data[3],
                    'curso': user_data[4],
                    'administrador': is_admin,
                    'email': email_completo,
                    'perfil': perfil_tipo,
                    'perfil_nome': perfil_info['nome'],
                    'perfil_icone': perfil_info['icone'],
                    'menus_permitidos': perfil_info['menus']
                }
                
                # Fechar janela de login e chamar callback
                self.login_window.destroy()
                self.on_login_success(self.usuario_logado)
                
            else:
                self.show_message("Erro", "Usu√°rio ou senha incorretos!\n\nVerifique suas credenciais e tente novamente.")
                self.password_entry.delete(0, 'end')
                self.password_entry.focus()
                
        except Exception as e:
            self.show_message("Erro", f"Erro ao conectar com o banco de dados:\n{str(e)}")
    
    def show_message(self, title, message):
        """Mostrar mensagem em popup"""
        import tkinter.messagebox as messagebox
        messagebox.showinfo(title, message)
    
    def show(self):
        """Mostrar janela de login"""
        # Garantir que a janela seja vis√≠vel
        self.login_window.deiconify()
        self.login_window.lift()
        self.login_window.attributes('-topmost', True)
        self.login_window.after(100, lambda: self.login_window.attributes('-topmost', False))
        self.login_window.focus_force()
        
        # Iniciar o loop principal
        self.login_window.mainloop()


class EmailSender:
    """Classe robusta para envio de emails com configura√ß√£o via arquivos JSON"""
    
    def __init__(self, config_file="config_email.json", templates_file="templates_email.json"):
        # Arquivos de configura√ß√£o
        self.config_file = config_file
        self.templates_file = templates_file
        
        # Carregar configura√ß√µes dos arquivos JSON
        self.configuracoes = []
        self.templates = {}
        self.config_gerais = {}
        
        # Configura√ß√£o ativa (ser√° determinada automaticamente)
        self.config_ativa = None
        self.status_configuracao = "N√£o testada"
        
        # Carregar configura√ß√µes
        self._carregar_configuracoes()
        self._carregar_templates()
        
        # Configurar credenciais
        self._configurar_credenciais()
    
    def _carregar_configuracoes(self):
        """Carregar configura√ß√µes do arquivo JSON"""
        import json
        import os
        
        try:
            if not os.path.exists(self.config_file):
                print(f"‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado: {self.config_file}")
                print("   Usando configura√ß√µes padr√£o")
                self._criar_configuracoes_padrao()
                return
            
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            # Carregar configura√ß√µes SMTP ativas
            smtp_configs = config_data.get('configuracoes_smtp', [])
            self.configuracoes = [config for config in smtp_configs if config.get('ativo', True)]
            
            # Ordenar por prioridade
            self.configuracoes.sort(key=lambda x: x.get('prioridade', 999))
            
            # Carregar configura√ß√µes gerais
            self.config_gerais = config_data.get('configuracoes_gerais', {})
            
            print(f"‚úÖ Configura√ß√µes carregadas: {len(self.configuracoes)} configura√ß√µes SMTP ativas")
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
            print("   Usando configura√ß√µes padr√£o")
            self._criar_configuracoes_padrao()
    
    def _carregar_templates(self):
        """Carregar templates do arquivo JSON"""
        import json
        import os
        
        try:
            if not os.path.exists(self.templates_file):
                print(f"‚ö†Ô∏è Arquivo de templates n√£o encontrado: {self.templates_file}")
                print("   Usando templates padr√£o")
                self._criar_templates_padrao()
                return
            
            with open(self.templates_file, 'r', encoding='utf-8') as f:
                template_data = json.load(f)
            
            # Carregar templates
            self.templates = template_data.get('templates_alertas', {})
            self.templates.update(template_data.get('templates_relatorios', {}))
            
            print(f"‚úÖ Templates carregados: {len(self.templates)} templates dispon√≠veis")
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar templates: {e}")
            print("   Usando templates padr√£o")
            self._criar_templates_padrao()
    
    def _configurar_credenciais(self):
        """Configurar credenciais baseado nas configura√ß√µes gerais"""
        
        # Obter configura√ß√µes gerais
        senha_padrao = self.config_gerais.get('senha_padrao', 'estagioufvjm2019')
        usar_var_ambiente = self.config_gerais.get('usar_variavel_ambiente', True)
        var_senha_app = self.config_gerais.get('variavel_senha_app', 'GMAIL_APP_PASSWORD')
        var_senha_email = self.config_gerais.get('variavel_senha_email', 'EMAIL_PASSWORD')
        
        # Tentar vari√°veis de ambiente se habilitado
        if usar_var_ambiente:
            self.senha_email = self._obter_senha_variavel_ambiente(var_senha_app, var_senha_email, senha_padrao)
        else:
            self.senha_email = senha_padrao
            self.status_configuracao = "Senha padr√£o (configura√ß√£o JSON)"
        
        # Configurar email remetente padr√£o
        if self.configuracoes:
            self.email_remetente = self.configuracoes[0].get('email_remetente', 'estagio.contabeis@ufvjm.edu.br')
        else:
            self.email_remetente = 'estagio.contabeis@ufvjm.edu.br'
    
    def _obter_senha_variavel_ambiente(self, var_app, var_email, senha_padrao):
        """Obter senha de vari√°vel de ambiente"""
        import os
        
        # Tentar senha de app primeiro (mais seguro)
        gmail_app_password = os.getenv(var_app)
        if gmail_app_password:
            print("‚úÖ Usando senha de app do Gmail (vari√°vel de ambiente)")
            self.status_configuracao = "Senha de app (segura)"
            return gmail_app_password
        
        # Tentar senha de email gen√©rica
        email_password = os.getenv(var_email)
        if email_password:
            print("‚úÖ Usando senha de email (vari√°vel de ambiente)")
            self.status_configuracao = "Vari√°vel de ambiente"
            return email_password
        
        # Usar senha padr√£o
        print("‚ö†Ô∏è Usando senha padr√£o - Recomenda-se configurar senha de app")
        self.status_configuracao = "Senha padr√£o (n√£o recomendado)"
        return senha_padrao
    
    def _criar_configuracoes_padrao(self):
        """Criar configura√ß√µes padr√£o se arquivo n√£o existir"""
        self.configuracoes = [
            {
                "id": "ufvjm_gmail_username",
                "nome": "UFVJM via Gmail (Username Simplificado)",
                "ativo": True,
                "prioridade": 1,
                "servidor": "smtp.gmail.com",
                "porta": 587,
                "seguranca": "TLS",
                "username": "estagio.ufvjm",
                "email_remetente": "estagio.contabeis@ufvjm.edu.br",
                "timeout": 10
            },
            {
                "id": "ufvjm_gmail_email_completo",
                "nome": "UFVJM via Gmail (Email Completo)",
                "ativo": True,
                "prioridade": 2,
                "servidor": "smtp.gmail.com",
                "porta": 587,
                "seguranca": "TLS",
                "username": "estagio.contabeis@ufvjm.edu.br",
                "email_remetente": "estagio.contabeis@ufvjm.edu.br",
                "timeout": 10
            }
        ]
        
        self.config_gerais = {
            "senha_padrao": "estagioufvjm2019",
            "usar_variavel_ambiente": True,
            "variavel_senha_app": "GMAIL_APP_PASSWORD",
            "timeout_padrao": 10
        }
    
    def _criar_templates_padrao(self):
        """Criar templates padr√£o se arquivo n√£o existir"""
        self.templates = {
            "teste_configuracao": {
                "assunto": "üß™ Teste de Configura√ß√£o - EstagioPro UFVJM",
                "html": "<h1>Teste de Email</h1><p>Configura√ß√£o funcionando: {configuracao_nome}</p>",
                "texto": "Teste de Email\\nConfigura√ß√£o funcionando: {configuracao_nome}"
            }
        }
    
    def _verificar_senha_app(self):
        """Verificar se existe senha de app configurada"""
        import os
        
        # Tentar vari√°vel de ambiente primeiro (mais seguro)
        gmail_app_password = os.getenv('GMAIL_APP_PASSWORD')
        if gmail_app_password:
            print("‚úÖ Usando senha de app do Gmail (vari√°vel de ambiente)")
            self.senha_email = gmail_app_password
            self.status_configuracao = "Senha de app (segura)"
            return
        
        # Tentar outras vari√°veis de ambiente
        email_password = os.getenv('EMAIL_PASSWORD')
        if email_password:
            print("‚úÖ Usando senha de email (vari√°vel de ambiente)")
            self.senha_email = email_password
            self.status_configuracao = "Vari√°vel de ambiente"
            return
        
        # Usar senha padr√£o
        print("‚ö†Ô∏è Usando senha padr√£o - Recomenda-se configurar senha de app")
        self.status_configuracao = "Senha padr√£o (n√£o recomendado)"
    
    def configurar_credenciais(self, email, senha):
        """Configurar credenciais manualmente"""
        self.email_remetente = email
        self.senha_email = senha
        self.config_ativa = None  # Resetar para re-testar
        print(f"‚úÖ Credenciais atualizadas para: {email}")
    
    def testar_configuracao_smtp(self, config, timeout=None):
        """Testar uma configura√ß√£o SMTP espec√≠fica"""
        import smtplib
        import ssl
        
        # Usar timeout da configura√ß√£o ou padr√£o
        if timeout is None:
            timeout = config.get('timeout', self.config_gerais.get('timeout_padrao', 10))
        
        try:
            # Configurar servidor SMTP baseado na configura√ß√£o JSON
            if config['seguranca'] == 'SSL':
                context = ssl.create_default_context()
                server = smtplib.SMTP_SSL(
                    config['servidor'], 
                    config['porta'], 
                    context=context, 
                    timeout=timeout
                )
            else:
                server = smtplib.SMTP(config['servidor'], config['porta'], timeout=timeout)
                context = ssl.create_default_context()
                server.starttls(context=context)
            
            # Tentar autentica√ß√£o
            server.login(config['username'], self.senha_email)
            server.quit()
            
            return True, None
            
        except Exception as e:
            return False, str(e)
    
    def encontrar_configuracao_valida(self):
        """Encontrar uma configura√ß√£o SMTP que funcione"""
        
        if self.config_ativa:
            return self.config_ativa  # J√° temos uma configura√ß√£o v√°lida
        
        print("üîç Testando configura√ß√µes de email...")
        
                    # Configura√ß√µes j√° est√£o ordenadas por prioridade no carregamento
        configs_ordenadas = self.configuracoes
        
        for config in configs_ordenadas:
            print(f"üîÑ Testando {config['nome']}...")
            
            sucesso, erro = self.testar_configuracao_smtp(config, timeout=5)
            
            if sucesso:
                print(f"‚úÖ {config['nome']} - FUNCIONANDO!")
                self.config_ativa = config
                self.status_configuracao = f"Ativa: {config['nome']}"
                return config
            else:
                print(f"‚ùå {config['nome']} - Falhou: {erro}")
        
        print("‚ö†Ô∏è Nenhuma configura√ß√£o SMTP funcionou")
        self.status_configuracao = "Todas as configura√ß√µes falharam"
        return None
    
    def validar_configuracao(self):
        """Validar se as configura√ß√µes est√£o corretas"""
        import os
        
        # Tentar encontrar configura√ß√£o v√°lida se n√£o temos uma
        if not self.config_ativa:
            self.encontrar_configuracao_valida()
        
        status = {
            "email_configurado": bool(self.email_remetente),
            "senha_configurada": bool(self.senha_email),
            "usando_variavel_ambiente": bool(os.getenv('GMAIL_APP_PASSWORD')),
            "configuracao_ativa": self.config_ativa['nome'] if self.config_ativa else "Nenhuma",
            "status": self.status_configuracao,
            "servidor_smtp": f"{self.config_ativa['servidor']}:{self.config_ativa['porta']}" if self.config_ativa else "N/A"
        }
        
        return status
        
    def enviar_email(self, destinatario, assunto, corpo_html, corpo_texto=None):
        """Enviar email HTML/texto"""
        try:
            # Criar mensagem
            msg = MIMEMultipart('alternative')
            msg['From'] = self.email_remetente
            msg['To'] = destinatario
            msg['Subject'] = assunto
            
            # Adicionar corpo em texto simples (fallback)
            if corpo_texto:
                parte_texto = MIMEText(corpo_texto, 'plain', 'utf-8')
                msg.attach(parte_texto)
            
            # Adicionar corpo HTML
            parte_html = MIMEText(corpo_html, 'html', 'utf-8')
            msg.attach(parte_html)
            
            # Garantir que temos uma configura√ß√£o v√°lida
            if not self.config_ativa:
                config = self.encontrar_configuracao_valida()
                if not config:
                    return {
                        "sucesso": False, 
                        "erro": "Nenhuma configura√ß√£o de email v√°lida encontrada. Configure senha de app ou Gmail API."
                    }
            
            config = self.config_ativa

            # Verificar se temos uma configura√ß√£o v√°lida
            if not config:
                return {
                    "sucesso": False,
                    "erro": "Nenhuma configura√ß√£o SMTP ativa encontrada"
                }

            # Conectar ao servidor SMTP baseado na configura√ß√£o ativa
            import ssl

            if config['seguranca'] == 'SSL':
                context = ssl.create_default_context()
                server = smtplib.SMTP_SSL(config['servidor'], config['porta'], context=context)
            else:
                server = smtplib.SMTP(config['servidor'], config['porta'])
                context = ssl.create_default_context()
                server.starttls(context=context)
            
            # Autenticar usando username da configura√ß√£o
            server.login(config['username'], self.senha_email)
            
            # Enviar email
            texto_msg = msg.as_string()
            server.sendmail(self.email_remetente, destinatario, texto_msg)
            server.quit()
            
            return {
                "sucesso": True, 
                "mensagem": f"Email enviado com sucesso via {config['nome']}",
                "configuracao": config['nome']
            }
            
        except smtplib.SMTPAuthenticationError:
            return {"sucesso": False, "erro": "Erro de autentica√ß√£o. Verifique email e senha."}
        except smtplib.SMTPRecipientsRefused:
            return {"sucesso": False, "erro": f"Destinat√°rio inv√°lido: {destinatario}"}
        except smtplib.SMTPServerDisconnected:
            return {"sucesso": False, "erro": "Conex√£o com servidor SMTP perdida."}
        except Exception as e:
            return {"sucesso": False, "erro": f"Erro ao enviar email: {str(e)}"}
    
    def usar_template(self, template_nome, **kwargs):
        """Usar um template do arquivo JSON"""
        
        if template_nome not in self.templates:
            return {
                "sucesso": False,
                "erro": f"Template '{template_nome}' n√£o encontrado"
            }
        
        try:
            template = self.templates[template_nome]
            
            # Formatar assunto
            assunto = template.get('assunto', 'Email do EstagioPro').format(**kwargs)
            
            # Formatar corpo HTML
            corpo_html = template.get('html', '').format(**kwargs)
            
            # Formatar corpo texto (opcional)
            corpo_texto = template.get('texto', '').format(**kwargs) if template.get('texto') else None
            
            return {
                "sucesso": True,
                "assunto": assunto,
                "corpo_html": corpo_html,
                "corpo_texto": corpo_texto
            }
            
        except KeyError as e:
            return {
                "sucesso": False,
                "erro": f"Campo obrigat√≥rio n√£o fornecido: {e}"
            }
        except Exception as e:
            return {
                "sucesso": False,
                "erro": f"Erro ao processar template: {str(e)}"
            }
    
    def enviar_email_com_template(self, destinatario, template_nome, **kwargs):
        """Enviar email usando template do JSON"""
        
        # Processar template
        resultado_template = self.usar_template(template_nome, **kwargs)
        
        if not resultado_template["sucesso"]:
            return resultado_template
        
        # Enviar email
        return self.enviar_email(
            destinatario,
            resultado_template["assunto"],
            resultado_template["corpo_html"],
            resultado_template["corpo_texto"]
        )
    
    def testar_email_com_configuracao(self, destinatario="vasconcelos.wakim@ufvjm.edu.br"):
        """Testar email usando template de teste e configura√ß√£o JSON"""
        
        from datetime import datetime
        
        # Dados para o template de teste
        dados_teste = {
            "configuracao_nome": self.config_ativa['nome'] if self.config_ativa else "Nenhuma",
            "data_hora": datetime.now().strftime("%d/%m/%Y √†s %H:%M:%S"),
            "servidor": f"{self.config_ativa['servidor']}:{self.config_ativa['porta']}" if self.config_ativa else "N/A",
            "username": self.config_ativa['username'] if self.config_ativa else "N/A"
        }
        
        # Usar template de teste
        return self.enviar_email_com_template(destinatario, "teste_configuracao", **dados_teste)
    
    def criar_template_alerta_estudante(self, nome_estudante, empresa, data_termino, dias_restantes, orientador):
        """Criar template HTML para alerta de estudante"""
        
        # Determinar cor e urg√™ncia baseado nos dias restantes
        if dias_restantes <= 3:
            cor_alerta = "#dc3545"  # Vermelho
            nivel_urgencia = "CR√çTICO"
            icone = "üö®"
        elif dias_restantes <= 7:
            cor_alerta = "#fd7e14"  # Laranja
            nivel_urgencia = "ALTO"
            icone = "‚ö†Ô∏è"
        else:
            cor_alerta = "#ffc107"  # Amarelo
            nivel_urgencia = "M√âDIO"
            icone = "‚è∞"
        
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Alerta de Est√°gio - EstagioPro</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
    
    <!-- Cabe√ßalho -->
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
        <h1 style="margin: 0; font-size: 28px;">üéì EstagioPro</h1>
        <p style="margin: 5px 0 0 0; font-size: 16px; opacity: 0.9;">Sistema de Controle de Est√°gio - UFVJM</p>
    </div>
    
    <!-- Alerta Principal -->
    <div style="background-color: {cor_alerta}; color: white; padding: 20px; text-align: center;">
        <h2 style="margin: 0; font-size: 24px;">{icone} ALERTA DE N√çVEL {nivel_urgencia}</h2>
        <p style="margin: 10px 0 0 0; font-size: 18px; font-weight: bold;">Seu est√°gio est√° pr√≥ximo do vencimento!</p>
    </div>
    
    <!-- Conte√∫do -->
    <div style="background-color: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px;">
        
        <h3 style="color: #495057; margin-top: 0;">Ol√°, {nome_estudante}!</h3>
        
        <div style="background-color: white; padding: 20px; border-radius: 8px; border-left: 4px solid {cor_alerta}; margin: 20px 0;">
            <h4 style="margin-top: 0; color: {cor_alerta};">üìã Informa√ß√µes do Est√°gio:</h4>
            <p><strong>üè¢ Empresa:</strong> {empresa}</p>
            <p><strong>üìÖ Data de T√©rmino:</strong> {data_termino}</p>
            <p><strong>‚è∞ Dias Restantes:</strong> <span style="color: {cor_alerta}; font-weight: bold;">{int(dias_restantes)} dias</span></p>
            <p><strong>üë®‚Äçüè´ Orientador:</strong> Prof. {orientador}</p>
        </div>
        
        <div style="background-color: #e3f2fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="margin-top: 0; color: #1976d2;">üìù A√ß√µes Necess√°rias:</h4>
            <ul style="margin: 10px 0; padding-left: 20px;">
                <li>‚úÖ Verifique se todos os relat√≥rios foram entregues no sistema</li>
                <li>üìã Confirme se todas as atividades obrigat√≥rias foram cumpridas</li>
                <li>üìû Entre em contato com seu orientador para orienta√ß√µes finais</li>
                <li>üìÑ Organize toda a documenta√ß√£o necess√°ria para conclus√£o</li>
                <li>‚ö° Tome as provid√™ncias necess√°rias com urg√™ncia</li>
            </ul>
        </div>
        
        {"<div style='background-color: #ffebee; padding: 15px; border-radius: 8px; border: 2px solid #f44336; margin: 20px 0;'><p style='margin: 0; color: #c62828; font-weight: bold; text-align: center;'>‚ö†Ô∏è ATEN√á√ÉO: Prazo cr√≠tico! Aja imediatamente!</p></div>" if dias_restantes <= 3 else ""}
        
        <!-- Bot√£o de A√ß√£o -->
        <div style="text-align: center; margin: 30px 0;">
            <a href="mailto:{orientador}@ufvjm.edu.br" style="background-color: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block;">
                üìß Entrar em Contato com Orientador
            </a>
        </div>
        
    </div>
    
    <!-- Rodap√© -->
    <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #6c757d; color: white; border-radius: 8px;">
        <p style="margin: 0; font-size: 14px;">
            <strong>Sistema EstagioPro</strong><br>
            Ci√™ncias Cont√°beis - UFVJM<br>
            Prof. Dr. Vasconcelos Reis Wakim - SIPAE 1717044
        </p>
        <p style="margin: 10px 0 0 0; font-size: 12px; opacity: 0.8;">
            Este √© um email autom√°tico. N√£o responda a esta mensagem.
        </p>
    </div>
    
</body>
</html>"""
        
        # Vers√£o em texto simples
        texto = f"""
ALERTA DE EST√ÅGIO - EstagioPro

Ol√°, {nome_estudante}!

N√çVEL DE URG√äNCIA: {nivel_urgencia}
Seu est√°gio est√° pr√≥ximo do vencimento!

INFORMA√á√ïES DO EST√ÅGIO:
- Empresa: {empresa}
- Data de T√©rmino: {data_termino}
- Dias Restantes: {int(dias_restantes)} dias
- Orientador: Prof. {orientador}

A√á√ïES NECESS√ÅRIAS:
‚úÖ Verifique se todos os relat√≥rios foram entregues no sistema
üìã Confirme se todas as atividades obrigat√≥rias foram cumpridas
üìû Entre em contato com seu orientador para orienta√ß√µes finais
üìÑ Organize toda a documenta√ß√£o necess√°ria para conclus√£o
‚ö° Tome as provid√™ncias necess√°rias com urg√™ncia

Sistema EstagioPro - Ci√™ncias Cont√°beis - UFVJM
Prof. Dr. Vasconcelos Reis Wakim - SIPAE 1717044
"""
        
        return html, texto
    
    def criar_template_alerta_professor(self, nome_professor, nome_estudante, empresa, data_termino, dias_restantes):
        """Criar template HTML para alerta de professor"""
        
        # Determinar cor e urg√™ncia baseado nos dias restantes
        if dias_restantes <= 3:
            cor_alerta = "#dc3545"  # Vermelho
            nivel_urgencia = "CR√çTICO"
            icone = "üö®"
        elif dias_restantes <= 7:
            cor_alerta = "#fd7e14"  # Laranja
            nivel_urgencia = "ALTO"
            icone = "‚ö†Ô∏è"
        else:
            cor_alerta = "#ffc107"  # Amarelo
            nivel_urgencia = "M√âDIO"
            icone = "‚è∞"
        
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Alerta de Orienta√ß√£o - EstagioPro</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
    
    <!-- Cabe√ßalho -->
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
        <h1 style="margin: 0; font-size: 28px;">üéì EstagioPro</h1>
        <p style="margin: 5px 0 0 0; font-size: 16px; opacity: 0.9;">Sistema de Controle de Est√°gio - UFVJM</p>
    </div>
    
    <!-- Alerta Principal -->
    <div style="background-color: {cor_alerta}; color: white; padding: 20px; text-align: center;">
        <h2 style="margin: 0; font-size: 24px;">{icone} ALERTA DE ORIENTA√á√ÉO - N√çVEL {nivel_urgencia}</h2>
        <p style="margin: 10px 0 0 0; font-size: 18px; font-weight: bold;">Est√°gio de orientando pr√≥ximo do vencimento</p>
    </div>
    
    <!-- Conte√∫do -->
    <div style="background-color: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px;">
        
        <h3 style="color: #495057; margin-top: 0;">Prezado(a) Prof. {nome_professor},</h3>
        
        <p style="font-size: 16px; color: #495057;">
            Informamos que um est√°gio sob sua orienta√ß√£o est√° pr√≥ximo do vencimento e requer sua aten√ß√£o.
        </p>
        
        <div style="background-color: white; padding: 20px; border-radius: 8px; border-left: 4px solid {cor_alerta}; margin: 20px 0;">
            <h4 style="margin-top: 0; color: {cor_alerta};">üìã Informa√ß√µes do Est√°gio:</h4>
            <p><strong>üë§ Estudante:</strong> {nome_estudante}</p>
            <p><strong>üè¢ Empresa:</strong> {empresa}</p>
            <p><strong>üìÖ Data de T√©rmino:</strong> {data_termino}</p>
            <p><strong>‚è∞ Dias Restantes:</strong> <span style="color: {cor_alerta}; font-weight: bold;">{int(dias_restantes)} dias</span></p>
        </div>
        
        <div style="background-color: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffc107;">
            <h4 style="margin-top: 0; color: #856404;">üìù A√ß√µes Solicitadas:</h4>
            <ul style="margin: 10px 0; padding-left: 20px; color: #856404;">
                <li>‚úÖ Verificar se todos os relat√≥rios foram entregues pelo estudante</li>
                <li>üìã Confirmar se todas as atividades obrigat√≥rias foram cumpridas</li>
                <li>üìû Entrar em contato com o estudante para orienta√ß√µes finais</li>
                <li>üìä Preparar avalia√ß√£o final do est√°gio</li>
                <li>üìÑ Providenciar documenta√ß√£o de conclus√£o</li>
                <li>üìß Informar a coordena√ß√£o sobre o status do est√°gio</li>
            </ul>
        </div>
        
        {"<div style='background-color: #ffebee; padding: 15px; border-radius: 8px; border: 2px solid #f44336; margin: 20px 0;'><p style='margin: 0; color: #c62828; font-weight: bold; text-align: center;'>üö® URGENTE: Prazo cr√≠tico! A√ß√£o imediata necess√°ria!</p></div>" if dias_restantes <= 3 else ""}
        
        <!-- Bot√µes de A√ß√£o -->
        <div style="text-align: center; margin: 30px 0;">
            <a href="mailto:coordenacao.contabeis@ufvjm.edu.br" style="background-color: #28a745; color: white; padding: 15px 25px; text-decoration: none; border-radius: 5px; font-weight: bold; display: inline-block; margin: 5px;">
                üìß Contatar Coordena√ß√£o
            </a>
        </div>
        
    </div>
    
    <!-- Rodap√© -->
    <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #6c757d; color: white; border-radius: 8px;">
        <p style="margin: 0; font-size: 14px;">
            <strong>Sistema EstagioPro</strong><br>
            Ci√™ncias Cont√°beis - UFVJM<br>
            Prof. Dr. Vasconcelos Reis Wakim - SIPAE 1717044
        </p>
        <p style="margin: 10px 0 0 0; font-size: 12px; opacity: 0.8;">
            Este √© um email autom√°tico. N√£o responda a esta mensagem.
        </p>
    </div>
    
</body>
</html>"""
        
        # Vers√£o em texto simples
        texto = f"""
ALERTA DE ORIENTA√á√ÉO - EstagioPro

Prezado(a) Prof. {nome_professor},

N√çVEL DE URG√äNCIA: {nivel_urgencia}
Est√°gio de orientando pr√≥ximo do vencimento.

INFORMA√á√ïES DO EST√ÅGIO:
- Estudante: {nome_estudante}
- Empresa: {empresa}
- Data de T√©rmino: {data_termino}
- Dias Restantes: {int(dias_restantes)} dias

A√á√ïES SOLICITADAS:
‚úÖ Verificar se todos os relat√≥rios foram entregues pelo estudante
üìã Confirmar se todas as atividades obrigat√≥rias foram cumpridas
üìû Entrar em contato com o estudante para orienta√ß√µes finais
üìä Preparar avalia√ß√£o final do est√°gio
üìÑ Providenciar documenta√ß√£o de conclus√£o
üìß Informar a coordena√ß√£o sobre o status do est√°gio

Sistema EstagioPro - Ci√™ncias Cont√°beis - UFVJM
Prof. Dr. Vasconcelos Reis Wakim - SIPAE 1717044
"""
        
        return html, texto


class ModernReportGenerator:
    """Gerador de relat√≥rios modernos com design profissional"""
    
    def __init__(self):
        if not REPORTLAB_AVAILABLE:
            raise ImportError("ReportLab n√£o est√° dispon√≠vel")
            
        self.colors = {
            'primary': HexColor('#1e3a8a'),
            'secondary': HexColor('#3b82f6'),
            'accent': HexColor('#059669'),
            'text': HexColor('#1f2937'),
            'light_gray': HexColor('#f3f4f6'),
            'medium_gray': HexColor('#9ca3af'),
            'white': HexColor('#ffffff')
        }
        
    def create_header_footer(self, canvas, doc):
        """Criar cabe√ßalho e rodap√© padr√£o"""
        canvas.saveState()
        
        # Cabe√ßalho
        canvas.setFillColor(self.colors['primary'])
        canvas.rect(0, A4[1] - 2*cm, A4[0], 2*cm, fill=1)
        
        # Logo UFVJM (se existir)
        logo_path = "ufvjm.png"
        if os.path.exists(logo_path):
            try:
                canvas.drawImage(logo_path, A4[0]/2 - 1*cm, A4[1] - 1.8*cm, 
                               width=2*cm, height=1.6*cm, preserveAspectRatio=True)
            except:
                pass
        
        # T√≠tulo da institui√ß√£o
        canvas.setFillColor(white)
        canvas.setFont("Helvetica-Bold", 16)
        canvas.drawCentredText(A4[0]/2, A4[1] - 0.8*cm, "UNIVERSIDADE FEDERAL DOS VALES DO JEQUITINHONHA E MUCURI")
        canvas.setFont("Helvetica", 12)
        canvas.drawCentredText(A4[0]/2, A4[1] - 1.2*cm, "Sistema de Gest√£o de Est√°gios - EstagioPro")
        
        # Rodap√©
        canvas.setFillColor(self.colors['medium_gray'])
        canvas.setFont("Helvetica", 8)
        canvas.drawString(2*cm, 1*cm, f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
        canvas.drawRightString(A4[0] - 2*cm, 1*cm, f"P√°gina {doc.page}")
        
        # Linha decorativa no rodap√©
        canvas.setStrokeColor(self.colors['primary'])
        canvas.setLineWidth(2)
        canvas.line(2*cm, 1.5*cm, A4[0] - 2*cm, 1.5*cm)
        
        canvas.restoreState()
    
    def get_styles(self):
        """Obter estilos customizados para o relat√≥rio"""
        styles = getSampleStyleSheet()
        
        # T√≠tulo principal
        styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=styles['Title'],
            fontSize=24,
            spaceAfter=30,
            textColor=self.colors['primary'],
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Subt√≠tulo
        styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=styles['Heading2'],
            fontSize=16,
            spaceAfter=20,
            textColor=self.colors['secondary'],
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Cabe√ßalho de se√ß√£o
        styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=styles['Heading3'],
            fontSize=14,
            spaceAfter=15,
            spaceBefore=20,
            textColor=self.colors['primary'],
            fontName='Helvetica-Bold',
            borderWidth=1,
            borderColor=self.colors['primary'],
            borderPadding=5,
            backColor=self.colors['light_gray']
        ))
        
        # Texto normal customizado
        styles.add(ParagraphStyle(
            name='CustomNormal',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            textColor=self.colors['text'],
            fontName='Helvetica',
            alignment=TA_JUSTIFY
        ))
        
        # Texto centralizado
        styles.add(ParagraphStyle(
            name='CenteredText',
            parent=styles['Normal'],
            fontSize=11,
            textColor=self.colors['text'],
            fontName='Helvetica',
            alignment=TA_CENTER
        ))
        
        return styles
    
    def create_modern_table(self, data, headers=None, col_widths=None):
        """Criar tabela com design moderno"""
        if headers:
            data.insert(0, headers)
        
        table = Table(data, colWidths=col_widths)
        
        # Estilo da tabela
        table_style = [
            # Cabe√ßalho
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('VALIGN', (0, 0), (-1, 0), 'MIDDLE'),
            
            # Corpo da tabela
            ('BACKGROUND', (0, 1), (-1, -1), white),
            ('TEXTCOLOR', (0, 1), (-1, -1), self.colors['text']),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (0, 1), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 1), (-1, -1), 'MIDDLE'),
            
            # Bordas e grid
            ('GRID', (0, 0), (-1, -1), 1, self.colors['medium_gray']),
            ('LINEBELOW', (0, 0), (-1, 0), 2, self.colors['primary']),
            
            # Altern√¢ncia de cores nas linhas
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.colors['light_gray']]),
            
            # Padding
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]
        
        table.setStyle(TableStyle(table_style))
        return table
    
    def create_info_box(self, title, content, box_type='info'):
        """Criar caixa de informa√ß√£o colorida"""
        colors_map = {
            'info': self.colors['secondary'],
            'success': self.colors['accent'],
            'warning': HexColor('#f59e0b'),
            'error': HexColor('#dc2626')
        }
        
        box_color = colors_map.get(box_type, self.colors['secondary'])
        
        # Criar tabela para simular a caixa
        data = [[f"üìã {title}", content]]
        table = Table(data, colWidths=[4*cm, 13*cm])
        
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, 0), box_color),
            ('BACKGROUND', (1, 0), (1, 0), self.colors['light_gray']),
            ('TEXTCOLOR', (0, 0), (0, 0), white),
            ('TEXTCOLOR', (1, 0), (1, 0), self.colors['text']),
            ('FONTNAME', (0, 0), (0, 0), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, 0), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('ALIGN', (0, 0), (0, 0), 'CENTER'),
            ('ALIGN', (1, 0), (1, 0), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, box_color),
            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        return table


class SistemaEstagio:
    def __init__(self, usuario_logado=None):
        # Dados do usu√°rio logado
        self.usuario_logado = usuario_logado
        
        # Controle de estado da aplica√ß√£o
        self.app_running = True
        
        # Inicializar gerador de relat√≥rios modernos
        try:
            self.report_generator = ModernReportGenerator()
        except ImportError:
            self.report_generator = None
            print("‚ö†Ô∏è  Relat√≥rios modernos n√£o dispon√≠veis - ReportLab n√£o instalado")
        self.datetime_timer_id = None
        
        # Configura√ß√£o da janela principal
        self.root = ctk.CTk()
        self.root.title("EstagioPro - Sistema de Controle de Est√°gio - Ci√™ncias Cont√°beis UFVJM")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)
        
        # Configurar √≠cone da janela
        try:
            if os.path.exists("ufvjm.ico"):
                self.root.iconbitmap("ufvjm.ico")
        except Exception as e:
            print(f"Erro ao carregar √≠cone: {e}")
        
        # Configurar para tela cheia (fullscreen)
        self.root.attributes('-fullscreen', True)  # Tela cheia completa
        
        # Configurar tema
        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")
        
        # Configurar atalho de teclado para sair do fullscreen (ESC)
        self.root.bind('<Escape>', lambda e: self.toggle_fullscreen())
        
        # Cores personalizadas
        self.cor_primaria = "#1e3a8a"  # Azul escuro
        self.cor_secundaria = "#3b82f6"  # Azul m√©dio
        self.cor_terciaria = "#60a5fa"  # Azul claro
        self.cor_fundo = "#f8fafc"  # Cinza muito claro
        self.cor_texto = "#1e293b"  # Cinza escuro
        self.cor_branco = "#ffffff"
        self.cor_hover = "#1e40af"  # Azul hover para bot√µes
        
        # Cores adicionais necess√°rias
        self.cor_azul = "#3b82f6"
        self.cor_azul_escuro = "#1e3a8a"
        self.cor_verde = "#059669"
        self.cor_verde_escuro = "#166534"
        self.cor_vermelho = "#dc2626"
        self.cor_laranja = "#ea580c"
        self.cor_laranja_escuro = "#c2410c"
        self.cor_amarelo = "#eab308"
        self.cor_roxo = "#9333ea"
        self.cor_cinza = "#64748b"
        self.cor_cinza_claro = "#f1f5f9"
        self.cor_cinza_escuro = "#475569"
        self.cor_sucesso = "#059669"
        self.cor_erro = "#dc2626"
        
        # Inicializar banco de dados
        self.init_database()
        
        # Inicializar sistema de backup
        self.init_backup_system()
        
        # Inicializar WhatsApp API
        self.init_whatsapp_api()
        
        # Inicializar EmailSender
        self.email_sender = EmailSender()
        
        # Inicializar Central de Alertas Inteligente
        try:
            from central_alertas_inteligente import CentralAlertasInteligente
            self.central_alertas = CentralAlertasInteligente()
            self.central_alertas.email_sender = self.email_sender
            self.central_alertas.whatsapp_api = self.whatsapp_api
            print("‚úÖ Central de Alertas Inteligente inicializada")
        except ImportError:
            self.central_alertas = None
            print("‚ö†Ô∏è Central de Alertas Inteligente n√£o dispon√≠vel")
        
        # Executar verifica√ß√£o di√°ria de alertas
        self.executar_verificacao_diaria()
        
        self.setup_ui()
        
    def init_database(self):
        """Inicializar banco de dados SQLite"""
        self.conn = sqlite3.connect('estagio.db')
        self.cursor = self.conn.cursor()
        
        # Criar tabela de estudantes
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS estudantes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL,
                email TEXT NOT NULL,
                curso TEXT NOT NULL,
                matricula TEXT UNIQUE NOT NULL,
                telefone TEXT,
                cpf TEXT UNIQUE NOT NULL,
                endereco TEXT,
                data_ingresso TEXT,
                data_cadastro TEXT,
                status TEXT DEFAULT 'Ativo'
            )
        ''')
        
        # Criar tabela de empresas
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS empresas (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL,
                email TEXT NOT NULL,
                telefone TEXT NOT NULL,
                cnpj TEXT UNIQUE NOT NULL,
                endereco TEXT,
                cidade TEXT,
                estado TEXT,
                cep TEXT,
                responsavel TEXT,
                cargo_responsavel TEXT,
                data_cadastro TEXT,
                status TEXT DEFAULT 'Ativo'
            )
        ''')
        
        # Criar tabela de orientadores
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS orientadores (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nome TEXT NOT NULL,
                siape TEXT UNIQUE NOT NULL,
                cpf TEXT UNIQUE NOT NULL,
                departamento TEXT NOT NULL,
                curso TEXT NOT NULL,
                telefone TEXT NOT NULL,
                email_institucional TEXT NOT NULL,
                senha TEXT NOT NULL,
                administrador INTEGER DEFAULT 0,
                data_cadastro TEXT,
                status TEXT DEFAULT 'Ativo'
            )
        ''')
        
        # Criar tabela de est√°gio obrigat√≥rio
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS estagio_obrigatorio (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                estudante_id INTEGER NOT NULL,
                orientador_id INTEGER NOT NULL,
                empresa_id INTEGER NOT NULL,
                data_inicio TEXT NOT NULL,
                data_termino TEXT NOT NULL,
                nome_supervisor TEXT NOT NULL,
                registro_crc TEXT NOT NULL,
                carga_horaria INTEGER DEFAULT 390,
                data_cadastro TEXT,
                status TEXT DEFAULT 'Ativo',
                FOREIGN KEY (estudante_id) REFERENCES estudantes (id),
                FOREIGN KEY (orientador_id) REFERENCES orientadores (id),
                FOREIGN KEY (empresa_id) REFERENCES empresas (id)
            )
        ''')
        
        # Criar tabela de est√°gio n√£o obrigat√≥rio
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS estagio_nao_obrigatorio (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                estudante_id INTEGER NOT NULL,
                orientador_id INTEGER NOT NULL,
                empresa_id INTEGER NOT NULL,
                data_inicio TEXT NOT NULL,
                data_termino TEXT NOT NULL,
                nome_supervisor TEXT NOT NULL,
                registro_crc TEXT,
                carga_horaria INTEGER DEFAULT 390,
                data_cadastro TEXT,
                status TEXT DEFAULT 'Ativo',
                FOREIGN KEY (estudante_id) REFERENCES estudantes (id),
                FOREIGN KEY (orientador_id) REFERENCES orientadores (id),
                FOREIGN KEY (empresa_id) REFERENCES empresas (id)
            )
        ''')
        
        # Criar tabela de controle de carga hor√°ria para est√°gio obrigat√≥rio
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS controle_ch_obrigatorio (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                estagio_id INTEGER NOT NULL,
                data_registro TEXT NOT NULL,
                horas_registradas INTEGER NOT NULL,
                observacoes TEXT,
                data_cadastro TEXT,
                FOREIGN KEY (estagio_id) REFERENCES estagio_obrigatorio (id)
            )
        ''')
        
        # Criar tabela de controle de carga hor√°ria para est√°gio n√£o obrigat√≥rio
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS controle_ch_nao_obrigatorio (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                estagio_id INTEGER NOT NULL,
                data_registro TEXT NOT NULL,
                horas_registradas INTEGER NOT NULL,
                observacoes TEXT,
                data_cadastro TEXT,
                FOREIGN KEY (estagio_id) REFERENCES estagio_nao_obrigatorio (id)
            )
        ''')
        
        # Criar tabela de controle de relat√≥rios anexados
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS relatorios_anexados (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                estagio_id INTEGER NOT NULL,
                tipo_relatorio TEXT NOT NULL,
                nome_arquivo TEXT NOT NULL,
                caminho_arquivo TEXT NOT NULL,
                data_anexo TEXT NOT NULL,
                FOREIGN KEY (estagio_id) REFERENCES estagio_obrigatorio (id)
            )
        ''')
        
        # Criar tabela de alertas
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS alertas (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tipo TEXT NOT NULL,
                titulo TEXT NOT NULL,
                mensagem TEXT NOT NULL,
                prioridade TEXT NOT NULL DEFAULT 'MEDIA',
                data_criacao TEXT NOT NULL,
                data_vencimento TEXT,
                status TEXT NOT NULL DEFAULT 'ATIVO',
                estagio_id INTEGER,
                estudante_id INTEGER,
                lido INTEGER DEFAULT 0,
                whatsapp_enviado INTEGER DEFAULT 0,
                data_envio_whatsapp TEXT,
                data_resolucao TEXT,
                FOREIGN KEY (estagio_id) REFERENCES estagio_obrigatorio (id),
                FOREIGN KEY (estudante_id) REFERENCES estudantes (id)
            )
        ''')
        
        # Adicionar campos se n√£o existirem (para compatibilidade)
        try:
            self.cursor.execute('ALTER TABLE alertas ADD COLUMN data_resolucao TEXT')
            self.conn.commit()
        except sqlite3.OperationalError:
            pass  # Campo j√° existe
        
        try:
            self.cursor.execute('ALTER TABLE alertas ADD COLUMN whatsapp_enviado INTEGER DEFAULT 0')
            self.conn.commit()
        except sqlite3.OperationalError:
            pass  # Campo j√° existe
            
        try:
            self.cursor.execute('ALTER TABLE alertas ADD COLUMN data_envio_whatsapp TEXT')
            self.conn.commit()
        except sqlite3.OperationalError:
            pass  # Campo j√° existe
        
        # Criar tabela de configura√ß√µes do sistema
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS configuracoes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chave TEXT UNIQUE NOT NULL,
                valor TEXT NOT NULL,
                descricao TEXT,
                data_atualizacao TEXT NOT NULL
            )
        ''')
        
        # Inserir configura√ß√µes padr√£o
        configuracoes_padrao = [
            ('dias_aviso_termino', '30', 'Dias de anteced√™ncia para avisar sobre t√©rmino do est√°gio'),
            ('whatsapp_ativo', 'true', 'Se o sistema de WhatsApp est√° ativo'),
            ('ultima_verificacao_diaria', '', 'Data da √∫ltima verifica√ß√£o di√°ria de alertas'),
            ('api_whatsapp_url', '', 'URL da API do WhatsApp'),
            ('api_whatsapp_token', '', 'Token de autentica√ß√£o da API do WhatsApp'),
            ('api_whatsapp_phone_id', '', 'Phone Number ID da API do WhatsApp')
        ]
        
        for chave, valor, descricao in configuracoes_padrao:
            self.cursor.execute('''
                INSERT OR IGNORE INTO configuracoes (chave, valor, descricao, data_atualizacao)
                VALUES (?, ?, ?, ?)
            ''', (chave, valor, descricao, datetime.now().strftime("%Y-%m-%d %H:%M")))
        
        # Criar tabela de log de envios WhatsApp
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS log_whatsapp (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telefone TEXT NOT NULL,
                mensagem TEXT NOT NULL,
                status TEXT NOT NULL,
                resposta_api TEXT,
                data_envio TEXT NOT NULL,
                estagio_id INTEGER,
                tipo_destinatario TEXT NOT NULL,
                FOREIGN KEY (estagio_id) REFERENCES estagio_obrigatorio (id)
            )
        ''')
        
        # Vari√°vel para armazenar orientador logado (simula√ß√£o)
        self.orientador_logado_id = 1  # Ser√° implementado sistema de login posteriormente
        
        self.conn.commit()
        
    def init_backup_system(self):
        """Inicializar sistema de backup autom√°tico"""
        # Criar diret√≥rio de backup se n√£o existir
        self.backup_dir = "backups"
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
        
        # Configurar backup autom√°tico a cada 10 minutos
        self.backup_interval = 600  # 10 minutos em segundos
        self.backup_thread = None
        self.backup_running = True
        
        # Iniciar thread de backup
        self.start_backup_thread()
        
    def start_backup_thread(self):
        """Iniciar thread de backup em background"""
        self.backup_thread = threading.Thread(target=self.backup_loop, daemon=True)
        self.backup_thread.start()
        
    def backup_loop(self):
        """Loop principal do sistema de backup"""
        while self.backup_running:
            try:
                # Aguardar intervalo de backup
                time.sleep(self.backup_interval)
                
                if self.backup_running:
                    self.create_backup()
                    
            except Exception as e:
                print(f"Erro no sistema de backup: {e}")
                time.sleep(60)  # Aguardar 1 minuto antes de tentar novamente
                
    def create_backup(self):
        """Criar backup do banco de dados"""
        try:
            # Gerar nome do arquivo de backup com timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"estagio_backup_{timestamp}.db"
            backup_path = os.path.join(self.backup_dir, backup_filename)
            
            # Fazer backup do banco de dados
            shutil.copy2('estagio.db', backup_path)
            
            # Limpar backups antigos (manter apenas os √∫ltimos 50)
            self.cleanup_old_backups()
            
            print(f"Backup criado: {backup_filename}")
            
        except Exception as e:
            print(f"Erro ao criar backup: {e}")
            
    def cleanup_old_backups(self):
        """Limpar backups antigos, mantendo apenas os √∫ltimos 50"""
        try:
            backup_files = []
            for file in os.listdir(self.backup_dir):
                if file.startswith("estagio_backup_") and file.endswith(".db"):
                    file_path = os.path.join(self.backup_dir, file)
                    backup_files.append((file_path, os.path.getmtime(file_path)))
            
            # Ordenar por data de modifica√ß√£o (mais recentes primeiro)
            backup_files.sort(key=lambda x: x[1], reverse=True)
            
            # Remover backups antigos se houver mais de 50
            if len(backup_files) > 50:
                for file_path, _ in backup_files[50:]:
                    try:
                        os.remove(file_path)
                        print(f"Backup antigo removido: {os.path.basename(file_path)}")
                    except Exception as e:
                        print(f"Erro ao remover backup antigo: {e}")
                        
        except Exception as e:
            print(f"Erro na limpeza de backups: {e}")
            
    def manual_backup(self):
        """Criar backup manual"""
        try:
            self.create_backup()
            self.show_message("Backup", "Backup criado com sucesso!")
        except Exception as e:
            self.show_message("Erro", f"Erro ao criar backup: {str(e)}")
            
    def stop_backup_system(self):
        """Parar sistema de backup"""
        self.backup_running = False
        if self.backup_thread and self.backup_thread.is_alive():
            # Reduzir timeout para fechamento mais r√°pido
            self.backup_thread.join(timeout=1)
        
    def setup_ui(self):
        # Frame principal
        self.main_frame = ctk.CTkFrame(self.root, fg_color="transparent")
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Configurar grid
        self.main_frame.grid_columnconfigure(1, weight=1)
        self.main_frame.grid_rowconfigure(0, weight=1)
        
        # Criar menu lateral
        self.create_sidebar()
        
        # Criar √°rea de conte√∫do principal
        self.create_main_content()
        
    def create_sidebar(self):
        # Frame do menu lateral
        self.sidebar = ctk.CTkFrame(
            self.main_frame, 
            width=280, 
            corner_radius=15,
            fg_color=self.cor_branco
        )
        self.sidebar.grid(row=0, column=0, sticky="nsew", padx=(0, 10))
        self.sidebar.grid_propagate(False)
        
        # Header do menu lateral
        self.create_sidebar_header()
        
        # Bot√µes do menu
        self.create_menu_buttons()
        
    def create_sidebar_header(self):
        # Frame do header
        header_frame = ctk.CTkFrame(
            self.sidebar, 
            fg_color=self.cor_primaria,
            corner_radius=15
        )
        header_frame.pack(fill="x", padx=10, pady=10)
        
        # Logo/T√≠tulo
        title_label = ctk.CTkLabel(
            header_frame,
            text="UFVJM",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_branco
        )
        title_label.pack(pady=(15, 5))
        
        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="Ci√™ncias Cont√°beis",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco
        )
        subtitle_label.pack(pady=(0, 15))
        
        # Separador
        separator = ctk.CTkFrame(header_frame, height=2, fg_color=self.cor_terciaria)
        separator.pack(fill="x", padx=20, pady=(0, 10))
        
    def create_menu_buttons(self):
        # Frame para os bot√µes
        buttons_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        buttons_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Obter menus permitidos para o perfil do usu√°rio
        menus_permitidos = []
        if self.usuario_logado:
            menus_permitidos = self.usuario_logado.get('menus_permitidos', [])
            perfil_nome = self.usuario_logado.get('perfil_nome', 'Usu√°rio')
            perfil_icone = self.usuario_logado.get('perfil_icone', 'üë§')
        
        # Definir todos os menus dispon√≠veis no sistema
        todos_menus = {
            'dashboard': ("üè†", "Dashboard", self.show_dashboard),
            'central_alertas': ("üîî", "Central de Alertas", self.show_central_alertas),
            'estudantes': ("üë•", "Estudantes", self.show_estudantes),
            'empresas': ("üè¢", "Empresas", self.show_empresas),
            'orientadores': ("üë®‚Äçüè´", "Orientadores", self.show_orientadores),
            'estagio_obrigatorio': ("üìã", "Est√°gio Obrigat√≥rio", self.show_estagio_obrigatorio),
            'estagio_nao_obrigatorio': ("üìù", "Est√°gio N√£o Obrigat√≥rio", self.show_estagio_nao_obrigatorio),
            'relatorios': ("üìä", "Relat√≥rios", self.show_relatorios),
            'certificados': ("üèÜ", "Certificados", self.show_certificados),
            'configuracoes': ("‚öôÔ∏è", "Configura√ß√µes", self.show_configuracoes),
            'backup': ("üíæ", "Backup", self.show_backup),
            'usuarios': ("üë§", "Usu√°rios", self.show_usuarios),
            'ajuda': ("‚ùì", "Ajuda", self.show_ajuda)
        }
        
        # Criar lista de menus baseada no perfil
        menu_items = []
        for menu_id in menus_permitidos:
            if menu_id in todos_menus:
                menu_items.append(todos_menus[menu_id])
        
        # Verificar se professor tem est√°gios completos para habilitar certificados
        if (self.usuario_logado and 
            not self.usuario_logado.get('administrador', False)):
            
            professor_id = self.usuario_logado.get('id') if self.usuario_logado else 0
            if professor_id and self.verificar_professor_tem_estagios_completos(professor_id):
                # Adicionar certificados aos menus permitidos se n√£o estiver j√° inclu√≠do
                if 'certificados' not in menus_permitidos:
                    menu_items.append(todos_menus['certificados'])
        
        # Bot√£o de aprova√ß√£o removido conforme solicitado
        
        self.menu_buttons = []
        
        # Criar bot√µes habilitados
        for icon, text, command in menu_items:
            btn = ctk.CTkButton(
                buttons_frame,
                text=f"{icon}  {text}",
                font=ctk.CTkFont(size=14, weight="normal"),
                height=45,
                corner_radius=10,
                fg_color="transparent",
                hover_color=self.cor_terciaria,
                text_color=self.cor_texto,
                anchor="w",
                command=command
            )
            btn.pack(fill="x", pady=2)
            self.menu_buttons.append(btn)
        
        # Espa√ßador flex√≠vel para empurrar os bot√µes inferiores para baixo
        spacer = ctk.CTkFrame(buttons_frame, fg_color="transparent", height=20)
        spacer.pack(fill="both", expand=True)
        
        # Bot√£o para alterar perfil
        change_profile_btn = ctk.CTkButton(
                    buttons_frame,
            text="üîÑ  Alterar Perfil",
                    font=ctk.CTkFont(size=14, weight="normal"),
                    height=45,
                    corner_radius=10,
            fg_color="#6c757d",
            hover_color="#5a6268",
            text_color=self.cor_branco,
                    anchor="w",
            command=self.show_change_profile_dialog
                )
        change_profile_btn.pack(fill="x", pady=(20, 10))
            
        # Bot√£o de sair
        exit_btn = ctk.CTkButton(
            buttons_frame,
            text="üö™  Sair",
            font=ctk.CTkFont(size=14, weight="normal"),
            height=45,
            corner_radius=10,
            fg_color="#dc2626",
            hover_color="#b91c1c",
            text_color=self.cor_branco,
            anchor="w",
            command=self.sair_sistema
        )
        exit_btn.pack(fill="x", pady=(0, 0))
    
    def recarregar_menus(self):
        """Recarrega os menus do sistema (√∫til quando status de est√°gios muda)"""
        # Limpar bot√µes existentes
        for btn in self.menu_buttons:
            btn.destroy()
        
        # Recriar bot√µes de menu
        self.create_menu_buttons()
    
    def verificar_e_atualizar_certificados(self):
        """Verifica se certificados devem ser habilitados e atualiza menus se necess√°rio"""
        if (self.usuario_logado and 
            not self.usuario_logado.get('administrador', False)):
            
            professor_id = self.usuario_logado.get('id') if self.usuario_logado else 0
            if professor_id:
                tem_estagios_completos = self.verificar_professor_tem_estagios_completos(professor_id)
                menus_permitidos = self.usuario_logado.get('menus_permitidos', [])
                
                # Se tem est√°gios completos e certificados n√£o est√° nos menus, recarregar
                if tem_estagios_completos and 'certificados' not in menus_permitidos:
                    self.recarregar_menus()
                    return True
                # Se n√£o tem est√°gios completos e certificados est√° nos menus, recarregar
                elif not tem_estagios_completos and 'certificados' in menus_permitidos:
                    self.recarregar_menus()
                    return True
        
        return False
    
    def reiniciar_sistema_login(self):
        """Reinicia o sistema abrindo a tela de login"""
        try:
            # Importar e executar o sistema de login
            import subprocess
            import sys
            
            # Reiniciar o sistema principal
            subprocess.Popen([sys.executable, "principal.py"])
            
        except Exception as e:
            print(f"Erro ao reiniciar sistema: {e}")
            # Fallback: mostrar mensagem para o usu√°rio
            self.show_message("Informa√ß√£o", "Sistema reiniciado. Execute novamente o arquivo principal.py para acessar a tela de login.")
    
    def show_change_profile_dialog(self):
        """Exibe di√°logo para alterar perfil do usu√°rio"""
        # Criar janela de di√°logo
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Alterar Perfil")
        dialog.geometry("600x500")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centralizar janela
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (dialog.winfo_screenheight() // 2) - (500 // 2)
        dialog.geometry(f"600x500+{x}+{y}")
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            dialog,
            text="üîÑ Alterar Perfil",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=20)
        
        # Frame principal com scroll
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Informa√ß√µes do perfil atual
        current_frame = ctk.CTkFrame(main_frame, fg_color="#e3f2fd")
        current_frame.pack(fill="x", padx=15, pady=15)
        
        current_title = ctk.CTkLabel(
            current_frame,
            text="üìã Informa√ß√µes do Perfil Atual",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#1976d2"
        )
        current_title.pack(pady=(15, 10))
        
        # Buscar informa√ß√µes completas do usu√°rio
        try:
            if not self.usuario_logado:
                self.show_message("Erro", "Usu√°rio n√£o est√° logado!")
                return

            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()

            cursor.execute("""
                SELECT nome, email, telefone, departamento, administrador,
                       data_cadastro, autorizado, data_autorizacao
                FROM orientadores
                WHERE id = ?
            """, (self.usuario_logado['id'] if self.usuario_logado else 0,))
            
            user_data = cursor.fetchone()
            conn.close()
            
            if user_data:
                nome, email, telefone, departamento, administrador, data_cadastro, autorizado, data_autorizacao = user_data
                
                # Informa√ß√µes detalhadas
                info_text = f"""
üë§ Nome: {nome}
üìß Email: {email}
üìû Telefone: {telefone}
üè¢ Departamento: {departamento}
üëë Perfil: {self.usuario_logado.get('perfil_nome', 'Usu√°rio')}
üìÖ Cadastrado em: {data_cadastro.split()[0] if data_cadastro else 'N/A'}
‚úÖ Status: {'Autorizado' if autorizado else 'Pendente'}
                """.strip()
                
                current_info = ctk.CTkLabel(
                    current_frame,
                    text=info_text,
                    font=ctk.CTkFont(size=12),
                    text_color="#1976d2",
                    justify="left"
                )
                current_info.pack(pady=(0, 15))
            else:
                # Fallback para informa√ß√µes b√°sicas
                perfil_atual = self.usuario_logado.get('perfil_nome', 'Usu√°rio') if self.usuario_logado else 'Usu√°rio'
                icone_atual = self.usuario_logado.get('perfil_icone', 'üë§') if self.usuario_logado else 'üë§'
                nome_atual = self.usuario_logado.get('nome', 'Usu√°rio') if self.usuario_logado else 'Usu√°rio'
                
                current_info = ctk.CTkLabel(
                    current_frame,
                    text=f"{icone_atual} {perfil_atual}\nüë§ {nome_atual}",
                    font=ctk.CTkFont(size=14),
                    text_color="#1976d2"
                )
                current_info.pack(pady=(0, 15))
                
        except Exception as e:
            # Fallback em caso de erro
            perfil_atual = self.usuario_logado.get('perfil_nome', 'Usu√°rio') if self.usuario_logado else 'Usu√°rio'
            icone_atual = self.usuario_logado.get('perfil_icone', 'üë§') if self.usuario_logado else 'üë§'
            nome_atual = self.usuario_logado.get('nome', 'Usu√°rio') if self.usuario_logado else 'Usu√°rio'
            
            current_info = ctk.CTkLabel(
                current_frame,
                text=f"{icone_atual} {perfil_atual}\nüë§ {nome_atual}",
                font=ctk.CTkFont(size=14),
                text_color="#1976d2"
            )
            current_info.pack(pady=(0, 15))
        
        # Se√ß√£o de estat√≠sticas do usu√°rio
        stats_frame = ctk.CTkFrame(main_frame, fg_color="#f0f8ff")
        stats_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        stats_title = ctk.CTkLabel(
            stats_frame,
            text="üìä Estat√≠sticas do Usu√°rio",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#4169e1"
        )
        stats_title.pack(pady=(15, 10))
        
        # Buscar estat√≠sticas do usu√°rio
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            user_id = self.usuario_logado['id'] if self.usuario_logado else 0 if self.usuario_logado else None
            
            # Contar est√°gios orientados
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_obrigatorio 
                WHERE orientador_id = ? AND status = 'Ativo'
            """, (user_id,))
            estagios_obrig = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_nao_obrigatorio 
                WHERE orientador_id = ? AND status = 'Ativo'
            """, (user_id,))
            estagios_nao_obrig = cursor.fetchone()[0]
            
            # Contar est√°gios completos
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_obrigatorio 
                WHERE orientador_id = ? AND (status = 'Completo' OR carga_horaria = 0)
            """, (user_id,))
            completos_obrig = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_nao_obrigatorio 
                WHERE orientador_id = ? AND (status = 'Completo' OR carga_horaria = 0)
            """, (user_id,))
            completos_nao_obrig = cursor.fetchone()[0]
            
            conn.close()
            
            total_estagios = estagios_obrig + estagios_nao_obrig
            total_completos = completos_obrig + completos_nao_obrig
            
            stats_text = f"""
üìã Est√°gios Obrigat√≥rios: {estagios_obrig} (Completos: {completos_obrig})
üìù Est√°gios N√£o Obrigat√≥rios: {estagios_nao_obrig} (Completos: {completos_nao_obrig})
üë• Total de Alunos: {total_estagios}
‚úÖ Est√°gios Completos: {total_completos}
üèÜ Certificados Dispon√≠veis: {'Sim' if total_completos > 0 else 'N√£o'}
            """.strip()
            
            stats_info = ctk.CTkLabel(
                stats_frame,
                text=stats_text,
                font=ctk.CTkFont(size=12),
                text_color="#4169e1",
                justify="left"
            )
            stats_info.pack(pady=(0, 15))
            
        except Exception as e:
            stats_info = ctk.CTkLabel(
                stats_frame,
                text="‚ùå Erro ao carregar estat√≠sticas",
                font=ctk.CTkFont(size=12),
                text_color="#dc3545"
            )
            stats_info.pack(pady=(0, 15))
        
        # Se√ß√£o de sele√ß√£o de novo perfil
        select_frame = ctk.CTkFrame(main_frame)
        select_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        select_title = ctk.CTkLabel(
            select_frame,
            text="üîÑ Selecionar Novo Perfil",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_texto
        )
        select_title.pack(pady=(15, 10))
        
        # Informa√ß√µes sobre as op√ß√µes
        info_frame = ctk.CTkFrame(select_frame, fg_color="#f8f9fa")
        info_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="üí° Op√ß√£o dispon√≠vel:\n‚Ä¢ Login com Perfil: Reinicia o sistema para tela de login com novo perfil",
            font=ctk.CTkFont(size=11),
            text_color="#6c757d",
            justify="left"
        )
        info_label.pack(pady=10)
        
        # Vari√°vel para armazenar a sele√ß√£o
        selected_profile = ctk.StringVar(value="")
        
        # Op√ß√µes de perfil
        profiles = [
            ("üëë", "Administrador", "administrador"),
            ("üë®‚Äçüè´", "Professor", "professor")
        ]
        
        for icon, name, value in profiles:
            profile_frame = ctk.CTkFrame(select_frame)
            profile_frame.pack(fill="x", padx=10, pady=5)
            
            radio_btn = ctk.CTkRadioButton(
                profile_frame,
                text=f"{icon} {name}",
                variable=selected_profile,
                value=value,
                font=ctk.CTkFont(size=14),
                text_color=self.cor_texto
            )
            radio_btn.pack(side="left", padx=15, pady=10)
            
            # Desabilitar o perfil atual
            if value == (self.usuario_logado.get('perfil_tipo', '') if self.usuario_logado else ''):
                radio_btn.configure(state="disabled")
                current_label = ctk.CTkLabel(
                    profile_frame,
                    text="(Atual)",
                    font=ctk.CTkFont(size=12),
                    text_color="#6c757d"
                )
                current_label.pack(side="right", padx=15, pady=10)
        
        # Bot√µes de a√ß√£o
        btn_frame = ctk.CTkFrame(main_frame)
        btn_frame.pack(fill="x", padx=15, pady=(0, 15))
        

        def fazer_login_com_perfil():
            novo_perfil = selected_profile.get()
            if not novo_perfil:
                self.show_message("Aviso", "Por favor, selecione um perfil.")
                return
            
            if novo_perfil == (self.usuario_logado.get('perfil_tipo', '') if self.usuario_logado else ''):
                self.show_message("Aviso", "Este j√° √© o seu perfil atual.")
                return
            
            # Confirmar login com novo perfil
            import tkinter.messagebox as messagebox
            if messagebox.askyesno("Confirmar", f"Deseja fazer login como {novo_perfil.title()}?\n\nO sistema ser√° reiniciado para a tela de login."):
                try:
                    # Fechar sistema atual
                    dialog.destroy()
                    self.root.destroy()
                    
                    # Reiniciar sistema com tela de login
                    self.reiniciar_sistema_login()
                    
                except Exception as e:
                    self.show_message("Erro", f"Erro ao reiniciar sistema: {str(e)}")
        
        # Bot√£o Alterar Senha (apenas para professores)
        if self.usuario_logado and self.usuario_logado.get('perfil') == 'professor':
            btn_alterar_senha = ctk.CTkButton(
                btn_frame,
                text="üîê Alterar Senha",
                command=lambda: self.show_alterar_senha_dialog(dialog),
                width=150,
                height=35,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#f59e0b",
                hover_color="#d97706"
            )
            btn_alterar_senha.pack(side="left", padx=(0, 10))
        
        # Bot√£o para fazer login com novo perfil (reinicia sistema)
        btn_login = ctk.CTkButton(
            btn_frame,
            text="Login com Perfil",
            command=fazer_login_com_perfil,
            width=150,
            height=35,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#007bff",
            hover_color="#0056b3"
        )
        btn_login.pack(side="left", padx=(0, 10))
        
        # Bot√£o cancelar
        btn_cancelar = ctk.CTkButton(
            btn_frame,
            text="Cancelar",
            command=dialog.destroy,
            width=120,
            height=35,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#6c757d",
            hover_color="#5a6268"
        )
        btn_cancelar.pack(side="left")
    
    def show_alterar_senha_dialog(self, parent_dialog=None):
        """Exibe di√°logo para alterar senha do professor"""
        # Criar janela de di√°logo
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Alterar Senha")
        dialog.geometry("500x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centralizar janela
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialog.winfo_screenheight() // 2) - (600 // 2)
        dialog.geometry(f"500x600+{x}+{y}")
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            dialog,
            text="üîê Alterar Senha",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=20)
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Informa√ß√µes do usu√°rio
        user_frame = ctk.CTkFrame(main_frame, fg_color="#e3f2fd")
        user_frame.pack(fill="x", padx=15, pady=15)
        
        user_title = ctk.CTkLabel(
            user_frame,
            text="üë§ Informa√ß√µes do Usu√°rio",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#1976d2"
        )
        user_title.pack(pady=(15, 10))
        
        user_info = ctk.CTkLabel(
            user_frame,
            text=f"Nome: {self.usuario_logado.get('nome', 'N/A') if self.usuario_logado else 'N/A'}\nEmail: {self.usuario_logado.get('email', 'N/A') if self.usuario_logado else 'N/A'}",
            font=ctk.CTkFont(size=12),
            text_color="#1976d2",
            justify="left"
        )
        user_info.pack(pady=(0, 15))
        
        # Formul√°rio de altera√ß√£o de senha
        form_frame = ctk.CTkFrame(main_frame)
        form_frame.pack(fill="x", padx=15, pady=15)
        
        form_title = ctk.CTkLabel(
            form_frame,
            text="üîë Nova Senha",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_texto
        )
        form_title.pack(pady=(15, 10))
        
        # Senha atual
        current_label = ctk.CTkLabel(
            form_frame,
            text="Senha Atual:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_texto
        )
        current_label.pack(anchor="w", padx=20, pady=(10, 5))
        
        current_password_entry = ctk.CTkEntry(
            form_frame,
            placeholder_text="Digite sua senha atual",
            show="*",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        current_password_entry.pack(padx=20, pady=(0, 10))
        
        # Nova senha
        new_label = ctk.CTkLabel(
            form_frame,
            text="Nova Senha:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_texto
        )
        new_label.pack(anchor="w", padx=20, pady=(10, 5))
        
        new_password_entry = ctk.CTkEntry(
            form_frame,
            placeholder_text="Digite sua nova senha",
            show="*",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        new_password_entry.pack(padx=20, pady=(0, 10))
        
        # Confirmar nova senha
        confirm_label = ctk.CTkLabel(
            form_frame,
            text="Confirmar Nova Senha:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_texto
        )
        confirm_label.pack(anchor="w", padx=20, pady=(10, 5))
        
        confirm_password_entry = ctk.CTkEntry(
            form_frame,
            placeholder_text="Confirme sua nova senha",
            show="*",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        confirm_password_entry.pack(padx=20, pady=(0, 15))
        
        # Valida√ß√£o de senha em tempo real
        def validate_new_password(event=None):
            password = new_password_entry.get()
            if len(password) >= 6:
                new_password_entry.configure(border_color="#10b981")  # Verde
            elif len(password) >= 3:
                new_password_entry.configure(border_color="#f59e0b")  # Amarelo
            else:
                new_password_entry.configure(border_color="#ef4444")  # Vermelho
        
        def validate_confirm_password(event=None):
            new_pass = new_password_entry.get()
            confirm_pass = confirm_password_entry.get()
            if confirm_pass and new_pass == confirm_pass:
                confirm_password_entry.configure(border_color="#10b981")  # Verde
            elif confirm_pass:
                confirm_password_entry.configure(border_color="#ef4444")  # Vermelho
            else:
                confirm_password_entry.configure(border_color="#e2e8f0")  # Cinza
        
        new_password_entry.bind('<KeyRelease>', validate_new_password)
        confirm_password_entry.bind('<KeyRelease>', validate_confirm_password)
        
        # Informa√ß√µes sobre requisitos da senha
        info_frame = ctk.CTkFrame(main_frame, fg_color="#f8f9fa")
        info_frame.pack(fill="x", padx=15, pady=15)
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="üí° Requisitos da senha:\n‚Ä¢ M√≠nimo 6 caracteres\n‚Ä¢ Pode conter letras, n√∫meros e s√≠mbolos\n‚Ä¢ N√£o pode ser igual √† senha atual",
            font=ctk.CTkFont(size=11),
            text_color="#6c757d",
            justify="left"
        )
        info_label.pack(pady=10)
        
        # Bot√µes
        btn_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        btn_frame.pack(fill="x", padx=15, pady=15)
        
        def alterar_senha():
            current_pass = current_password_entry.get().strip()
            new_pass = new_password_entry.get().strip()
            confirm_pass = confirm_password_entry.get().strip()
            
            # Valida√ß√µes
            if not current_pass or not new_pass or not confirm_pass:
                self.show_message("Erro", "Por favor, preencha todos os campos.")
                return
            
            if len(new_pass) < 6:
                self.show_message("Erro", "A nova senha deve ter pelo menos 6 caracteres.")
                return
            
            if new_pass != confirm_pass:
                self.show_message("Erro", "A confirma√ß√£o da senha n√£o confere.")
                return
            
            if new_pass == current_pass:
                self.show_message("Erro", "A nova senha deve ser diferente da senha atual.")
                return
            
            # Verificar senha atual
            if not self.verificar_senha_atual(current_pass):
                self.show_message("Erro", "A senha atual est√° incorreta.")
                current_password_entry.delete(0, 'end')
                current_password_entry.focus()
                return
            
            # Alterar senha
            if self.alterar_senha_usuario(new_pass):
                self.show_message("Sucesso", "Senha alterada com sucesso!")
                dialog.destroy()
                if parent_dialog:
                    parent_dialog.destroy()
            else:
                self.show_message("Erro", "Erro ao alterar senha. Tente novamente.")
        
        btn_alterar = ctk.CTkButton(
            btn_frame,
            text="üîê Alterar Senha",
            command=alterar_senha,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#10b981",
            hover_color="#059669"
        )
        btn_alterar.pack(side="left", padx=(0, 10))
        
        btn_cancelar = ctk.CTkButton(
            btn_frame,
            text="Cancelar",
            command=dialog.destroy,
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#6c757d",
            hover_color="#5a6268"
        )
        btn_cancelar.pack(side="left")
    
    def verificar_senha_atual(self, senha_atual):
        """Verifica se a senha atual est√° correta"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Hash da senha atual
            senha_hash = hashlib.sha256(senha_atual.encode()).hexdigest()
            
            # Verificar se a senha est√° correta
            cursor.execute("""
                SELECT id FROM orientadores 
                WHERE id = ? AND senha = ?
            """, (self.usuario_logado.get('id') if self.usuario_logado else 0, senha_hash))
            
            result = cursor.fetchone()
            conn.close()
            
            return result is not None
            
        except Exception as e:
            print(f"Erro ao verificar senha atual: {e}")
            return False
    
    def alterar_senha_usuario(self, nova_senha):
        """Altera a senha do usu√°rio no banco de dados"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Hash da nova senha
            nova_senha_hash = hashlib.sha256(nova_senha.encode()).hexdigest()
            
            # Atualizar senha no banco
            cursor.execute("""
                UPDATE orientadores 
                SET senha = ? 
                WHERE id = ?
            """, (nova_senha_hash, self.usuario_logado.get('id') if self.usuario_logado else 0))
            
            conn.commit()
            conn.close()
            
            return True
            
        except Exception as e:
            print(f"Erro ao alterar senha: {e}")
            return False
    
    def atualizar_perfil_usuario(self, novo_perfil):
        """Atualiza o perfil do usu√°rio no banco de dados"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Determinar se √© administrador baseado no perfil
            is_admin = 1 if novo_perfil == 'administrador' else 0
            
            # Atualizar perfil do usu√°rio
            cursor.execute("""
                UPDATE orientadores 
                SET administrador = ?
                WHERE id = ?
            """, (is_admin, self.usuario_logado['id'] if self.usuario_logado else 0 if self.usuario_logado else 0))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            raise Exception(f"Erro ao atualizar perfil no banco: {str(e)}")
    
    def atualizar_dados_usuario_logado(self, novo_perfil):
        """Atualiza os dados do usu√°rio logado na sess√£o"""
        try:
            # Buscar informa√ß√µes do novo perfil
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, nome, email, administrador
                FROM orientadores 
                WHERE id = ?
            """, (self.usuario_logado['id'] if self.usuario_logado else 0,))
            
            user_data = cursor.fetchone()
            conn.close()
            
            if user_data:
                id_user, nome, email, administrador = user_data
                
                # Determinar perfil baseado no flag administrador
                perfil_tipo = 'administrador' if administrador else 'professor'
                
                # Buscar informa√ß√µes do perfil
                from principal import LoginSystem
                login_system = LoginSystem(None)
                perfil_info = login_system.perfis_acesso[perfil_tipo]
                
                # Atualizar dados do usu√°rio logado
                if self.usuario_logado:
                    self.usuario_logado.update({
                    'id': id_user,
                    'nome': nome,
                    'email': email,
                    'administrador': bool(administrador),
                    'perfil_tipo': perfil_tipo,
                    'perfil_nome': perfil_info['nome'],
                    'perfil_icone': perfil_info['icone'],
                    'menus_permitidos': perfil_info['menus']
                })
                
        except Exception as e:
            raise Exception(f"Erro ao atualizar dados do usu√°rio: {str(e)}")
    
    def gerar_certificado_pdf(self, estudante_id, tipo_estagio):
        """Gera certificado PDF personalizado para o estudante"""
        try:
            # Importar bibliotecas necess√°rias
            try:
                if not REPORTLAB_AVAILABLE:
                    raise ImportError("ReportLab n√£o dispon√≠vel")
            except ImportError:
                self.show_message("Erro", "Biblioteca ReportLab n√£o encontrada. Instale com: pip install reportlab")
                return False
            
            # Buscar dados do estudante e est√°gio
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            if tipo_estagio == 'obrigatorio':
                cursor.execute("""
                    SELECT e.nome, eo.empresa, eo.carga_horaria, eo.data_inicio, eo.data_termino,
                           o.nome as orientador_nome
                    FROM estagio_obrigatorio eo
                    JOIN estudantes e ON eo.estudante_id = e.id
                    JOIN orientadores o ON eo.orientador_id = o.id
                    WHERE eo.estudante_id = ? AND (eo.status = 'Completo' OR eo.carga_horaria = 0 OR eo.carga_horaria = 0)
                """, (estudante_id,))
            else:
                cursor.execute("""
                    SELECT e.nome, eno.empresa, eno.carga_horaria, eno.data_inicio, eno.data_termino,
                           o.nome as orientador_nome
                    FROM estagio_nao_obrigatorio eno
                    JOIN estudantes e ON eno.estudante_id = e.id
                    JOIN orientadores o ON eno.orientador_id = o.id
                    WHERE eno.estudante_id = ? AND (eno.status = 'Completo' OR eno.carga_horaria = 0 OR eno.carga_horaria = 0)
                """, (estudante_id,))
            
            dados = cursor.fetchone()
            conn.close()
            
            if not dados:
                self.show_message("Erro", "Estudante n√£o encontrado ou est√°gio n√£o est√° completo (status 'Completo' ou carga hor√°ria zerada).")
                return False
            
            nome_aluno, empresa, carga_horaria, data_inicio, data_termino, orientador = dados
            
            # Criar nome do arquivo
            nome_arquivo = f"Certificado_{nome_aluno.replace(' ', '_')}_{tipo_estagio.title()}.pdf"
            caminho_certificado = os.path.join("certificados", nome_arquivo)
            
            # Criar PDF
            c = canvas.Canvas(caminho_certificado, pagesize=A4)
            width, height = A4
            
            # Configurar fonte (usar fonte padr√£o do sistema)
            try:
                # Tentar usar fonte Arial se dispon√≠vel
                c.setFont("Helvetica-Bold", 16)
            except:
                c.setFont("Helvetica-Bold", 16)
            
            # T√≠tulo do certificado
            titulo = "CERTIFICADO DE EST√ÅGIO"
            if tipo_estagio == 'obrigatorio':
                titulo += " OBRIGAT√ìRIO"
            else:
                titulo += " N√ÉO OBRIGAT√ìRIO"
            
            # Centralizar t√≠tulo
            c.setFont("Helvetica-Bold", 20)
            c.drawCentredString(width/2, height - 100, titulo)
            
            # Texto do certificado
            c.setFont("Helvetica", 12)
            
            # Par√°grafo principal
            texto_principal = f"""
Certificamos que {nome_aluno.upper()}, estudante do curso de Ci√™ncias Cont√°beis 
da Universidade Federal dos Vales do Jequitinhonha e Mucuri - UFVJM, 
realizou est√°gio {tipo_estagio.replace('_', ' ')} na empresa {empresa.upper()}, 
com carga hor√°ria total de {carga_horaria} horas, no per√≠odo de {data_inicio} a {data_termino}.
            """.strip()
            
            # Quebrar texto em linhas
            linhas = texto_principal.split('\n')
            y_pos = height - 200
            
            for linha in linhas:
                if linha.strip():
                    c.drawCentredString(width/2, y_pos, linha.strip())
                    y_pos -= 25
            
            # Informa√ß√µes adicionais
            y_pos -= 30
            c.setFont("Helvetica-Bold", 12)
            c.drawCentredString(width/2, y_pos, "Orientador:")
            y_pos -= 20
            c.setFont("Helvetica", 12)
            c.drawCentredString(width/2, y_pos, orientador)
            
            # Data e local
            y_pos -= 50
            from datetime import datetime
            data_atual = datetime.now().strftime("%d/%m/%Y")
            c.drawCentredString(width/2, y_pos, f"Diamantina, {data_atual}")
            
            # Assinaturas
            y_pos -= 80
            c.setFont("Helvetica-Bold", 10)
            c.drawCentredString(width/2 - 150, y_pos, "_________________________")
            c.drawCentredString(width/2 + 150, y_pos, "_________________________")
            y_pos -= 15
            c.drawCentredString(width/2 - 150, y_pos, "Orientador")
            c.drawCentredString(width/2 + 150, y_pos, "Coordenador do Curso")
            
            # Rodap√©
            y_pos -= 50
            c.setFont("Helvetica", 8)
            c.drawCentredString(width/2, y_pos, "Universidade Federal dos Vales do Jequitinhonha e Mucuri - UFVJM")
            c.drawCentredString(width/2, y_pos - 15, "Curso de Ci√™ncias Cont√°beis")
            c.drawCentredString(width/2, y_pos - 30, "Diamantina - MG")
            
            # Salvar PDF
            c.save()
            
            self.show_message("Sucesso", f"Certificado gerado com sucesso!\nArquivo: {nome_arquivo}")
            return True
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao gerar certificado: {str(e)}")
            return False
    
    def gerar_certificado_com_modelo(self, estudante_id, tipo_estagio):
        """Gera certificado usando o modelo PDF existente como base"""
        try:
            # Importar bibliotecas necess√°rias
            try:
                if not REPORTLAB_AVAILABLE:
                    raise ImportError("ReportLab n√£o dispon√≠vel")
                import io
            except ImportError:
                self.show_message("Erro", "Biblioteca ReportLab n√£o encontrada. Instale com: pip install reportlab")
                return False
            
            # Verificar se PyPDF2 est√° dispon√≠vel
            try:
                from PyPDF2 import PdfReader, PdfWriter
                pdf2_available = True
            except ImportError:
                pdf2_available = False
                self.show_message("Aviso", "PyPDF2 n√£o encontrado. Gerando certificado sem modelo base.")
            
            # Buscar dados do estudante e est√°gio
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            if tipo_estagio == 'obrigatorio':
                cursor.execute("""
                    SELECT e.nome, eo.empresa, eo.carga_horaria, eo.data_inicio, eo.data_termino,
                           o.nome as orientador_nome
                    FROM estagio_obrigatorio eo
                    JOIN estudantes e ON eo.estudante_id = e.id
                    JOIN orientadores o ON eo.orientador_id = o.id
                    WHERE eo.estudante_id = ? AND (eo.status = 'Completo' OR eo.carga_horaria = 0 OR eo.carga_horaria = 0)
                """, (estudante_id,))
            else:
                cursor.execute("""
                    SELECT e.nome, eno.empresa, eno.carga_horaria, eno.data_inicio, eno.data_termino,
                           o.nome as orientador_nome
                    FROM estagio_nao_obrigatorio eno
                    JOIN estudantes e ON eno.estudante_id = e.id
                    JOIN orientadores o ON eno.orientador_id = o.id
                    WHERE eno.estudante_id = ? AND (eno.status = 'Completo' OR eno.carga_horaria = 0 OR eno.carga_horaria = 0)
                """, (estudante_id,))
            
            dados = cursor.fetchone()
            conn.close()
            
            if not dados:
                self.show_message("Erro", "Estudante n√£o encontrado ou est√°gio n√£o est√° completo (status 'Completo' ou carga hor√°ria zerada).")
                return False
            
            nome_aluno, empresa, carga_horaria, data_inicio, data_termino, orientador = dados
            
            # Criar nome do arquivo
            nome_arquivo = f"Certificado_{nome_aluno.replace(' ', '_')}_{tipo_estagio.title()}.pdf"
            caminho_certificado = os.path.join("certificados", nome_arquivo)
            
            if pdf2_available:
                # Usar modelo PDF se PyPDF2 estiver dispon√≠vel
                modelo_path = "certificados/modelo.pdf"
                if os.path.exists(modelo_path):
                    # Ler o modelo PDF
                    reader = PdfReader(modelo_path)
                    writer = PdfWriter()
                    
                    # Adicionar p√°gina do modelo
                    page = reader.pages[0]
                    writer.add_page(page)
                    
                    # Criar overlay com os dados personalizados
                    packet = io.BytesIO()
                    can = canvas.Canvas(packet, pagesize=A4)
                    
                    # Configurar fonte
                    can.setFont("Helvetica-Bold", 14)
                    
                    # Posicionar dados no PDF (ajustar coordenadas conforme necess√°rio)
                    # Nome do aluno (ajustar posi√ß√£o conforme o modelo)
                    can.drawString(200, 400, nome_aluno.upper())
                    
                    # Empresa (ajustar posi√ß√£o conforme o modelo)
                    can.setFont("Helvetica", 12)
                    can.drawString(200, 350, empresa.upper())
                    
                    # Carga hor√°ria (ajustar posi√ß√£o conforme o modelo)
                    can.drawString(200, 300, f"{carga_horaria} horas")
                    
                    # Per√≠odo (ajustar posi√ß√£o conforme o modelo)
                    can.drawString(200, 250, f"{data_inicio} a {data_termino}")
                    
                    # Orientador (ajustar posi√ß√£o conforme o modelo)
                    can.drawString(200, 200, orientador)
                    
                    # Data atual
                    from datetime import datetime
                    data_atual = datetime.now().strftime("%d/%m/%Y")
                    can.drawString(200, 150, data_atual)
                    
                    can.save()
                    
                    # Mover para o in√≠cio do buffer
                    packet.seek(0)
                    new_pdf = PdfReader(packet)
                    
                    # Mesclar com a p√°gina do modelo
                    page.merge_page(new_pdf.pages[0])
                    
                    # Salvar PDF final
                    with open(caminho_certificado, "wb") as output_file:
                        writer.write(output_file)
                else:
                    # Se modelo n√£o existe, usar m√©todo alternativo
                    self.gerar_certificado_pdf(estudante_id, tipo_estagio)
                    return True
            else:
                # Usar m√©todo alternativo sem PyPDF2
                self.gerar_certificado_pdf(estudante_id, tipo_estagio)
                return True
            
            self.show_message("Sucesso", f"Certificado gerado com sucesso!\nArquivo: {nome_arquivo}")
            return True
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao gerar certificado: {str(e)}")
            return False
        
    def create_main_content(self):
        # Frame do conte√∫do principal
        self.content_frame = ctk.CTkFrame(
            self.main_frame,
            corner_radius=15,
            fg_color=self.cor_branco
        )
        self.content_frame.grid(row=0, column=1, sticky="nsew")
        
        # Header do conte√∫do
        self.create_content_header()
        
        # √Årea de conte√∫do din√¢mico
        self.create_dynamic_content()
        
    def create_content_header(self):
        # Frame do header do conte√∫do
        self.header_frame = ctk.CTkFrame(
            self.content_frame,
            fg_color=self.cor_primaria,
            corner_radius=15
        )
        self.header_frame.pack(fill="x", padx=10, pady=10)
        
        # T√≠tulo da p√°gina atual
        self.page_title = ctk.CTkLabel(
            self.header_frame,
            text="Dashboard",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_branco
        )
        self.page_title.pack(side="left", padx=20, pady=15)
        
        # Informa√ß√µes do usu√°rio (lado direito)
        user_info_frame = ctk.CTkFrame(
            self.header_frame,
            fg_color="transparent"
        )
        user_info_frame.pack(side="right", padx=20, pady=15)
        
        user_label = ctk.CTkLabel(
            user_info_frame,
            text="üë§ Administrador",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco
        )
        user_label.pack()
        
    def create_dynamic_content(self):
        # Frame para conte√∫do din√¢mico
        self.dynamic_frame = ctk.CTkFrame(
            self.content_frame,
            fg_color="transparent"
        )
        self.dynamic_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # Mostrar dashboard inicial
        self.show_dashboard()
        
    def show_dashboard(self):
        self.clear_content()
        self.page_title.configure(text="Dashboard")
        
        # Frame principal do dashboard
        main_dashboard_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_dashboard_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header com data/hora e informa√ß√µes do usu√°rio
        self.create_dashboard_header(main_dashboard_frame)
        
        # Mensagem de boas-vindas personalizada
        self.create_welcome_section(main_dashboard_frame)
        
        # Se√ß√£o de estat√≠sticas (se for administrador)
        if self.usuario_logado and self.usuario_logado.get('administrador', False):
            self.create_statistics_section(main_dashboard_frame)
        
        # Se√ß√£o de estat√≠sticas espec√≠ficas do professor
        elif self.usuario_logado and not self.usuario_logado.get('administrador', False):
            self.create_professor_statistics_section(main_dashboard_frame)
        
        # Informa√ß√µes da vers√£o e desenvolvedor
        self.create_version_section(main_dashboard_frame)
    
    def show_access_denied(self, menu_name):
        """Exibir mensagem de acesso negado para professores"""
        import tkinter.messagebox as msgbox
        
        usuario_nome = self.usuario_logado.get('nome', 'Usu√°rio') if self.usuario_logado else 'Usu√°rio'
        
        msgbox.showwarning(
            "Acesso Restrito",
            f"Ol√° {usuario_nome}!\n\n"
            f"O menu '{menu_name}' est√° dispon√≠vel apenas para administradores do sistema.\n\n"
            f"Seu perfil atual: Professor\n"
            f"Acesso permitido apenas a:\n"
            f"‚Ä¢ Dashboard\n"
            f"‚Ä¢ Est√°gio Obrigat√≥rio\n"
            f"‚Ä¢ Est√°gio N√£o Obrigat√≥rio\n"
            f"‚Ä¢ Relat√≥rios\n\n"
            f"Para acessar outras funcionalidades, entre em contato com um administrador."
        )
    
    def create_dashboard_header(self, parent):
        """Criar cabe√ßalho do dashboard com data/hora e informa√ß√µes do usu√°rio"""
        header_frame = ctk.CTkFrame(parent, fg_color="#e3f2fd", corner_radius=10)
        header_frame.pack(fill="x", pady=(10, 20), padx=10)
        
        # Frame para organizar data/hora e usu√°rio
        header_content = ctk.CTkFrame(header_frame, fg_color="transparent")
        header_content.pack(fill="x", padx=20, pady=15)
        
        # Data e hora do sistema (lado esquerdo)
        datetime_frame = ctk.CTkFrame(header_content, fg_color="transparent")
        datetime_frame.pack(side="left", fill="x", expand=True)
        
        # Criar labels de data/hora (apenas uma vez)
        self.create_datetime_labels(datetime_frame)
        
        # Informa√ß√µes do usu√°rio (lado direito)
        if self.usuario_logado:
            user_frame = ctk.CTkFrame(header_content, fg_color="transparent")
            user_frame.pack(side="right")
            
            # Nome do usu√°rio
            user_name = ctk.CTkLabel(
                user_frame,
                text=f"üë§ {self.usuario_logado['nome'] if self.usuario_logado else 'Usu√°rio'}",
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color=self.cor_primaria
            )
            user_name.pack(anchor="e")
            
            # Tipo de perfil com √≠cone din√¢mico
            perfil_icone = self.usuario_logado.get('perfil_icone', 'üë§')
            perfil_nome = self.usuario_logado.get('perfil_nome', 'Usu√°rio')
            user_profile = ctk.CTkLabel(
                user_frame,
                text=f"{perfil_icone} {perfil_nome}",
                font=ctk.CTkFont(size=12),
                text_color=self.cor_secundaria
            )
            user_profile.pack(anchor="e")
            
            # Departamento
            dept_label = ctk.CTkLabel(
                user_frame,
                text=f"üè¢ {self.usuario_logado.get('departamento', 'N/A')}",
                font=ctk.CTkFont(size=12),
                text_color=self.cor_texto
            )
            dept_label.pack(anchor="e")
    
    def create_datetime_labels(self, parent):
        """Criar labels de data e hora (chamado apenas uma vez)"""
        # Data atual
        self.date_label = ctk.CTkLabel(
            parent,
            text="üìÖ --/--/----",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_primaria
        )
        self.date_label.pack(anchor="w")
        
        # Hora atual
        self.time_label = ctk.CTkLabel(
            parent,
            text="üïê --:--:--",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_secundaria
        )
        self.time_label.pack(anchor="w")
        
        # Dia da semana
        self.day_label = ctk.CTkLabel(
            parent,
            text="üìÜ -------",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_texto
        )
        self.day_label.pack(anchor="w")
        
        # Inicializar timer como None
        self.datetime_timer_id = None
        
        # Iniciar atualiza√ß√£o ap√≥s um pequeno delay
        self.root.after(100, self.update_datetime_display)
    
    def update_datetime_display(self):
        """Atualizar apenas o texto dos labels existentes"""
        # Verificar se a aplica√ß√£o ainda est√° rodando
        if not getattr(self, 'app_running', False):
            return
            
        try:
            # Verificar se a janela principal ainda existe
            if not hasattr(self, 'root') or not self.root.winfo_exists():
                self.app_running = False
                return
                
            # Verificar se os labels existem e s√£o v√°lidos
            if not (hasattr(self, 'date_label') and hasattr(self, 'time_label') and hasattr(self, 'day_label')):
                return
                
            # Verificar se os widgets ainda existem no Tkinter
            try:
                if (self.date_label.winfo_exists() and 
                    self.time_label.winfo_exists() and 
                    self.day_label.winfo_exists()):
                    
                    now = datetime.now()
                    
                    # Atualizar textos
                    self.date_label.configure(text=f"üìÖ {now.strftime('%d/%m/%Y')}")
                    self.time_label.configure(text=f"üïê {now.strftime('%H:%M:%S')}")
                    
                    # Dia da semana
                    dias_semana = ['Segunda-feira', 'Ter√ßa-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'S√°bado', 'Domingo']
                    self.day_label.configure(text=f"üìÜ {dias_semana[now.weekday()]}")
                    
                    # Cancelar timer anterior se existir
                    if hasattr(self, 'datetime_timer_id') and self.datetime_timer_id:
                        try:
                            self.root.after_cancel(self.datetime_timer_id)
                            self.datetime_timer_id = None
                        except:
                            pass
                    
                    # Agendar pr√≥xima atualiza√ß√£o apenas se tudo estiver OK
                    if self.app_running and hasattr(self, 'root') and self.root.winfo_exists():
                        self.datetime_timer_id = self.root.after(1000, self.update_datetime_display)
            except:
                # Widget foi destru√≠do, parar atualiza√ß√µes
                self.app_running = False
                return
                
        except Exception:
            # Se houver qualquer erro, parar a atualiza√ß√£o
            self.app_running = False
            return
    
    def create_welcome_section(self, parent):
        """Criar se√ß√£o de boas-vindas personalizada"""
        welcome_frame = ctk.CTkFrame(parent, fg_color="#f8f9fa", corner_radius=15)
        welcome_frame.pack(fill="x", pady=(0, 20), padx=10)
        
        # Mensagem de boas-vindas personalizada
        if self.usuario_logado:
            nome_primeiro = self.usuario_logado['nome'] if self.usuario_logado else 'Usu√°rio'.split()[0]
            if self.usuario_logado.get('administrador', False):
                welcome_text = f"Bem-vindo, {nome_primeiro}!"
                subtitle_text = "Voc√™ tem acesso completo ao sistema como Administrador"
                icon = "üîß"
            else:
                welcome_text = f"Bem-vindo, Prof. {nome_primeiro}!"
                subtitle_text = "Gerencie seus est√°gios obrigat√≥rios e n√£o obrigat√≥rios"
                icon = "üë®‚Äçüè´"
        else:
            welcome_text = "Bem-vindo ao EstagioPro"
            subtitle_text = "Sistema de Controle de Est√°gio"
            icon = "üéì"
        
        # T√≠tulo de boas-vindas
        welcome_label = ctk.CTkLabel(
            welcome_frame,
            text=f"{icon} {welcome_text}",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        welcome_label.pack(pady=(25, 10))
        
        # Subt√≠tulo personalizado
        subtitle_label = ctk.CTkLabel(
            welcome_frame,
            text=subtitle_text,
            font=ctk.CTkFont(size=16),
            text_color=self.cor_secundaria
        )
        subtitle_label.pack(pady=(0, 15))
        
        # Curso
        course_label = ctk.CTkLabel(
            welcome_frame,
            text="üéì Curso de Ci√™ncias Cont√°beis - UFVJM",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_texto
        )
        course_label.pack(pady=(0, 25))
    
    def create_statistics_section(self, parent):
        """Criar se√ß√£o de estat√≠sticas (apenas para administradores)"""
        stats_frame = ctk.CTkFrame(parent, fg_color="#e8f5e8", corner_radius=15)
        stats_frame.pack(fill="x", pady=(0, 20), padx=10)
        
        # T√≠tulo da se√ß√£o
        stats_title = ctk.CTkLabel(
            stats_frame,
            text="üìä Estat√≠sticas do Sistema",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#2E7D32"
        )
        stats_title.pack(pady=(20, 15))
        
        # Grid de estat√≠sticas
        stats_grid = ctk.CTkFrame(stats_frame, fg_color="transparent")
        stats_grid.pack(pady=(0, 20), padx=20, fill="x")
        
        # Buscar estat√≠sticas do banco
        try:
            # Est√°gios obrigat√≥rios ativos
            self.cursor.execute("SELECT COUNT(*) FROM estagio_obrigatorio WHERE status = 'Ativo'")
            estagios_obrig = self.cursor.fetchone()[0]
            
            # Est√°gios n√£o obrigat√≥rios ativos
            self.cursor.execute("SELECT COUNT(*) FROM estagio_nao_obrigatorio WHERE status = 'Ativo'")
            estagios_nao_obrig = self.cursor.fetchone()[0]
            
            # Total de estudantes
            self.cursor.execute("SELECT COUNT(*) FROM estudantes WHERE status = 'Ativo'")
            total_estudantes = self.cursor.fetchone()[0]
            
            # Total de orientadores
            self.cursor.execute("SELECT COUNT(*) FROM orientadores WHERE status = 'Ativo'")
            total_orientadores = self.cursor.fetchone()[0]
            
            # Criar cards de estat√≠sticas
            stats_data = [
                ("üìã", "Est√°gios Obrigat√≥rios", estagios_obrig, self.cor_primaria),
                ("üìù", "Est√°gios N√£o Obrigat√≥rios", estagios_nao_obrig, self.cor_secundaria),
                ("üë•", "Estudantes Ativos", total_estudantes, "#e67e22"),
                ("üë®‚Äçüè´", "Orientadores", total_orientadores, "#27ae60")
            ]
            
            for i, (icon, label, value, color) in enumerate(stats_data):
                card = ctk.CTkFrame(stats_grid, fg_color=self.cor_branco, corner_radius=10)
                card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
                stats_grid.columnconfigure(i, weight=1)
                
                ctk.CTkLabel(card, text=icon, font=ctk.CTkFont(size=24)).pack(pady=(15, 5))
                ctk.CTkLabel(card, text=str(value), font=ctk.CTkFont(size=20, weight="bold"), text_color=color).pack()
                ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=12), text_color=self.cor_texto).pack(pady=(0, 15))
                
        except Exception as e:
            error_label = ctk.CTkLabel(
                stats_grid,
                text=f"Erro ao carregar estat√≠sticas: {str(e)}",
                font=ctk.CTkFont(size=12),
                text_color="#e74c3c"
            )
            error_label.pack()
    
    def create_professor_statistics_section(self, parent):
        """Criar se√ß√£o de estat√≠sticas espec√≠ficas do professor"""
        stats_frame = ctk.CTkFrame(parent, fg_color="#e8f5e8", corner_radius=15)
        stats_frame.pack(fill="x", pady=(0, 20), padx=10)
        
        # T√≠tulo da se√ß√£o
        stats_title = ctk.CTkLabel(
            stats_frame,
            text="üìä Minhas Estat√≠sticas",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#2E7D32"
        )
        stats_title.pack(pady=(20, 15))
        
        # Grid de estat√≠sticas
        stats_grid = ctk.CTkFrame(stats_frame, fg_color="transparent")
        stats_grid.pack(pady=(0, 20), padx=20, fill="x")
        
        # Buscar estat√≠sticas espec√≠ficas do professor
        try:
            professor_id = self.usuario_logado.get('id') if self.usuario_logado else 0 if self.usuario_logado else 0
            professor_nome = self.usuario_logado.get('nome', 'Professor') if self.usuario_logado else 'Professor'
            
            # Total de alunos sob responsabilidade
            total_alunos = self.get_total_alunos_professor(professor_id)
            
            # Alunos com est√°gio vencendo (pr√≥ximos 30 dias)
            alunos_vencendo = self.get_alunos_estagio_vencendo(professor_id)
            
            # Alunos em est√°gio obrigat√≥rio
            alunos_obrigatorio = self.get_alunos_estagio_obrigatorio(professor_id)
            
            # Alunos em est√°gio n√£o obrigat√≥rio
            alunos_nao_obrigatorio = self.get_alunos_estagio_nao_obrigatorio(professor_id)
            
            # Criar cards de estat√≠sticas
            stats_data = [
                ("üë•", "Total de Alunos", total_alunos, self.cor_primaria),
                ("‚ö†Ô∏è", "Est√°gios Vencendo", alunos_vencendo, "#e67e22"),
                ("üìã", "Est√°gio Obrigat√≥rio", alunos_obrigatorio, "#3498db"),
                ("üìù", "Est√°gio N√£o Obrigat√≥rio", alunos_nao_obrigatorio, "#9b59b6")
            ]
            
            for i, (icon, label, value, color) in enumerate(stats_data):
                card = ctk.CTkFrame(stats_grid, fg_color=self.cor_branco, corner_radius=10)
                card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
                stats_grid.columnconfigure(i, weight=1)
                
                ctk.CTkLabel(card, text=icon, font=ctk.CTkFont(size=24)).pack(pady=(15, 5))
                ctk.CTkLabel(card, text=str(value), font=ctk.CTkFont(size=20, weight="bold"), text_color=color).pack()
                ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=12), text_color=self.cor_texto).pack(pady=(0, 15))
            
            # Verificar se h√° est√°gios completos para habilitar certificados
            tem_estagios_completos = self.verificar_professor_tem_estagios_completos(professor_id)
            
            # Adicionar informa√ß√µes adicionais se houver alunos vencendo
            if alunos_vencendo > 0:
                alert_frame = ctk.CTkFrame(stats_frame, fg_color="#fff3cd", corner_radius=10)
                alert_frame.pack(fill="x", padx=20, pady=(0, 20))
                
                alert_label = ctk.CTkLabel(
                    alert_frame,
                    text=f"‚ö†Ô∏è Aten√ß√£o: Voc√™ tem {alunos_vencendo} aluno(s) com est√°gio vencendo em breve!",
                    font=ctk.CTkFont(size=14, weight="bold"),
                    text_color="#856404"
                )
                alert_label.pack(pady=15)
                
                btn_ver_detalhes = ctk.CTkButton(
                    alert_frame,
                    text="Ver Detalhes",
                    command=self.show_estagios_vencendo,
                    width=120,
                    height=30,
                    font=ctk.CTkFont(size=12, weight="bold"),
                    fg_color="#ffc107",
                    hover_color="#e0a800",
                    text_color="#000000"
                )
                btn_ver_detalhes.pack(pady=(0, 15))
            
            # Adicionar notifica√ß√£o sobre certificados habilitados
            if tem_estagios_completos:
                cert_frame = ctk.CTkFrame(stats_frame, fg_color="#d4edda", corner_radius=10)
                cert_frame.pack(fill="x", padx=20, pady=(0, 20))
                
                cert_label = ctk.CTkLabel(
                    cert_frame,
                    text="üèÜ Certificados Habilitados: Voc√™ tem alunos com est√°gios completos!",
                    font=ctk.CTkFont(size=14, weight="bold"),
                    text_color="#155724"
                )
                cert_label.pack(pady=15)
                
                cert_info_label = ctk.CTkLabel(
                    cert_frame,
                    text="O menu 'Certificados' foi habilitado automaticamente.\nAlunos com est√°gios completos (status 'Completo' ou carga hor√°ria zerada) podem ter certificados gerados.",
                    font=ctk.CTkFont(size=12),
                    text_color="#155724"
                )
                cert_info_label.pack(pady=(0, 15))
                
        except Exception as e:
            error_label = ctk.CTkLabel(
                stats_grid,
                text=f"Erro ao carregar estat√≠sticas: {str(e)}",
                font=ctk.CTkFont(size=12),
                text_color="#e74c3c"
            )
            error_label.pack()
    
    def get_total_alunos_professor(self, professor_id):
        """Busca total de alunos sob responsabilidade do professor"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Contar alunos em est√°gio obrigat√≥rio
            cursor.execute("""
                SELECT COUNT(DISTINCT eo.estudante_id) 
                FROM estagio_obrigatorio eo
                WHERE eo.orientador_id = ? AND eo.status = 'Ativo'
            """, (professor_id,))
            obrigatorio = cursor.fetchone()[0]
            
            # Contar alunos em est√°gio n√£o obrigat√≥rio
            cursor.execute("""
                SELECT COUNT(DISTINCT eno.estudante_id) 
                FROM estagio_nao_obrigatorio eno
                WHERE eno.orientador_id = ? AND eno.status = 'Ativo'
            """, (professor_id,))
            nao_obrigatorio = cursor.fetchone()[0]
            
            conn.close()
            return obrigatorio + nao_obrigatorio
            
        except Exception as e:
            print(f"Erro ao buscar total de alunos: {e}")
            return 0
    
    def get_alunos_estagio_vencendo(self, professor_id):
        """Busca alunos com est√°gio vencendo em 30 dias"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar est√°gios obrigat√≥rios vencendo
            cursor.execute("""
                SELECT COUNT(DISTINCT eo.estudante_id) 
                FROM estagio_obrigatorio eo
                WHERE eo.orientador_id = ? 
                AND eo.status = 'Ativo'
                AND eo.data_termino <= date('now', '+30 days')
                AND eo.data_termino >= date('now')
            """, (professor_id,))
            obrigatorio_vencendo = cursor.fetchone()[0]
            
            # Buscar est√°gios n√£o obrigat√≥rios vencendo
            cursor.execute("""
                SELECT COUNT(DISTINCT eno.estudante_id) 
                FROM estagio_nao_obrigatorio eno
                WHERE eno.orientador_id = ? 
                AND eno.status = 'Ativo'
                AND eno.data_termino <= date('now', '+30 days')
                AND eno.data_termino >= date('now')
            """, (professor_id,))
            nao_obrigatorio_vencendo = cursor.fetchone()[0]
            
            conn.close()
            return obrigatorio_vencendo + nao_obrigatorio_vencendo
            
        except Exception as e:
            print(f"Erro ao buscar est√°gios vencendo: {e}")
            return 0
    
    def get_alunos_estagio_obrigatorio(self, professor_id):
        """Busca total de alunos em est√°gio obrigat√≥rio"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT COUNT(DISTINCT eo.estudante_id) 
                FROM estagio_obrigatorio eo
                WHERE eo.orientador_id = ? AND eo.status = 'Ativo'
            """, (professor_id,))
            
            result = cursor.fetchone()[0]
            conn.close()
            return result
            
        except Exception as e:
            print(f"Erro ao buscar est√°gios obrigat√≥rios: {e}")
            return 0
    
    def get_alunos_estagio_nao_obrigatorio(self, professor_id):
        """Busca total de alunos em est√°gio n√£o obrigat√≥rio"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT COUNT(DISTINCT eno.estudante_id) 
                FROM estagio_nao_obrigatorio eno
                WHERE eno.orientador_id = ? AND eno.status = 'Ativo'
            """, (professor_id,))
            
            result = cursor.fetchone()[0]
            conn.close()
            return result
            
        except Exception as e:
            print(f"Erro ao buscar est√°gios n√£o obrigat√≥rios: {e}")
            return 0
    
    def show_estagios_vencendo(self):
        """Mostra detalhes dos est√°gios vencendo"""
        try:
            professor_id = self.usuario_logado.get('id') if self.usuario_logado else 0
            
            # Criar janela de detalhes
            dialog = ctk.CTkToplevel(self.root)
            dialog.title("Est√°gios Vencendo")
            dialog.geometry("800x600")
            dialog.transient(self.root)
            dialog.grab_set()
            
            # Centralizar janela
            dialog.update_idletasks()
            x = (dialog.winfo_screenwidth() // 2) - (800 // 2)
            y = (dialog.winfo_screenheight() // 2) - (600 // 2)
            dialog.geometry(f"800x600+{x}+{y}")
            
            # T√≠tulo
            title_label = ctk.CTkLabel(
                dialog,
                text="‚ö†Ô∏è Est√°gios Vencendo em 30 Dias",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="#e67e22"
            )
            title_label.pack(pady=20)
            
            # Frame para lista
            list_frame = ctk.CTkScrollableFrame(dialog)
            list_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar est√°gios obrigat√≥rios vencendo
            cursor.execute("""
                SELECT eo.id, e.nome, eo.empresa, eo.data_termino, eo.status
                FROM estagio_obrigatorio eo
                JOIN estudantes e ON eo.estudante_id = e.id
                WHERE eo.orientador_id = ? 
                AND eo.status = 'Ativo'
                AND eo.data_termino <= date('now', '+30 days')
                AND eo.data_termino >= date('now')
                ORDER BY eo.data_termino ASC
            """, (professor_id,))
            
            obrigatorios = cursor.fetchall()
            
            # Buscar est√°gios n√£o obrigat√≥rios vencendo
            cursor.execute("""
                SELECT eno.id, e.nome, eno.empresa, eno.data_termino, eno.status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes e ON eno.estudante_id = e.id
                WHERE eno.orientador_id = ? 
                AND eno.status = 'Ativo'
                AND eno.data_termino <= date('now', '+30 days')
                AND eno.data_termino >= date('now')
                ORDER BY eno.data_termino ASC
            """, (professor_id,))
            
            nao_obrigatorios = cursor.fetchall()
            conn.close()
            
            # Exibir est√°gios obrigat√≥rios
            if obrigatorios:
                tipo_label = ctk.CTkLabel(
                    list_frame,
                    text="üìã Est√°gios Obrigat√≥rios",
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#3498db"
                )
                tipo_label.pack(pady=(0, 10), anchor="w")
                
                for estagio in obrigatorios:
                    self.criar_card_estagio_vencendo(list_frame, estagio, "Obrigat√≥rio")
            
            # Exibir est√°gios n√£o obrigat√≥rios
            if nao_obrigatorios:
                if obrigatorios:  # Adicionar separador se houver ambos
                    separator = ctk.CTkFrame(list_frame, height=2, fg_color="#bdc3c7")
                    separator.pack(fill="x", pady=20)
                
                tipo_label = ctk.CTkLabel(
                    list_frame,
                    text="üìù Est√°gios N√£o Obrigat√≥rios",
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#9b59b6"
                )
                tipo_label.pack(pady=(0, 10), anchor="w")
                
                for estagio in nao_obrigatorios:
                    self.criar_card_estagio_vencendo(list_frame, estagio, "N√£o Obrigat√≥rio")
            
            # Se n√£o h√° est√°gios vencendo
            if not obrigatorios and not nao_obrigatorios:
                no_data_label = ctk.CTkLabel(
                    list_frame,
                    text="üéâ Nenhum est√°gio vencendo em 30 dias!",
                    font=ctk.CTkFont(size=16),
                    text_color="#27ae60"
                )
                no_data_label.pack(pady=50)
            
            # Bot√£o fechar
            btn_fechar = ctk.CTkButton(
                dialog,
                text="Fechar",
                command=dialog.destroy,
                width=100,
                height=35,
                font=ctk.CTkFont(size=14, weight="bold")
            )
            btn_fechar.pack(pady=20)
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao exibir est√°gios vencendo: {str(e)}")
    
    def criar_card_estagio_vencendo(self, parent, estagio, tipo):
        """Cria um card para est√°gio vencendo"""
        estagio_id, nome_aluno, empresa, data_termino, status = estagio
        
        # Calcular dias restantes
        from datetime import datetime, date
        try:
            data_termino_obj = datetime.strptime(data_termino, '%Y-%m-%d').date()
            hoje = date.today()
            dias_restantes = (data_termino_obj - hoje).days
        except:
            dias_restantes = "N/A"
        
        # Frame do card
        card_frame = ctk.CTkFrame(parent)
        card_frame.pack(fill="x", padx=10, pady=5)
        
        # Frame interno
        inner_frame = ctk.CTkFrame(card_frame)
        inner_frame.pack(fill="x", padx=15, pady=15)
        
        # Layout em grid
        # Nome do aluno
        nome_label = ctk.CTkLabel(
            inner_frame,
            text=f"üë§ {nome_aluno}",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        nome_label.grid(row=0, column=0, sticky="w", padx=(0, 20))
        
        # Tipo de est√°gio
        tipo_label = ctk.CTkLabel(
            inner_frame,
            text=f"üìã {tipo}",
            font=ctk.CTkFont(size=12),
            text_color="#7f8c8d"
        )
        tipo_label.grid(row=0, column=1, sticky="w")
        
        # Empresa
        empresa_label = ctk.CTkLabel(
            inner_frame,
            text=f"üè¢ {empresa}",
            font=ctk.CTkFont(size=12)
        )
        empresa_label.grid(row=1, column=0, sticky="w", padx=(0, 20), pady=(5, 0))
        
        # Data de t√©rmino
        data_label = ctk.CTkLabel(
            inner_frame,
            text=f"üìÖ T√©rmino: {data_termino}",
            font=ctk.CTkFont(size=12)
        )
        data_label.grid(row=1, column=1, sticky="w", pady=(5, 0))
        
        # Dias restantes
        if dias_restantes != "N/A":
            if dias_restantes <= 7:
                cor_dias = "#e74c3c"  # Vermelho para urgente
                texto_dias = f"üö® {dias_restantes} dias restantes"
            elif dias_restantes <= 15:
                cor_dias = "#f39c12"  # Laranja para aten√ß√£o
                texto_dias = f"‚ö†Ô∏è {dias_restantes} dias restantes"
            else:
                cor_dias = "#27ae60"  # Verde para normal
                texto_dias = f"‚úÖ {dias_restantes} dias restantes"
        else:
            cor_dias = "#7f8c8d"
            texto_dias = "üìÖ Data n√£o dispon√≠vel"
        
        dias_label = ctk.CTkLabel(
            inner_frame,
            text=texto_dias,
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=cor_dias
        )
        dias_label.grid(row=2, column=0, columnspan=2, sticky="w", pady=(5, 0))
    
    def verificar_professor_tem_estagios_completos(self, professor_id):
        """Verifica se o professor tem alunos com est√°gios completos (obrigat√≥rios ou n√£o obrigat√≥rios)"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Verificar est√°gios obrigat√≥rios completos
            # Crit√©rios: status = 'Completo' OU carga_horaria = 0 OU carga_horaria = 0
            cursor.execute("""
                SELECT COUNT(*) 
                FROM estagio_obrigatorio 
                WHERE orientador_id = ? AND (
                    status = 'Completo' OR 
                    carga_horaria = 0 OR 
                    carga_horaria = 0
                )
            """, (professor_id,))
            obrigatorios_completos = cursor.fetchone()[0]
            
            # Verificar est√°gios n√£o obrigat√≥rios completos
            # Crit√©rios: status = 'Completo' OU carga_horaria = 0 OU carga_horaria = 0
            cursor.execute("""
                SELECT COUNT(*) 
                FROM estagio_nao_obrigatorio 
                WHERE orientador_id = ? AND (
                    status = 'Completo' OR 
                    carga_horaria = 0 OR 
                    carga_horaria = 0
                )
            """, (professor_id,))
            nao_obrigatorios_completos = cursor.fetchone()[0]
            
            conn.close()
            
            # Retorna True se houver pelo menos um est√°gio completo (obrigat√≥rio ou n√£o obrigat√≥rio)
            total_completos = obrigatorios_completos + nao_obrigatorios_completos
            print(f"Professor {professor_id}: {obrigatorios_completos} obrigat√≥rios completos, {nao_obrigatorios_completos} n√£o obrigat√≥rios completos")
            return total_completos > 0
            
        except Exception as e:
            print(f"Erro ao verificar est√°gios completos: {e}")
            return False
    
    def create_version_section(self, parent):
        """Criar se√ß√£o de informa√ß√µes da vers√£o"""
        
        # Informa√ß√µes da vers√£o e desenvolvedor
        version_frame = ctk.CTkFrame(parent, fg_color="#f8f9fa", corner_radius=10)
        version_frame.pack(pady=(10, 20), padx=40, fill="x")
        
        version_label = ctk.CTkLabel(
            version_frame,
            text="üî¨ Vers√£o Beta",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#e67e22"
        )
        version_label.pack(pady=(15, 5))
        
        developer_label = ctk.CTkLabel(
            version_frame,
            text="Desenvolvido e criado por:",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_texto
        )
        developer_label.pack(pady=(0, 2))
        
        prof_label = ctk.CTkLabel(
            version_frame,
            text="Prof. Dr. Vasconcelos Reis Wakim",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_primaria
        )
        prof_label.pack(pady=(0, 5))
        
        contact_label = ctk.CTkLabel(
            version_frame,
            text="üìß vasconcelos.wakim@ufvjm.edu.br",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_secundaria
        )
        contact_label.pack(pady=(0, 15))
        
        name_label = ctk.CTkLabel(
            version_frame,
            text="Prof. Dr. Vasconcelos Reis Wakim",
            font=ctk.CTkFont(size=13, weight="bold"),
            text_color=self.cor_primaria
        )
        name_label.pack(pady=(0, 2))
        
        sipae_label = ctk.CTkLabel(
            version_frame,
            text="SIPAE 1717044 - Departamento de Ci√™ncias Cont√°beis da UFVJM",
            font=ctk.CTkFont(size=11),
            text_color="#6c757d"
        )
        sipae_label.pack(pady=(0, 15))
        
    def create_stats_cards(self, parent):
        # Frame para os cards
        cards_frame = ctk.CTkFrame(parent, fg_color="transparent")
        cards_frame.pack(fill="x", padx=20, pady=20)
        
        # Configurar grid para os cards (m√°ximo 6 colunas)
        cards_frame.grid_columnconfigure((0, 1, 2, 3, 4, 5), weight=1)
        
        # Buscar estat√≠sticas reais do banco de dados
        # Contar est√°gios obrigat√≥rios
        self.cursor.execute("SELECT COUNT(*) FROM estagio_obrigatorio")
        estagios_obrigatorios = self.cursor.fetchone()[0]
        
        # Contar est√°gios n√£o obrigat√≥rios
        self.cursor.execute("SELECT COUNT(*) FROM estagio_nao_obrigatorio")
        estagios_nao_obrigatorios = self.cursor.fetchone()[0]
        
        # Contar estudantes
        self.cursor.execute("SELECT COUNT(*) FROM estudantes")
        estudantes = self.cursor.fetchone()[0]
        
        # Contar empresas
        self.cursor.execute("SELECT COUNT(*) FROM empresas")
        empresas = self.cursor.fetchone()[0]
        
        # Contar alertas n√£o lidos
        self.cursor.execute("SELECT COUNT(*) FROM alertas WHERE lido = 0 AND status = 'ATIVO'")
        alertas_nao_lidos = self.cursor.fetchone()[0]
        
        stats = [
            ("üìã", "Est√°gios Obrigat√≥rios", str(estagios_obrigatorios), self.cor_primaria),
            ("üìù", "Est√°gios N√£o Obrigat√≥rios", str(estagios_nao_obrigatorios), self.cor_secundaria),
            ("üë•", "Estudantes", str(estudantes), self.cor_terciaria),
            ("üè¢", "Empresas", str(empresas), "#10b981")
        ]
        
        # Adicionar card de alertas se houver alertas n√£o lidos
        if alertas_nao_lidos > 0:
            stats.append(("üîî", "Alertas Pendentes", str(alertas_nao_lidos), "#e74c3c"))
        
        # Verificar est√°gios cr√≠ticos (vencendo em 7 dias ou j√° vencidos)
        from datetime import timedelta
        hoje = datetime.now().strftime("%Y-%m-%d")
        data_critica = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
        
        self.cursor.execute("""
            SELECT COUNT(*) 
            FROM estagio_obrigatorio eo
            WHERE eo.data_termino <= ? 
            AND eo.status != 'Conclu√≠do'
        """, (data_critica,))
        estagios_criticos = self.cursor.fetchone()[0]
        
        # Adicionar card de est√°gios cr√≠ticos se houver
        if estagios_criticos > 0:
            stats.append(("‚ö†Ô∏è", "Est√°gios Cr√≠ticos", str(estagios_criticos), "#ff6b35"))
        
        for i, (icon, title, value, color) in enumerate(stats):
            card = ctk.CTkFrame(
                cards_frame,
                corner_radius=15,
                fg_color=color
            )
            card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
            
            # √çcone
            icon_label = ctk.CTkLabel(
                card,
                text=icon,
                font=ctk.CTkFont(size=32)
            )
            icon_label.pack(pady=(20, 5))
            
            # Valor
            value_label = ctk.CTkLabel(
                card,
                text=value,
                font=ctk.CTkFont(size=36, weight="bold"),
                text_color=self.cor_branco
            )
            value_label.pack()
            
            # T√≠tulo
            title_label = ctk.CTkLabel(
                card,
                text=title,
                font=ctk.CTkFont(size=12),
                text_color=self.cor_branco
            )
            title_label.pack(pady=(0, 20))
        
        # Adicionar estat√≠sticas detalhadas
        self.create_detailed_stats(parent)
            
    def create_detailed_stats(self, parent):
        """Criar se√ß√£o de estat√≠sticas detalhadas"""
        # Frame para estat√≠sticas detalhadas
        detailed_frame = ctk.CTkFrame(parent, fg_color=self.cor_branco, corner_radius=15)
        detailed_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # T√≠tulo da se√ß√£o
        title_label = ctk.CTkLabel(
            detailed_frame,
            text="üìä Estat√≠sticas Detalhadas",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=(20, 15))
        
        # Frame para estat√≠sticas em duas colunas
        stats_container = ctk.CTkFrame(detailed_frame, fg_color="transparent")
        stats_container.pack(fill="x", padx=20, pady=(0, 20))
        stats_container.grid_columnconfigure((0, 1), weight=1)
        
        # Coluna esquerda
        left_frame = ctk.CTkFrame(stats_container, fg_color="#f1f5f9", corner_radius=10)
        left_frame.grid(row=0, column=0, padx=(0, 10), pady=10, sticky="nsew")
        
        # Coluna direita
        right_frame = ctk.CTkFrame(stats_container, fg_color="#f1f5f9", corner_radius=10)
        right_frame.grid(row=0, column=1, padx=(10, 0), pady=10, sticky="nsew")
        
        # Estat√≠sticas da coluna esquerda
        self.add_stat_item(left_frame, "üìã Est√°gios por Status", "")
        
        # Contar est√°gios obrigat√≥rios por status
        self.cursor.execute("SELECT status, COUNT(*) FROM estagio_obrigatorio GROUP BY status")
        status_obrigatorio = self.cursor.fetchall()
        
        for status, count in status_obrigatorio:
            status_text = "üîÑ Em Andamento" if status == "Em Andamento" else f"‚úÖ {status}"
            self.add_stat_detail(left_frame, f"  Obrigat√≥rios - {status_text}", str(count))
        
        # Contar est√°gios n√£o obrigat√≥rios por status
        self.cursor.execute("SELECT status, COUNT(*) FROM estagio_nao_obrigatorio GROUP BY status")
        status_nao_obrigatorio = self.cursor.fetchall()
        
        for status, count in status_nao_obrigatorio:
            status_text = "üîÑ Em Andamento" if status == "Em Andamento" else f"‚úÖ {status}"
            self.add_stat_detail(left_frame, f"  N√£o Obrigat√≥rios - {status_text}", str(count))
        
        # Estat√≠sticas da coluna direita
        self.add_stat_item(right_frame, "üìÑ Relat√≥rios Anexados", "")
        
        # Contar relat√≥rios anexados
        self.cursor.execute("SELECT COUNT(*) FROM relatorios_anexados")
        total_relatorios = self.cursor.fetchone()[0]
        self.add_stat_detail(right_frame, "  Total de Relat√≥rios", str(total_relatorios))
        
        # Contar relat√≥rios por tipo
        self.cursor.execute("""
            SELECT 
                CASE 
                    WHEN tipo_relatorio LIKE '%1¬∫%' THEN '1¬∫ Relat√≥rio Parcial'
                    WHEN tipo_relatorio LIKE '%2¬∫%' THEN '2¬∫ Relat√≥rio Parcial' 
                    WHEN tipo_relatorio LIKE '%3¬∫%' THEN '3¬∫ Relat√≥rio Parcial'
                    WHEN tipo_relatorio LIKE '%Final%' THEN 'Relat√≥rio Final'
                    ELSE 'Outros'
                END as tipo,
                COUNT(*) as quantidade
            FROM relatorios_anexados 
            GROUP BY 
                CASE 
                    WHEN tipo_relatorio LIKE '%1¬∫%' THEN '1¬∫ Relat√≥rio Parcial'
                    WHEN tipo_relatorio LIKE '%2¬∫%' THEN '2¬∫ Relat√≥rio Parcial'
                    WHEN tipo_relatorio LIKE '%3¬∫%' THEN '3¬∫ Relat√≥rio Parcial'
                    WHEN tipo_relatorio LIKE '%Final%' THEN 'Relat√≥rio Final'
                    ELSE 'Outros'
                END
            ORDER BY quantidade DESC
        """)
        relatorios_por_tipo = self.cursor.fetchall()
        
        for tipo, quantidade in relatorios_por_tipo:
            emoji = "üìù" if "Parcial" in tipo else "üìã" if "Final" in tipo else "üìÑ"
            self.add_stat_detail(right_frame, f"  {emoji} {tipo}", str(quantidade))
        
        # Estat√≠sticas de orientadores
        self.add_stat_item(right_frame, "üë®‚Äçüè´ Orientadores Ativos", "")
        
        # Contar orientadores com est√°gios
        self.cursor.execute("""
            SELECT COUNT(DISTINCT orientador_id) 
            FROM (
                SELECT orientador_id FROM estagio_obrigatorio
                UNION
                SELECT orientador_id FROM estagio_nao_obrigatorio
            )
        """)
        orientadores_ativos = self.cursor.fetchone()[0]
        self.add_stat_detail(right_frame, "  Com Est√°gios Ativos", str(orientadores_ativos))
        
        # Total de orientadores cadastrados
        self.cursor.execute("SELECT COUNT(*) FROM orientadores")
        total_orientadores = self.cursor.fetchone()[0]
        self.add_stat_detail(right_frame, "  Total Cadastrados", str(total_orientadores))
        
        # Estat√≠sticas de vencimento
        self.add_stat_item(right_frame, "‚è∞ Est√°gios em Vencimento", "")
        
        # Buscar configura√ß√£o de dias de aviso
        self.cursor.execute("SELECT valor FROM configuracoes WHERE chave = 'dias_aviso_termino'")
        dias_aviso_result = self.cursor.fetchone()
        dias_aviso = int(dias_aviso_result[0]) if dias_aviso_result else 30
        
        # Calcular data limite
        from datetime import timedelta
        data_limite = (datetime.now() + timedelta(days=dias_aviso)).strftime("%Y-%m-%d")
        
        # Contar est√°gios pr√≥ximos do vencimento
        self.cursor.execute("""
            SELECT COUNT(*) 
            FROM estagio_obrigatorio eo
            WHERE eo.data_termino <= ? 
            AND eo.status != 'Conclu√≠do'
        """, (data_limite,))
        estagios_vencendo = self.cursor.fetchone()[0]
        self.add_stat_detail(right_frame, f"  Pr√≥ximos ({dias_aviso} dias)", str(estagios_vencendo))
        
        # Contar est√°gios j√° vencidos
        hoje = datetime.now().strftime("%Y-%m-%d")
        self.cursor.execute("""
            SELECT COUNT(*) 
            FROM estagio_obrigatorio eo
            WHERE eo.data_termino < ? 
            AND eo.status != 'Conclu√≠do'
        """, (hoje,))
        estagios_vencidos = self.cursor.fetchone()[0]
        self.add_stat_detail(right_frame, "  ‚ö†Ô∏è J√° Vencidos", str(estagios_vencidos))
        
        # Contar est√°gios vencendo em 7 dias (cr√≠tico)
        data_critica = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
        self.cursor.execute("""
            SELECT COUNT(*) 
            FROM estagio_obrigatorio eo
            WHERE eo.data_termino <= ? 
            AND eo.data_termino >= ?
            AND eo.status != 'Conclu√≠do'
        """, (data_critica, hoje))
        estagios_criticos = self.cursor.fetchone()[0]
        self.add_stat_detail(right_frame, "  üö® Cr√≠ticos (7 dias)", str(estagios_criticos))
    
    def add_stat_item(self, parent, title, value):
        """Adicionar item de estat√≠stica"""
        item_frame = ctk.CTkFrame(parent, fg_color="transparent")
        item_frame.pack(fill="x", padx=15, pady=(10, 5))
        
        title_label = ctk.CTkLabel(
            item_frame,
            text=title,
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_primaria,
            anchor="w"
        )
        title_label.pack(side="left")
        
        if value:
            value_label = ctk.CTkLabel(
                item_frame,
                text=value,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_secundaria,
                anchor="e"
            )
            value_label.pack(side="right")
    
    def add_stat_detail(self, parent, title, value):
        """Adicionar detalhe de estat√≠stica"""
        detail_frame = ctk.CTkFrame(parent, fg_color="transparent")
        detail_frame.pack(fill="x", padx=15, pady=2)
        
        title_label = ctk.CTkLabel(
            detail_frame,
            text=title,
            font=ctk.CTkFont(size=12),
            text_color=self.cor_texto,
            anchor="w"
        )
        title_label.pack(side="left")
        
        value_label = ctk.CTkLabel(
            detail_frame,
            text=value,
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_secundaria,
            anchor="e"
        )
        value_label.pack(side="right")
            
    def show_estagio_obrigatorio(self):
        """Mostrar tela de est√°gio obrigat√≥rio"""
        self.clear_content()
        self.page_title.configure(text="Gest√£o de Est√°gio Obrigat√≥rio")
        
        # Frame principal do est√°gio obrigat√≥rio
        estagio_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        estagio_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Criar bot√µes de a√ß√£o
        self.create_estagio_obrigatorio_buttons(estagio_frame)
        
        # Criar tabela
        self.create_estagio_obrigatorio_table(estagio_frame)
        
        # Carregar dados
        self.carregar_estagio_obrigatorio()
        
    def show_estagio_nao_obrigatorio(self):
        """Mostrar tela de est√°gio n√£o obrigat√≥rio"""
        self.clear_content()
        self.page_title.configure(text="Gest√£o de Est√°gio N√£o Obrigat√≥rio")
        
        # Frame principal do est√°gio n√£o obrigat√≥rio
        estagio_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        estagio_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Criar bot√µes de a√ß√£o
        self.create_estagio_nao_obrigatorio_buttons(estagio_frame)
        
        # Criar tabela
        self.create_estagio_nao_obrigatorio_table(estagio_frame)
        
        # Instru√ß√µes para o usu√°rio
        instrucoes_frame = ctk.CTkFrame(estagio_frame, fg_color="#E8F5E8", corner_radius=8)
        instrucoes_frame.pack(fill="x", padx=20, pady=(0, 10))
        
        instrucoes_label = ctk.CTkLabel(
            instrucoes_frame,
            text="üí° Como abrir detalhes: üîç Bot√£o 'Ver Detalhes' ‚Ä¢ üñ±Ô∏è Duplo clique na linha ‚Ä¢ ‚å®Ô∏è Enter ou F2 ‚Ä¢ üñ±Ô∏è Clique direito ‚Üí Ver Detalhes",
            font=ctk.CTkFont(size=12),
            text_color="#2E7D32"
        )
        instrucoes_label.pack(pady=8)
        
        # Carregar dados
        self.carregar_estagio_nao_obrigatorio()
        
    def show_estudantes(self):
        self.clear_content()
        self.page_title.configure(text="Gest√£o de Estudantes")
        
        # Frame principal dos estudantes
        estudantes_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        estudantes_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Frame superior com bot√µes de a√ß√£o
        self.create_estudantes_buttons(estudantes_frame)
        
        # Frame da tabela
        self.create_estudantes_table(estudantes_frame)
        
    def show_empresas(self):
        self.clear_content()
        self.page_title.configure(text="Gest√£o de Empresas")
        
        # Frame principal das empresas
        empresas_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        empresas_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Frame superior com bot√µes de a√ß√£o
        self.create_empresas_buttons(empresas_frame)
        
        # Frame da tabela
        self.create_empresas_table(empresas_frame)
        
    def show_orientadores(self):
        self.clear_content()
        self.page_title.configure(text="Gest√£o de Orientadores")
        
        # Frame principal dos orientadores
        orientadores_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        orientadores_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Frame superior com bot√µes de a√ß√£o
        self.create_orientadores_buttons(orientadores_frame)
        
        # Frame da tabela
        self.create_orientadores_table(orientadores_frame)
    
    def show_usuarios(self):
        """Mostrar tela de gerenciamento de usu√°rios do sistema"""
        self.clear_content()
        self.page_title.configure(text="Gerenciamento de Usu√°rios")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üë§ Usu√°rios do Sistema",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(side="left")
        
        # Verificar pend√™ncias de autoriza√ß√£o (s√≥ para administradores)
        if self.usuario_logado and self.usuario_logado.get('administrador', False):
            self.check_pending_authorizations(header_frame)
        
        # Bot√µes de a√ß√£o
        buttons_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        buttons_frame.pack(side="right")
        
        # Bot√£o Novo Usu√°rio
        btn_novo = ctk.CTkButton(
            buttons_frame,
            text="‚ûï Novo Usu√°rio",
            width=140,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_hover,
            command=self.abrir_janela_novo_usuario
        )
        btn_novo.pack(side="left", padx=(0, 10))
        
        # Bot√£o Atualizar
        btn_atualizar = ctk.CTkButton(
            buttons_frame,
            text="üîÑ Atualizar",
            width=100,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_secundaria,
            hover_color="#45A049",
            command=self.carregar_usuarios
        )
        btn_atualizar.pack(side="left")
        
        # Frame de busca
        search_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        search_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        search_label = ctk.CTkLabel(search_frame, text="üîç Buscar:", font=ctk.CTkFont(size=12, weight="bold"))
        search_label.pack(side="left", padx=(0, 10))
        
        self.search_usuarios_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text="Digite o nome, email ou departamento...",
            width=300,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.search_usuarios_entry.pack(side="left", padx=(0, 10))
        
        btn_search = ctk.CTkButton(
            search_frame,
            text="Buscar",
            width=100,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_hover,
            command=self.buscar_usuarios
        )
        btn_search.pack(side="left")
        
        # Criar tabela de usu√°rios
        self.create_usuarios_table(main_frame)
        
        # Carregar dados iniciais
        self.carregar_usuarios()
    
    def create_usuarios_table(self, parent):
        """Criar tabela de usu√°rios"""
        # Frame para a tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Criar Treeview
        columns = ('ID', 'Nome', 'SIAPE', 'Email', 'Departamento', 'Curso', 'Telefone', 'Perfil', 'Status', 'A√ß√£o')
        self.tree_usuarios = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_usuarios.heading('ID', text='ID')
        self.tree_usuarios.heading('Nome', text='Nome')
        self.tree_usuarios.heading('SIAPE', text='SIAPE')
        self.tree_usuarios.heading('Email', text='Email')
        self.tree_usuarios.heading('Departamento', text='Departamento')
        self.tree_usuarios.heading('Curso', text='Curso')
        self.tree_usuarios.heading('Telefone', text='Telefone')
        self.tree_usuarios.heading('Perfil', text='Perfil')
        self.tree_usuarios.heading('Status', text='Status')
        self.tree_usuarios.heading('A√ß√£o', text='A√ß√£o')
        
        # Configurar larguras das colunas
        self.tree_usuarios.column('ID', width=50, anchor='center')
        self.tree_usuarios.column('Nome', width=200, anchor='w')
        self.tree_usuarios.column('SIAPE', width=100, anchor='center')
        self.tree_usuarios.column('Email', width=200, anchor='w')
        self.tree_usuarios.column('Departamento', width=120, anchor='center')
        self.tree_usuarios.column('Curso', width=150, anchor='w')
        self.tree_usuarios.column('Telefone', width=120, anchor='center')
        self.tree_usuarios.column('Perfil', width=100, anchor='center')
        self.tree_usuarios.column('Status', width=80, anchor='center')
        self.tree_usuarios.column('A√ß√£o', width=120, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_usuarios.yview)
        self.tree_usuarios.configure(yscrollcommand=scrollbar.set)
        
        # Posicionar tabela e scrollbar
        self.tree_usuarios.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind duplo clique para editar
        self.tree_usuarios.bind('<Double-1>', self.on_double_click_usuario)
    
    def carregar_usuarios(self):
        """Carregar usu√°rios na tabela"""
        # Limpar tabela
        for item in self.tree_usuarios.get_children():
            self.tree_usuarios.delete(item)
        
        try:
            # Buscar usu√°rios no banco
            self.cursor.execute("""
                SELECT id, nome, siape, email_institucional, departamento, curso, telefone, administrador, status
                FROM orientadores 
                ORDER BY nome
            """)
            usuarios = self.cursor.fetchall()
            
            # Inserir dados na tabela
            for usuario in usuarios:
                perfil = "üë®‚Äçüíº Admin" if usuario[7] == 1 else "üë®‚Äçüè´ Professor"
                status_icon = "‚úÖ" if usuario[8] == "Ativo" else "‚ùå"
                
                valores = usuario[:7] + (perfil, f"{status_icon} {usuario[8]}", "üîß Editar")
                self.tree_usuarios.insert('', 'end', values=valores)
                
        except Exception as e:
            self.show_message("Erro", f"Erro ao carregar usu√°rios: {str(e)}")
    
    def buscar_usuarios(self):
        """Buscar usu√°rios"""
        termo = self.search_usuarios_entry.get().strip()
        
        if not termo:
            self.carregar_usuarios()
            return
        
        # Limpar tabela
        for item in self.tree_usuarios.get_children():
            self.tree_usuarios.delete(item)
        
        try:
            # Buscar no banco
            self.cursor.execute("""
                SELECT id, nome, siape, email_institucional, departamento, curso, telefone, administrador, status
                FROM orientadores 
                WHERE nome LIKE ? OR email_institucional LIKE ? OR departamento LIKE ? OR siape LIKE ?
                ORDER BY nome
            """, (f'%{termo}%', f'%{termo}%', f'%{termo}%', f'%{termo}%'))
            
            usuarios = self.cursor.fetchall()
            
            # Inserir resultados na tabela
            for usuario in usuarios:
                perfil = "üë®‚Äçüíº Admin" if usuario[7] == 1 else "üë®‚Äçüè´ Professor"
                status_icon = "‚úÖ" if usuario[8] == "Ativo" else "‚ùå"
                
                valores = usuario[:7] + (perfil, f"{status_icon} {usuario[8]}", "üîß Editar")
                self.tree_usuarios.insert('', 'end', values=valores)
                
        except Exception as e:
            self.show_message("Erro", f"Erro ao buscar usu√°rios: {str(e)}")
    
    def on_double_click_usuario(self, event):
        """Lidar com duplo clique na tabela de usu√°rios"""
        selected = self.tree_usuarios.selection()
        if not selected:
            return
        
        item = self.tree_usuarios.item(selected[0])
        values = item['values']
        usuario_id = values[0]
        
        # Abrir janela de edi√ß√£o
        self.abrir_janela_editar_usuario(usuario_id)
    
    def check_pending_authorizations(self, parent_frame):
        """Verificar e mostrar usu√°rios pendentes de autoriza√ß√£o"""
        try:
            self.cursor.execute("""
                SELECT COUNT(*) FROM orientadores 
                WHERE COALESCE(autorizado, 0) = 0 AND administrador = 0
            """)
            pendentes = self.cursor.fetchone()[0]
            
            if pendentes > 0:
                # Frame de alerta
                alert_frame = ctk.CTkFrame(parent_frame, fg_color="#fef3c7", corner_radius=8)
                alert_frame.pack(side="right", padx=(10, 0))
                
                # Bot√£o de aprova√ß√£o
                approve_button = ctk.CTkButton(
                    alert_frame,
                    text=f"üîÑ {pendentes} Pendente(s)",
                    command=self.show_pending_approvals,
                    font=ctk.CTkFont(size=12, weight="bold"),
                    fg_color="#f59e0b",
                    hover_color="#d97706",
                    width=150,
                    height=35
                )
                approve_button.pack(padx=10, pady=8)
                
        except Exception as e:
            print(f"Erro ao verificar pend√™ncias: {e}")
    
    def show_pending_approvals(self):
        """Mostrar janela de aprova√ß√µes pendentes"""
        # Criar janela modal
        approval_window = ctk.CTkToplevel(self.root)
        approval_window.title("üîÑ Aprova√ß√µes Pendentes")
        approval_window.geometry("800x600")
        approval_window.transient(self.root)
        approval_window.grab_set()
        
        # Centralizar janela
        approval_window.update_idletasks()
        x = (approval_window.winfo_screenwidth() // 2) - (800 // 2)
        y = (approval_window.winfo_screenheight() // 2) - (600 // 2)
        approval_window.geometry(f"800x600+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(approval_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üîÑ Usu√°rios Pendentes de Autoriza√ß√£o",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(20, 30))
        
        # Frame da tabela
        table_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Criar tabela
        columns = ("ID", "Nome", "Email", "Departamento", "Data Cadastro", "A√ß√µes")
        tree_pending = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # Configurar colunas
        for col in columns:
            tree_pending.heading(col, text=col)
            if col == "ID":
                tree_pending.column(col, width=50)
            elif col == "Nome":
                tree_pending.column(col, width=200)
            elif col == "Email":
                tree_pending.column(col, width=180)
            elif col == "A√ß√µes":
                tree_pending.column(col, width=150)
            else:
                tree_pending.column(col, width=120)
        
        # Scrollbar
        scrollbar_pending = ttk.Scrollbar(table_frame, orient="vertical", command=tree_pending.yview)
        tree_pending.configure(yscrollcommand=scrollbar_pending.set)
        
        tree_pending.pack(side="left", fill="both", expand=True)
        scrollbar_pending.pack(side="right", fill="y")
        
        # Carregar dados pendentes
        self.load_pending_users(tree_pending)
        
        # Frame de bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=20)
        
        # Fun√ß√£o para aprovar usu√°rio
        def approve_user():
            selected = tree_pending.selection()
            if not selected:
                messagebox.showwarning("Aviso", "Selecione um usu√°rio para aprovar.")
                return
            
            item = tree_pending.item(selected[0])
            user_id = item['values'][0]
            user_name = item['values'][1]
            
            result = messagebox.askyesno(
                "Confirmar Aprova√ß√£o", 
                f"Deseja aprovar o acesso de:\n{user_name}?"
            )
            
            if result:
                self.approve_user_access(user_id, approval_window, tree_pending)
        
        # Fun√ß√£o para negar usu√°rio
        def deny_user():
            selected = tree_pending.selection()
            if not selected:
                messagebox.showwarning("Aviso", "Selecione um usu√°rio para negar.")
                return
            
            item = tree_pending.item(selected[0])
            user_id = item['values'][0]
            user_name = item['values'][1]
            
            result = messagebox.askyesno(
                "Confirmar Nega√ß√£o", 
                f"Deseja negar o acesso de:\n{user_name}?"
            )
            
            if result:
                self.deny_user_access(user_id, approval_window, tree_pending)
        
        # Bot√µes
        approve_button = ctk.CTkButton(
            buttons_frame,
            text="‚úÖ Aprovar Selecionado",
            command=approve_user,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_sucesso,
            hover_color="#059669",
            width=180
        )
        approve_button.pack(side="left", padx=(0, 10))
        
        deny_button = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Negar Selecionado",
            command=deny_user,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_erro,
            hover_color="#dc2626",
            width=180
        )
        deny_button.pack(side="left", padx=10)
        
        close_button = ctk.CTkButton(
            buttons_frame,
            text="üö™ Fechar",
            command=approval_window.destroy,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_secundaria,
            hover_color="#e2e8f0",
            text_color=self.cor_texto,
            width=120
        )
        close_button.pack(side="right")
    
    def load_pending_users(self, tree):
        """Carregar usu√°rios pendentes na tabela"""
        try:
            self.cursor.execute("""
                SELECT id, nome, email_institucional, departamento, data_cadastro
                FROM orientadores 
                WHERE COALESCE(autorizado, 0) = 0 AND administrador = 0
                ORDER BY data_cadastro DESC
            """)
            pending_users = self.cursor.fetchall()
            
            for user in pending_users:
                # Formatar data
                data_cadastro = user[4] if user[4] else "N/A"
                if data_cadastro != "N/A":
                    try:
                        from datetime import datetime
                        dt = datetime.strptime(data_cadastro, '%Y-%m-%d %H:%M:%S')
                        data_cadastro = dt.strftime('%d/%m/%Y %H:%M')
                    except:
                        pass
                
                values = user[:4] + (data_cadastro, "‚è≥ Pendente")
                tree.insert('', 'end', values=values)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar usu√°rios pendentes: {str(e)}")
    
    def approve_user_access(self, user_id, window, tree):
        """Aprovar acesso do usu√°rio"""
        try:
            from datetime import datetime
            
            self.cursor.execute("""
                UPDATE orientadores 
                SET autorizado = 1,
                    data_autorizacao = ?,
                    autorizado_por = ?,
                    observacoes_autorizacao = 'Aprovado pelo administrador'
                WHERE id = ?
            """, (
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                self.usuario_logado['nome'] if self.usuario_logado else 'Usu√°rio',
                user_id
            ))
            
            self.conn.commit()
            
            messagebox.showinfo("Sucesso", "Usu√°rio aprovado com sucesso!")
            
            # Recarregar tabela
            self.load_pending_users(tree)
            
            # Atualizar tabela principal se existir
            if hasattr(self, 'tree_usuarios'):
                self.carregar_usuarios()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao aprovar usu√°rio: {str(e)}")
    
    def deny_user_access(self, user_id, window, tree):
        """Negar acesso do usu√°rio"""
        try:
            from datetime import datetime
            
            # Solicitar motivo da nega√ß√£o
            motivo = simpledialog.askstring(
                "Motivo da Nega√ß√£o",
                "Digite o motivo da nega√ß√£o do acesso:",
                parent=window
            )
            
            if motivo is None:  # Usu√°rio cancelou
                return
            
            self.cursor.execute("""
                UPDATE orientadores 
                SET autorizado = 2,
                    data_autorizacao = ?,
                    autorizado_por = ?,
                    observacoes_autorizacao = ?
                WHERE id = ?
            """, (
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                self.usuario_logado['nome'] if self.usuario_logado else 'Usu√°rio',
                f"Negado: {motivo}",
                user_id
            ))
            
            self.conn.commit()
            
            messagebox.showinfo("Sucesso", "Acesso negado com sucesso!")
            
            # Recarregar tabela
            self.load_pending_users(tree)
            
            # Atualizar tabela principal se existir
            if hasattr(self, 'tree_usuarios'):
                self.carregar_usuarios()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao negar usu√°rio: {str(e)}")
    
    def show_approval_center(self):
        """Mostrar central de aprova√ß√£o de cadastros"""
        self.clear_content()
        self.page_title.configure(text="Central de Aprova√ß√£o de Cadastros")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üîÑ Central de Aprova√ß√£o de Cadastros",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(side="left")
        
        # Verificar quantos usu√°rios pendentes
        try:
            self.cursor.execute("""
                SELECT COUNT(*) FROM orientadores 
                WHERE COALESCE(autorizado, 0) = 0 AND administrador = 0
            """)
            pendentes = self.cursor.fetchone()[0]
        except:
            pendentes = 0
        
        # Info sobre pendentes
        info_frame = ctk.CTkFrame(main_frame, fg_color="#e0f2fe", corner_radius=15)
        info_frame.pack(fill="x", padx=20, pady=10)
        
        if pendentes > 0:
            info_text = f"üìã H√° {pendentes} usu√°rio(s) aguardando aprova√ß√£o para acessar o sistema"
            info_color = "#f59e0b"
        else:
            info_text = "‚úÖ Todos os usu√°rios est√£o aprovados! Nenhuma a√ß√£o necess√°ria."
            info_color = "#10b981"
        
        info_label = ctk.CTkLabel(
            info_frame,
            text=info_text,
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=info_color
        )
        info_label.pack(pady=20)
        
        if pendentes > 0:
            # Bot√µes de a√ß√£o r√°pida
            actions_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            actions_frame.pack(fill="x", padx=20, pady=20)
            
            # Bot√£o para aprovar todos
            approve_all_button = ctk.CTkButton(
                actions_frame,
                text=f"‚úÖ Aprovar Todos ({pendentes})",
                command=self.approve_all_pending,
                font=ctk.CTkFont(size=16, weight="bold"),
                fg_color=self.cor_sucesso,
                hover_color="#059669",
                width=200,
                height=50
            )
            approve_all_button.pack(side="left", padx=(0, 20))
            
            # Bot√£o para aprova√ß√£o individual
            individual_button = ctk.CTkButton(
                actions_frame,
                text="üìã Aprova√ß√£o Individual",
                command=self.show_pending_approvals,
                font=ctk.CTkFont(size=16, weight="bold"),
                fg_color=self.cor_primaria,
                hover_color=self.cor_hover,
                width=200,
                height=50
            )
            individual_button.pack(side="left")
        
        # Tabela de usu√°rios pendentes
        if pendentes > 0:
            table_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            table_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo da tabela
            table_title = ctk.CTkLabel(
                table_frame,
                text="üë• Usu√°rios Pendentes de Aprova√ß√£o",
                font=ctk.CTkFont(size=20, weight="bold"),
                text_color=self.cor_primaria
            )
            table_title.pack(pady=(0, 15))
            
            # Criar tabela
            columns = ("Nome", "Email", "Departamento", "Data Cadastro")
            self.tree_approval = ttk.Treeview(table_frame, columns=columns, show="headings", height=8)
            
            # Configurar colunas
            for col in columns:
                self.tree_approval.heading(col, text=col)
                if col == "Nome":
                    self.tree_approval.column(col, width=250)
                elif col == "Email":
                    self.tree_approval.column(col, width=200)
                elif col == "Departamento":
                    self.tree_approval.column(col, width=150)
                else:
                    self.tree_approval.column(col, width=150)
            
            # Scrollbar
            scrollbar_approval = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_approval.yview)
            self.tree_approval.configure(yscrollcommand=scrollbar_approval.set)
            
            self.tree_approval.pack(side="left", fill="both", expand=True)
            scrollbar_approval.pack(side="right", fill="y")
            
            # Carregar dados pendentes
            self.load_approval_data()
        
        # Estat√≠sticas
        stats_frame = ctk.CTkFrame(main_frame, fg_color="#f8fafc", corner_radius=15)
        stats_frame.pack(fill="x", padx=20, pady=20)
        
        stats_title = ctk.CTkLabel(
            stats_frame,
            text="üìä Estat√≠sticas de Usu√°rios",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_primaria
        )
        stats_title.pack(pady=(15, 10))
        
        # Buscar estat√≠sticas
        try:
            self.cursor.execute("SELECT COUNT(*) FROM orientadores WHERE COALESCE(autorizado, 0) = 1")
            aprovados = self.cursor.fetchone()[0]
            
            self.cursor.execute("SELECT COUNT(*) FROM orientadores WHERE COALESCE(autorizado, 0) = 2")
            negados = self.cursor.fetchone()[0]
            
            self.cursor.execute("SELECT COUNT(*) FROM orientadores WHERE administrador = 1")
            admins = self.cursor.fetchone()[0]
            
            stats_text = f"‚úÖ Aprovados: {aprovados}  |  üîÑ Pendentes: {pendentes}  |  ‚ùå Negados: {negados}  |  üë®‚Äçüíº Admins: {admins}"
        except:
            stats_text = "Erro ao carregar estat√≠sticas"
        
        stats_label = ctk.CTkLabel(
            stats_frame,
            text=stats_text,
            font=ctk.CTkFont(size=14),
            text_color=self.cor_texto
        )
        stats_label.pack(pady=(0, 15))
    
    def load_approval_data(self):
        """Carregar dados dos usu√°rios pendentes na tabela"""
        # Limpar tabela
        for item in self.tree_approval.get_children():
            self.tree_approval.delete(item)
        
        try:
            self.cursor.execute("""
                SELECT nome, email_institucional, departamento, data_cadastro
                FROM orientadores 
                WHERE COALESCE(autorizado, 0) = 0 AND administrador = 0
                ORDER BY data_cadastro DESC
            """)
            pending_users = self.cursor.fetchall()
            
            for user in pending_users:
                # Formatar data
                data_cadastro = user[3] if user[3] else "N/A"
                if data_cadastro != "N/A":
                    try:
                        from datetime import datetime
                        dt = datetime.strptime(data_cadastro, '%Y-%m-%d %H:%M:%S')
                        data_cadastro = dt.strftime('%d/%m/%Y %H:%M')
                    except:
                        pass
                
                values = user[:3] + (data_cadastro,)
                self.tree_approval.insert('', 'end', values=values)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar dados: {str(e)}")
    
    def approve_all_pending(self):
        """Aprovar todos os usu√°rios pendentes"""
        try:
            # Verificar quantos usu√°rios pendentes
            self.cursor.execute("""
                SELECT COUNT(*) FROM orientadores 
                WHERE COALESCE(autorizado, 0) = 0 AND administrador = 0
            """)
            pendentes = self.cursor.fetchone()[0]
            
            if pendentes == 0:
                messagebox.showinfo("Info", "N√£o h√° usu√°rios pendentes para aprovar.")
                return
            
            # Confirmar a√ß√£o
            result = messagebox.askyesno(
                "Confirmar Aprova√ß√£o em Massa",
                f"Deseja aprovar TODOS os {pendentes} usu√°rios pendentes?\n\nEsta a√ß√£o n√£o pode ser desfeita."
            )
            
            if result:
                from datetime import datetime
                
                # Aprovar todos os usu√°rios pendentes
                self.cursor.execute("""
                    UPDATE orientadores 
                    SET autorizado = 1,
                        data_autorizacao = ?,
                        autorizado_por = ?,
                        observacoes_autorizacao = 'Aprova√ß√£o em massa pelo administrador'
                    WHERE COALESCE(autorizado, 0) = 0 AND administrador = 0
                """, (
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    self.usuario_logado['nome'] if self.usuario_logado else 'Usu√°rio'
                ))
                
                aprovados = self.cursor.rowcount
                self.conn.commit()
                
                messagebox.showinfo(
                    "Sucesso!",
                    f"‚úÖ {aprovados} usu√°rio(s) aprovado(s) com sucesso!\n\nTodos podem fazer login agora."
                )
                
                # Recarregar a tela
                self.show_approval_center()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao aprovar usu√°rios: {str(e)}")
    
    def abrir_janela_novo_usuario(self):
        """Abrir janela para criar novo usu√°rio"""
        self.abrir_janela_usuario_form(None, "Novo Usu√°rio")
    
    def abrir_janela_editar_usuario(self, usuario_id):
        """Abrir janela para editar usu√°rio existente"""
        self.abrir_janela_usuario_form(usuario_id, "Editar Usu√°rio")
    
    def abrir_janela_usuario_form(self, usuario_id, titulo):
        """Abrir formul√°rio de usu√°rio (criar/editar)"""
        # Criar janela modal
        form_window = ctk.CTkToplevel(self.root)
        form_window.title(titulo)
        form_window.geometry("600x700")
        form_window.resizable(False, False)
        
        # Centralizar janela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Centralizar na tela
        form_window.update_idletasks()
        width = form_window.winfo_width()
        height = form_window.winfo_height()
        x = (form_window.winfo_screenwidth() // 2) - (width // 2)
        y = (form_window.winfo_screenheight() // 2) - (height // 2)
        form_window.geometry(f"{width}x{height}+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(form_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text=f"üë§ {titulo}",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=(0, 30))
        
        # Carregar dados se for edi√ß√£o
        user_data = None
        if usuario_id:
            try:
                self.cursor.execute("""
                    SELECT nome, siape, cpf, departamento, curso, telefone, email_institucional, administrador, status
                    FROM orientadores WHERE id = ?
                """, (usuario_id,))
                user_data = self.cursor.fetchone()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao carregar dados do usu√°rio: {str(e)}")
                form_window.destroy()
                return
        
        # Campos do formul√°rio
        fields = {}
        
        # Nome
        ctk.CTkLabel(main_frame, text="Nome Completo:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(10, 5))
        fields['nome'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12))
        fields['nome'].pack(pady=(0, 15))
        
        # SIAPE
        ctk.CTkLabel(main_frame, text="SIAPE:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['siape'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12))
        fields['siape'].pack(pady=(0, 15))
        
        # CPF
        ctk.CTkLabel(main_frame, text="CPF:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['cpf'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12))
        fields['cpf'].pack(pady=(0, 15))
        
        # Email Institucional
        ctk.CTkLabel(main_frame, text="Email Institucional:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['email'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12))
        fields['email'].pack(pady=(0, 15))
        
        # Departamento
        ctk.CTkLabel(main_frame, text="Departamento:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['departamento'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12))
        fields['departamento'].pack(pady=(0, 15))
        
        # Curso
        ctk.CTkLabel(main_frame, text="Curso:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['curso'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12))
        fields['curso'].pack(pady=(0, 15))
        
        # Telefone
        ctk.CTkLabel(main_frame, text="Telefone:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['telefone'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12))
        fields['telefone'].pack(pady=(0, 15))
        
        # Perfil (Administrador ou Professor)
        ctk.CTkLabel(main_frame, text="Perfil:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['perfil'] = ctk.CTkComboBox(
            main_frame, 
            width=500, 
            height=40,
            values=["Professor", "Administrador"],
            font=ctk.CTkFont(size=12)
        )
        fields['perfil'].pack(pady=(0, 15))
        
        # Status
        ctk.CTkLabel(main_frame, text="Status:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        fields['status'] = ctk.CTkComboBox(
            main_frame, 
            width=500, 
            height=40,
            values=["Ativo", "Inativo"],
            font=ctk.CTkFont(size=12)
        )
        fields['status'].pack(pady=(0, 15))
        
        # Senha (apenas para novos usu√°rios ou reset)
        if not usuario_id:
            ctk.CTkLabel(main_frame, text="Senha:", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
            fields['senha'] = ctk.CTkEntry(main_frame, width=500, height=40, font=ctk.CTkFont(size=12), show="*")
            fields['senha'].pack(pady=(0, 15))
        
        # Preencher campos se for edi√ß√£o
        if user_data:
            fields['nome'].insert(0, user_data[0] or "")
            fields['siape'].insert(0, user_data[1] or "")
            fields['cpf'].insert(0, user_data[2] or "")
            fields['email'].insert(0, user_data[6] or "")
            fields['departamento'].insert(0, user_data[3] or "")
            fields['curso'].insert(0, user_data[4] or "")
            fields['telefone'].insert(0, user_data[5] or "")
            fields['perfil'].set("Administrador" if user_data[7] == 1 else "Professor")
            fields['status'].set(user_data[8] or "Ativo")
        else:
            fields['perfil'].set("Professor")
            fields['status'].set("Ativo")
        
        # Bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(pady=(30, 0))
        
        def salvar_usuario():
            try:
                # Validar campos obrigat√≥rios
                if not all([fields['nome'].get().strip(), fields['siape'].get().strip(), 
                          fields['cpf'].get().strip(), fields['email'].get().strip()]):
                    messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios!")
                    return
                
                # Preparar dados
                dados = {
                    'nome': fields['nome'].get().strip(),
                    'siape': fields['siape'].get().strip(),
                    'cpf': fields['cpf'].get().strip(),
                    'email': fields['email'].get().strip(),
                    'departamento': fields['departamento'].get().strip(),
                    'curso': fields['curso'].get().strip(),
                    'telefone': fields['telefone'].get().strip(),
                    'administrador': 1 if fields['perfil'].get() == "Administrador" else 0,
                    'status': fields['status'].get()
                }
                
                if usuario_id:
                    # Atualizar usu√°rio existente
                    self.cursor.execute("""
                        UPDATE orientadores 
                        SET nome=?, siape=?, cpf=?, email_institucional=?, departamento=?, 
                            curso=?, telefone=?, administrador=?, status=?
                        WHERE id=?
                    """, (dados['nome'], dados['siape'], dados['cpf'], dados['email'],
                          dados['departamento'], dados['curso'], dados['telefone'],
                          dados['administrador'], dados['status'], usuario_id))
                    
                    messagebox.showinfo("Sucesso", "Usu√°rio atualizado com sucesso!")
                else:
                    # Criar novo usu√°rio
                    if not fields['senha'].get().strip():
                        messagebox.showerror("Erro", "A senha √© obrigat√≥ria para novos usu√°rios!")
                        return
                    
                    # Hash da senha
                    senha_hash = hashlib.sha256(fields['senha'].get().strip().encode()).hexdigest()
                    
                    self.cursor.execute("""
                        INSERT INTO orientadores 
                        (nome, siape, cpf, email_institucional, departamento, curso, telefone, senha, administrador, status, data_cadastro)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (dados['nome'], dados['siape'], dados['cpf'], dados['email'],
                          dados['departamento'], dados['curso'], dados['telefone'], senha_hash,
                          dados['administrador'], dados['status'], datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
                    
                    messagebox.showinfo("Sucesso", "Usu√°rio criado com sucesso!")
                
                self.conn.commit()
                self.carregar_usuarios()
                form_window.destroy()
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao salvar usu√°rio: {str(e)}")
        
        # Bot√£o Salvar
        btn_salvar = ctk.CTkButton(
            buttons_frame,
            text="üíæ Salvar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_hover,
            command=salvar_usuario
        )
        btn_salvar.pack(side="left", padx=(0, 10))
        
        # Bot√£o Cancelar
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=form_window.destroy
        )
        btn_cancelar.pack(side="left")
        
    def show_relatorios(self):
        """Mostrar tela de relat√≥rios"""
        self.clear_content()
        self.page_title.configure(text="üìä Relat√≥rios")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo principal
        title = ctk.CTkLabel(
            main_frame,
            text="üìä Sistema de Relat√≥rios",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_azul
        )
        title.pack(pady=(20, 30))
        
        # Verificar se √© administrador para mostrar relat√≥rios gerais
        is_admin = self.usuario_logado and self.usuario_logado.get('administrador', False)
        
        # Se√ß√£o de Controle de Relat√≥rios
        relatorios_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_secundaria, corner_radius=15)
        relatorios_frame.pack(fill="x", pady=(0, 20))
        
        relatorios_title = ctk.CTkLabel(
            relatorios_frame,
            text="üìã Controle de Relat√≥rios de Est√°gio",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=self.cor_branco
        )
        relatorios_title.pack(pady=(15, 10))
        
        relatorios_desc = ctk.CTkLabel(
            relatorios_frame,
            text="Envio de relat√≥rios PDF e controle de carga hor√°ria",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco
        )
        relatorios_desc.pack(pady=(0, 15))
        
        # Bot√µes de controle de relat√≥rios
        relatorios_buttons_frame = ctk.CTkFrame(relatorios_frame, fg_color="transparent")
        relatorios_buttons_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        btn_enviar_relatorio = ctk.CTkButton(
            relatorios_buttons_frame,
            text="üì§ Enviar Relat√≥rio PDF",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=200,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.show_enviar_relatorio_pdf
        )
        btn_enviar_relatorio.pack(side="left", padx=(0, 15))
        
        btn_controle_ch = ctk.CTkButton(
            relatorios_buttons_frame,
            text="‚è±Ô∏è Controle Carga Hor√°ria",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=200,
            fg_color="#8b5cf6",
            hover_color="#7c3aed",
            command=self.show_controle_carga_horaria
        )
        btn_controle_ch.pack(side="left", padx=(0, 15))
        
        btn_meus_relatorios = ctk.CTkButton(
            relatorios_buttons_frame,
            text="üìã Meus Relat√≥rios",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=200,
            fg_color="#f59e0b",
            hover_color="#d97706",
            command=self.show_meus_relatorios
        )
        btn_meus_relatorios.pack(side="left", padx=(0, 15))
        
        if is_admin:
            btn_avaliar_relatorios = ctk.CTkButton(
                relatorios_buttons_frame,
                text="‚úÖ Avaliar Relat√≥rios",
                font=ctk.CTkFont(size=16, weight="bold"),
                height=50,
                width=200,
                fg_color="#10b981",
                hover_color="#059669",
                command=self.show_avaliar_relatorios
            )
            btn_avaliar_relatorios.pack(side="left", padx=(0, 15))
        
        # Se√ß√£o de Relat√≥rios Gerais (apenas para administradores)
        if is_admin:
            # === SE√á√ÉO: RELAT√ìRIOS GERAIS (APENAS ADMINISTRADORES) ===
            admin_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=15)
            admin_frame.pack(fill="x", pady=(0, 20))
            
            # T√≠tulo da se√ß√£o administrativa
            admin_title = ctk.CTkLabel(
                admin_frame,
                text="üëë Relat√≥rios Gerais - Administrador",
                font=ctk.CTkFont(size=20, weight="bold"),
                text_color="#1565C0"
            )
            admin_title.pack(pady=(20, 10))
            
            # Descri√ß√£o
            admin_desc = ctk.CTkLabel(
                admin_frame,
                text="Relat√≥rios semestrais e gerenciais exclusivos para administradores",
                font=ctk.CTkFont(size=12),
                text_color="#666666"
            )
            admin_desc.pack(pady=(0, 20))
            
            # Grid de bot√µes para relat√≥rios administrativos
            admin_buttons_frame = ctk.CTkFrame(admin_frame, fg_color="transparent")
            admin_buttons_frame.pack(fill="x", padx=20, pady=(0, 20))
            
            # Primeira linha de bot√µes
            row1_frame = ctk.CTkFrame(admin_buttons_frame, fg_color="transparent")
            row1_frame.pack(fill="x", pady=(0, 15))
            
            # Relat√≥rio Semestral - Est√°gio Obrigat√≥rio
            btn_rel_sem_obrig = ctk.CTkButton(
                row1_frame,
                text="üìã Relat√≥rio Semestral\nEst√°gio Obrigat√≥rio",
                font=ctk.CTkFont(size=14, weight="bold"),
                width=250,
                height=80,
                fg_color="#2196F3",
                hover_color="#1976D2",
                command=self.show_relatorio_semestral_obrigatorio
            )
            btn_rel_sem_obrig.pack(side="left", padx=(0, 15))
            
            # Relat√≥rio Semestral - Est√°gio N√£o Obrigat√≥rio
            btn_rel_sem_nao_obrig = ctk.CTkButton(
                row1_frame,
                text="üìù Relat√≥rio Semestral\nEst√°gio N√£o Obrigat√≥rio",
                font=ctk.CTkFont(size=14, weight="bold"),
                width=250,
                height=80,
                fg_color="#4CAF50",
                hover_color="#45A049",
                command=self.exportar_relatorio_moderno_semestral_nao_obrigatorio
            )
            btn_rel_sem_nao_obrig.pack(side="left", padx=(0, 15))
            
            # Relat√≥rio de Professores Orientadores
            btn_rel_professores = ctk.CTkButton(
                row1_frame,
                text="üë®‚Äçüè´ Relat√≥rio de\nProfessores Orientadores",
                font=ctk.CTkFont(size=14, weight="bold"),
                width=250,
                height=80,
                fg_color="#FF9800",
                hover_color="#F57C00",
                command=self.show_relatorio_professores_orientadores
            )
            btn_rel_professores.pack(side="left")
            
            # Segunda linha de bot√µes
            row2_frame = ctk.CTkFrame(admin_buttons_frame, fg_color="transparent")
            row2_frame.pack(fill="x")
            
            # Relat√≥rio de Estudantes por Orientador
            btn_rel_estudantes_orientador = ctk.CTkButton(
                row2_frame,
                text="üë• Relat√≥rio de Estudantes\npor Orientador",
                font=ctk.CTkFont(size=14, weight="bold"),
                width=250,
                height=80,
                fg_color="#9C27B0",
                hover_color="#7B1FA2",
                command=self.show_relatorio_estudantes_por_orientador
            )
            btn_rel_estudantes_orientador.pack(side="left", padx=(0, 15))
            
            # Relat√≥rio Geral de Estat√≠sticas
            btn_rel_estatisticas = ctk.CTkButton(
                row2_frame,
                text="üìä Relat√≥rio Geral\nde Estat√≠sticas",
                font=ctk.CTkFont(size=14, weight="bold"),
                width=250,
                height=80,
                fg_color="#607D8B",
                hover_color="#455A64",
                command=self.exportar_relatorio_moderno_geral_estatisticas
            )
            btn_rel_estatisticas.pack(side="left", padx=(0, 15))
            
            # Relat√≥rio de Certificados
            btn_rel_certificados = ctk.CTkButton(
                row2_frame,
                text="üèÜ Relat√≥rio de\nCertificados",
                font=ctk.CTkFont(size=14, weight="bold"),
                width=250,
                height=80,
                fg_color="#E91E63",
                hover_color="#C2185B",
                command=self.show_relatorio_certificados
            )
            btn_rel_certificados.pack(side="left")
        
        # === SE√á√ÉO: RELAT√ìRIOS B√ÅSICOS (TODOS OS USU√ÅRIOS) ===
        basic_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=15)
        basic_frame.pack(fill="x", pady=(0, 20))
        
        # T√≠tulo da se√ß√£o b√°sica
        basic_title = ctk.CTkLabel(
            basic_frame,
            text="üìã Relat√≥rios B√°sicos",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#495057"
        )
        basic_title.pack(pady=(20, 10))
        
        # Frame para bot√µes b√°sicos
        basic_buttons_frame = ctk.CTkFrame(basic_frame, fg_color="transparent")
        basic_buttons_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Bot√£o Relat√≥rio Est√°gio Obrigat√≥rio
        btn_rel_obrigatorio = ctk.CTkButton(
            basic_buttons_frame,
            text="üìã Relat√≥rio Est√°gio Obrigat√≥rio",
            width=300,
            height=60,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            command=self.show_relatorio_estagio_obrigatorio
        )
        btn_rel_obrigatorio.pack(side="left", padx=(0, 20))
        
        # Bot√£o Relat√≥rio Est√°gio N√£o Obrigat√≥rio
        btn_rel_nao_obrigatorio = ctk.CTkButton(
            basic_buttons_frame,
            text="üìù Relat√≥rio Est√°gio N√£o Obrigat√≥rio",
            width=300,
            height=60,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_verde,
            hover_color="#166534",
            command=self.show_relatorio_estagio_nao_obrigatorio
        )
        btn_rel_nao_obrigatorio.pack(side="left")
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color="#E8F5E8", corner_radius=10)
        info_frame.pack(fill="x")
        
        info_text = """
‚ÑπÔ∏è Informa√ß√µes sobre os Relat√≥rios:

‚Ä¢ Relat√≥rios B√°sicos: Dispon√≠veis para todos os usu√°rios, mostram informa√ß√µes gerais sobre est√°gios
‚Ä¢ Relat√≥rios Gerais: Exclusivos para administradores, incluem an√°lises semestrais e estat√≠sticas avan√ßadas
‚Ä¢ Todos os relat√≥rios podem ser exportados em formato PDF ou Excel
‚Ä¢ Os relat√≥rios semestrais s√£o organizados por per√≠odo (Jan-Jun / Jul-Dez)
        """
        
        info_label = ctk.CTkLabel(
            info_frame,
            text=info_text,
            font=ctk.CTkFont(size=12),
            text_color="#2E7D32",
            justify="left"
        )
        info_label.pack(pady=20, padx=20)
    
    def show_relatorio_semestral_obrigatorio(self):
        """Mostrar relat√≥rio semestral de est√°gios obrigat√≥rios"""
        self.clear_content()
        self.page_title.configure(text="üìã Relat√≥rio Semestral - Est√°gio Obrigat√≥rio")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìã Relat√≥rio Semestral - Est√°gios Obrigat√≥rios",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_azul
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_relatorios
        )
        btn_voltar.pack(side="right")
        
        # Frame de filtros
        filter_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=10)
        filter_frame.pack(fill="x", pady=20)
        
        # T√≠tulo dos filtros
        filter_title = ctk.CTkLabel(
            filter_frame,
            text="üìÖ Filtros do Relat√≥rio",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_azul
        )
        filter_title.pack(pady=(15, 10))
        
        # Frame para controles
        controls_frame = ctk.CTkFrame(filter_frame, fg_color="transparent")
        controls_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Sele√ß√£o de semestre
        ctk.CTkLabel(
            controls_frame,
            text="Semestre:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.semestre_combo = ctk.CTkComboBox(
            controls_frame,
            values=["1¬∫ Semestre (Jan-Jun)", "2¬∫ Semestre (Jul-Dez)", "Ano Completo"],
            width=200,
            height=35,
            command=self.atualizar_relatorio_semestral_obrigatorio
        )
        self.semestre_combo.set("1¬∫ Semestre (Jan-Jun)")
        self.semestre_combo.pack(side="left", padx=(0, 20))
        
        # Sele√ß√£o de ano
        ctk.CTkLabel(
            controls_frame,
            text="Ano:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        # Gerar lista de anos (√∫ltimos 5 anos)
        from datetime import datetime
        ano_atual = datetime.now().year
        anos = [str(ano) for ano in range(ano_atual - 4, ano_atual + 1)]
        
        self.ano_combo = ctk.CTkComboBox(
            controls_frame,
            values=anos,
            width=100,
            height=35,
            command=self.atualizar_relatorio_semestral_obrigatorio
        )
        self.ano_combo.set(str(ano_atual))
        self.ano_combo.pack(side="left", padx=(0, 20))
        
        # Bot√£o atualizar
        btn_atualizar = ctk.CTkButton(
            controls_frame,
            text="üîÑ Atualizar",
            width=120,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            command=self.atualizar_relatorio_semestral_obrigatorio
        )
        btn_atualizar.pack(side="left", padx=(0, 10))
        
        # Bot√£o exportar moderno
        btn_exportar = ctk.CTkButton(
            controls_frame,
            text="üìä PDF Moderno",
            width=140,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_verde,
            hover_color="#166534",
            command=self.exportar_relatorio_moderno_semestral_obrigatorio
        )
        btn_exportar.pack(side="left")
        
        # Frame de estat√≠sticas
        stats_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        stats_frame.pack(fill="x", pady=20)
        
        # Obter estat√≠sticas
        stats = self.obter_estatisticas_semestral_obrigatorio()
        
        # Cards de estat√≠sticas
        self.create_stats_semestral_cards(stats_frame, stats)
        
        # Tabela de dados
        self.create_relatorio_semestral_obrigatorio_table(main_frame)
        
        # Carregar dados iniciais
        self.atualizar_relatorio_semestral_obrigatorio()
    
    def show_relatorio_semestral_nao_obrigatorio(self):
        """Mostrar relat√≥rio semestral de est√°gios n√£o obrigat√≥rios"""
        self.clear_content()
        self.page_title.configure(text="üìù Relat√≥rio Semestral - Est√°gio N√£o Obrigat√≥rio")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìù Relat√≥rio Semestral - Est√°gios N√£o Obrigat√≥rios",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_verde
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_relatorios
        )
        btn_voltar.pack(side="right")
        
        # Frame de filtros
        filter_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=10)
        filter_frame.pack(fill="x", pady=20)
        
        # T√≠tulo dos filtros
        filter_title = ctk.CTkLabel(
            filter_frame,
            text="üìÖ Filtros do Relat√≥rio",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_verde
        )
        filter_title.pack(pady=(15, 10))
        
        # Frame para controles
        controls_frame = ctk.CTkFrame(filter_frame, fg_color="transparent")
        controls_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Sele√ß√£o de semestre
        ctk.CTkLabel(
            controls_frame,
            text="Semestre:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.semestre_nao_obrig_combo = ctk.CTkComboBox(
            controls_frame,
            values=["1¬∫ Semestre (Jan-Jun)", "2¬∫ Semestre (Jul-Dez)", "Ano Completo"],
            width=200,
            height=35,
            command=self.atualizar_relatorio_semestral_nao_obrigatorio
        )
        self.semestre_nao_obrig_combo.set("1¬∫ Semestre (Jan-Jun)")
        self.semestre_nao_obrig_combo.pack(side="left", padx=(0, 20))
        
        # Sele√ß√£o de ano
        ctk.CTkLabel(
            controls_frame,
            text="Ano:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        # Gerar lista de anos (√∫ltimos 5 anos)
        from datetime import datetime
        ano_atual = datetime.now().year
        anos = [str(ano) for ano in range(ano_atual - 4, ano_atual + 1)]
        
        self.ano_nao_obrig_combo = ctk.CTkComboBox(
            controls_frame,
            values=anos,
            width=100,
            height=35,
            command=self.atualizar_relatorio_semestral_nao_obrigatorio
        )
        self.ano_nao_obrig_combo.set(str(ano_atual))
        self.ano_nao_obrig_combo.pack(side="left", padx=(0, 20))
        
        # Bot√£o atualizar
        btn_atualizar = ctk.CTkButton(
            controls_frame,
            text="üîÑ Atualizar",
            width=120,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_verde,
            hover_color="#166534",
            command=self.atualizar_relatorio_semestral_nao_obrigatorio
        )
        btn_atualizar.pack(side="left", padx=(0, 10))
        
        # Bot√£o exportar
        btn_exportar = ctk.CTkButton(
            controls_frame,
            text="üìä Exportar PDF",
            width=120,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            command=self.exportar_relatorio_semestral_nao_obrigatorio
        )
        btn_exportar.pack(side="left")
        
        # Frame de estat√≠sticas
        stats_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        stats_frame.pack(fill="x", pady=20)
        
        # Obter estat√≠sticas
        stats = self.obter_estatisticas_semestral_nao_obrigatorio()
        
        # Cards de estat√≠sticas
        self.create_stats_semestral_nao_obrig_cards(stats_frame, stats)
        
        # Tabela de dados
        self.create_relatorio_semestral_nao_obrigatorio_table(main_frame)
        
        # Carregar dados iniciais
        self.atualizar_relatorio_semestral_nao_obrigatorio()
    
    def show_relatorio_professores_orientadores(self):
        """Mostrar relat√≥rio de professores orientadores"""
        self.clear_content()
        self.page_title.configure(text="üë®‚Äçüè´ Relat√≥rio de Professores Orientadores")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üë®‚Äçüè´ Relat√≥rio de Professores Orientadores",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#FF9800"
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_relatorios
        )
        btn_voltar.pack(side="right")
        
        # Frame de estat√≠sticas
        stats_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        stats_frame.pack(fill="x", pady=20)
        
        # Obter estat√≠sticas
        stats = self.obter_estatisticas_professores_orientadores()
        
        # Cards de estat√≠sticas
        self.create_stats_professores_cards(stats_frame, stats)
        
        # Tabela de dados
        self.create_relatorio_professores_table(main_frame)
        
        # Carregar dados
        self.carregar_relatorio_professores()
    
    def show_relatorio_estudantes_por_orientador(self):
        """Mostrar relat√≥rio de estudantes por orientador"""
        self.clear_content()
        self.page_title.configure(text="üë• Relat√≥rio de Estudantes por Orientador")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üë• Relat√≥rio de Estudantes por Orientador",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#9C27B0"
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_relatorios
        )
        btn_voltar.pack(side="right")
        
        # Frame de filtros
        filter_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=10)
        filter_frame.pack(fill="x", pady=20)
        
        # T√≠tulo dos filtros
        filter_title = ctk.CTkLabel(
            filter_frame,
            text="üîç Filtros do Relat√≥rio",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#9C27B0"
        )
        filter_title.pack(pady=(15, 10))
        
        # Frame para controles
        controls_frame = ctk.CTkFrame(filter_frame, fg_color="transparent")
        controls_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Sele√ß√£o de orientador
        ctk.CTkLabel(
            controls_frame,
            text="Orientador:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.orientador_combo = ctk.CTkComboBox(
            controls_frame,
            values=["Todos os Orientadores"],
            width=250,
            height=35,
            command=self.atualizar_relatorio_estudantes_orientador
        )
        self.orientador_combo.set("Todos os Orientadores")
        self.orientador_combo.pack(side="left", padx=(0, 20))
        
        # Bot√£o atualizar
        btn_atualizar = ctk.CTkButton(
            controls_frame,
            text="üîÑ Atualizar",
            width=120,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#9C27B0",
            hover_color="#7B1FA2",
            command=self.atualizar_relatorio_estudantes_orientador
        )
        btn_atualizar.pack(side="left", padx=(0, 10))
        
        # Bot√£o exportar
        btn_exportar = ctk.CTkButton(
            controls_frame,
            text="üìä Exportar PDF",
            width=120,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#607D8B",
            hover_color="#455A64",
            command=self.exportar_relatorio_estudantes_orientador
        )
        btn_exportar.pack(side="left")
        
        # Tabela de dados
        self.create_relatorio_estudantes_orientador_table(main_frame)
        
        # Carregar dados iniciais
        self.carregar_orientadores_combo()
        self.atualizar_relatorio_estudantes_orientador()
    
    def show_relatorio_geral_estatisticas(self):
        """Mostrar relat√≥rio geral de estat√≠sticas"""
        self.clear_content()
        self.page_title.configure(text="üìä Relat√≥rio Geral de Estat√≠sticas")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìä Relat√≥rio Geral de Estat√≠sticas",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#607D8B"
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_relatorios
        )
        btn_voltar.pack(side="right")
        
        # Frame de estat√≠sticas gerais
        stats_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        stats_frame.pack(fill="x", pady=20)
        
        # Obter estat√≠sticas gerais
        stats = self.obter_estatisticas_gerais()
        
        # Cards de estat√≠sticas gerais
        self.create_stats_gerais_cards(stats_frame, stats)
        
        # Bot√£o exportar
        btn_exportar = ctk.CTkButton(
            main_frame,
            text="üìä Exportar Relat√≥rio Completo",
            width=250,
            height=50,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#607D8B",
            hover_color="#455A64",
            command=self.exportar_relatorio_geral_estatisticas
        )
        btn_exportar.pack(pady=30)
    
    # === M√âTODOS AUXILIARES PARA RELAT√ìRIOS SEMESTRAIS ===
    
    def obter_estatisticas_semestral_obrigatorio(self):
        """Obter estat√≠sticas para relat√≥rio semestral de est√°gios obrigat√≥rios"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Obter per√≠odo selecionado
            semestre = self.semestre_combo.get() if hasattr(self, 'semestre_combo') else "1¬∫ Semestre (Jan-Jun)"
            ano = self.ano_combo.get() if hasattr(self, 'ano_combo') else str(datetime.now().year)
            
            # Definir per√≠odo baseado na sele√ß√£o
            if "1¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-06-30"
            elif "2¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-07-01"
                data_fim = f"{ano}-12-31"
            else:  # Ano Completo
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-12-31"
            
            # Total de est√°gios no per√≠odo
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ?
            """, (data_inicio, data_fim))
            total_estagios = cursor.fetchone()[0]
            
            # Est√°gios conclu√≠dos
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ? 
                AND (status = 'Completo' OR carga_horaria = 0 OR carga_horaria = 0)
            """, (data_inicio, data_fim))
            estagios_concluidos = cursor.fetchone()[0]
            
            # Est√°gios em andamento
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ? 
                AND status = 'Em Andamento'
            """, (data_inicio, data_fim))
            estagios_andamento = cursor.fetchone()[0]
            
            # Est√°gios pendentes
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ? 
                AND status = 'Pendente'
            """, (data_inicio, data_fim))
            estagios_pendentes = cursor.fetchone()[0]
            
            # Carga hor√°ria total
            cursor.execute("""
                SELECT SUM(carga_horaria) FROM estagio_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ?
            """, (data_inicio, data_fim))
            carga_total = cursor.fetchone()[0] or 0
            
            conn.close()
            
            return {
                'total_estagios': total_estagios,
                'estagios_concluidos': estagios_concluidos,
                'estagios_andamento': estagios_andamento,
                'estagios_pendentes': estagios_pendentes,
                'carga_total': carga_total,
                'periodo': f"{semestre} {ano}"
            }
            
        except Exception as e:
            print(f"Erro ao obter estat√≠sticas semestral obrigat√≥rio: {e}")
            return {
                'total_estagios': 0,
                'estagios_concluidos': 0,
                'estagios_andamento': 0,
                'estagios_pendentes': 0,
                'carga_total': 0,
                'periodo': f"{semestre} {ano}"
            }
    
    def obter_estatisticas_semestral_nao_obrigatorio(self):
        """Obter estat√≠sticas para relat√≥rio semestral de est√°gios n√£o obrigat√≥rios"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Obter per√≠odo selecionado
            semestre = self.semestre_nao_obrig_combo.get() if hasattr(self, 'semestre_nao_obrig_combo') else "1¬∫ Semestre (Jan-Jun)"
            ano = self.ano_nao_obrig_combo.get() if hasattr(self, 'ano_nao_obrig_combo') else str(datetime.now().year)
            
            # Definir per√≠odo baseado na sele√ß√£o
            if "1¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-06-30"
            elif "2¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-07-01"
                data_fim = f"{ano}-12-31"
            else:  # Ano Completo
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-12-31"
            
            # Total de est√°gios no per√≠odo
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_nao_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ?
            """, (data_inicio, data_fim))
            total_estagios = cursor.fetchone()[0]
            
            # Est√°gios conclu√≠dos
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_nao_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ? 
                AND (status = 'Completo' OR carga_horaria = 0 OR carga_horaria = 0)
            """, (data_inicio, data_fim))
            estagios_concluidos = cursor.fetchone()[0]
            
            # Est√°gios em andamento
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_nao_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ? 
                AND status = 'Em Andamento'
            """, (data_inicio, data_fim))
            estagios_andamento = cursor.fetchone()[0]
            
            # Est√°gios pendentes
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_nao_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ? 
                AND status = 'Pendente'
            """, (data_inicio, data_fim))
            estagios_pendentes = cursor.fetchone()[0]
            
            # Carga hor√°ria total
            cursor.execute("""
                SELECT SUM(carga_horaria) FROM estagio_nao_obrigatorio 
                WHERE data_inicio >= ? AND data_inicio <= ?
            """, (data_inicio, data_fim))
            carga_total = cursor.fetchone()[0] or 0
            
            conn.close()
            
            return {
                'total_estagios': total_estagios,
                'estagios_concluidos': estagios_concluidos,
                'estagios_andamento': estagios_andamento,
                'estagios_pendentes': estagios_pendentes,
                'carga_total': carga_total,
                'periodo': f"{semestre} {ano}"
            }
            
        except Exception as e:
            print(f"Erro ao obter estat√≠sticas semestral n√£o obrigat√≥rio: {e}")
            return {
                'total_estagios': 0,
                'estagios_concluidos': 0,
                'estagios_andamento': 0,
                'estagios_pendentes': 0,
                'carga_total': 0,
                'periodo': f"{semestre} {ano}"
            }
    
    def obter_estatisticas_professores_orientadores(self):
        """Obter estat√≠sticas de professores orientadores"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Total de orientadores
            cursor.execute("SELECT COUNT(*) FROM orientadores WHERE status = 'Aprovado'")
            total_orientadores = cursor.fetchone()[0]
            
            # Orientadores ativos (com estudantes)
            cursor.execute("""
                SELECT COUNT(DISTINCT orientador_id) FROM estagio_obrigatorio 
                WHERE orientador_id IS NOT NULL
            """)
            orientadores_obrigatorio = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT COUNT(DISTINCT orientador_id) FROM estagio_nao_obrigatorio 
                WHERE orientador_id IS NOT NULL
            """)
            orientadores_nao_obrigatorio = cursor.fetchone()[0]
            
            # Total de estudantes orientados
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_obrigatorio 
                WHERE orientador_id IS NOT NULL
            """)
            estudantes_obrigatorio = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT COUNT(*) FROM estagio_nao_obrigatorio 
                WHERE orientador_id IS NOT NULL
            """)
            estudantes_nao_obrigatorio = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_orientadores': total_orientadores,
                'orientadores_obrigatorio': orientadores_obrigatorio,
                'orientadores_nao_obrigatorio': orientadores_nao_obrigatorio,
                'estudantes_obrigatorio': estudantes_obrigatorio,
                'estudantes_nao_obrigatorio': estudantes_nao_obrigatorio,
                'total_estudantes': estudantes_obrigatorio + estudantes_nao_obrigatorio
            }
            
        except Exception as e:
            print(f"Erro ao obter estat√≠sticas professores: {e}")
            return {
                'total_orientadores': 0,
                'orientadores_obrigatorio': 0,
                'orientadores_nao_obrigatorio': 0,
                'estudantes_obrigatorio': 0,
                'estudantes_nao_obrigatorio': 0,
                'total_estudantes': 0
            }
    
    def obter_estatisticas_gerais(self):
        """Obter estat√≠sticas gerais do sistema"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Total de estudantes
            cursor.execute("SELECT COUNT(*) FROM estudantes")
            total_estudantes = cursor.fetchone()[0]
            
            # Total de empresas
            cursor.execute("SELECT COUNT(*) FROM empresas")
            total_empresas = cursor.fetchone()[0]
            
            # Total de orientadores
            cursor.execute("SELECT COUNT(*) FROM orientadores WHERE status = 'Aprovado'")
            total_orientadores = cursor.fetchone()[0]
            
            # Est√°gios obrigat√≥rios
            cursor.execute("SELECT COUNT(*) FROM estagio_obrigatorio")
            total_obrigatorio = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM estagio_obrigatorio WHERE status = 'Completo' OR carga_horaria = 0")
            concluidos_obrigatorio = cursor.fetchone()[0]
            
            # Est√°gios n√£o obrigat√≥rios
            cursor.execute("SELECT COUNT(*) FROM estagio_nao_obrigatorio")
            total_nao_obrigatorio = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM estagio_nao_obrigatorio WHERE status = 'Completo' OR carga_horaria = 0")
            concluidos_nao_obrigatorio = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total_estudantes': total_estudantes,
                'total_empresas': total_empresas,
                'total_orientadores': total_orientadores,
                'total_obrigatorio': total_obrigatorio,
                'concluidos_obrigatorio': concluidos_obrigatorio,
                'total_nao_obrigatorio': total_nao_obrigatorio,
                'concluidos_nao_obrigatorio': concluidos_nao_obrigatorio,
                'total_estagios': total_obrigatorio + total_nao_obrigatorio,
                'total_concluidos': concluidos_obrigatorio + concluidos_nao_obrigatorio
            }
            
        except Exception as e:
            print(f"Erro ao obter estat√≠sticas gerais: {e}")
            return {
                'total_estudantes': 0,
                'total_empresas': 0,
                'total_orientadores': 0,
                'total_obrigatorio': 0,
                'concluidos_obrigatorio': 0,
                'total_nao_obrigatorio': 0,
                'concluidos_nao_obrigatorio': 0,
                'total_estagios': 0,
                'total_concluidos': 0
            }
    
    def create_stats_semestral_cards(self, parent, stats):
        """Criar cards de estat√≠sticas para relat√≥rio semestral obrigat√≥rio"""
        # Frame para cards
        cards_frame = ctk.CTkFrame(parent, fg_color="transparent")
        cards_frame.pack(fill="x", pady=10)
        
        # Card 1: Total de Est√°gios
        card1 = ctk.CTkFrame(cards_frame, fg_color="#E3F2FD", corner_radius=10)
        card1.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card1,
            text="üìã Total de Est√°gios",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card1,
            text=str(stats['total_estagios']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(0, 15))
        
        # Card 2: Conclu√≠dos
        card2 = ctk.CTkFrame(cards_frame, fg_color="#E8F5E8", corner_radius=10)
        card2.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card2,
            text="‚úÖ Conclu√≠dos",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card2,
            text=str(stats['estagios_concluidos']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(0, 15))
        
        # Card 3: Em Andamento
        card3 = ctk.CTkFrame(cards_frame, fg_color="#FFF3E0", corner_radius=10)
        card3.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card3,
            text="üîÑ Em Andamento",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card3,
            text=str(stats['estagios_andamento']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(0, 15))
        
        # Card 4: Carga Hor√°ria
        card4 = ctk.CTkFrame(cards_frame, fg_color="#F3E5F5", corner_radius=10)
        card4.pack(side="left", fill="x", expand=True)
        
        ctk.CTkLabel(
            card4,
            text="‚è∞ Carga Hor√°ria",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card4,
            text=f"{stats['carga_total']}h",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(0, 15))
    
    def create_stats_semestral_nao_obrig_cards(self, parent, stats):
        """Criar cards de estat√≠sticas para relat√≥rio semestral n√£o obrigat√≥rio"""
        # Frame para cards
        cards_frame = ctk.CTkFrame(parent, fg_color="transparent")
        cards_frame.pack(fill="x", pady=10)
        
        # Card 1: Total de Est√°gios
        card1 = ctk.CTkFrame(cards_frame, fg_color="#E8F5E8", corner_radius=10)
        card1.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card1,
            text="üìù Total de Est√°gios",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card1,
            text=str(stats['total_estagios']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(0, 15))
        
        # Card 2: Conclu√≠dos
        card2 = ctk.CTkFrame(cards_frame, fg_color="#E3F2FD", corner_radius=10)
        card2.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card2,
            text="‚úÖ Conclu√≠dos",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card2,
            text=str(stats['estagios_concluidos']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(0, 15))
        
        # Card 3: Em Andamento
        card3 = ctk.CTkFrame(cards_frame, fg_color="#FFF3E0", corner_radius=10)
        card3.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card3,
            text="üîÑ Em Andamento",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card3,
            text=str(stats['estagios_andamento']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(0, 15))
        
        # Card 4: Carga Hor√°ria
        card4 = ctk.CTkFrame(cards_frame, fg_color="#F3E5F5", corner_radius=10)
        card4.pack(side="left", fill="x", expand=True)
        
        ctk.CTkLabel(
            card4,
            text="‚è∞ Carga Hor√°ria",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card4,
            text=f"{stats['carga_total']}h",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(0, 15))
    
    def create_stats_professores_cards(self, parent, stats):
        """Criar cards de estat√≠sticas para relat√≥rio de professores"""
        # Frame para cards
        cards_frame = ctk.CTkFrame(parent, fg_color="transparent")
        cards_frame.pack(fill="x", pady=10)
        
        # Card 1: Total de Orientadores
        card1 = ctk.CTkFrame(cards_frame, fg_color="#FFF3E0", corner_radius=10)
        card1.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card1,
            text="üë®‚Äçüè´ Total Orientadores",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card1,
            text=str(stats['total_orientadores']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(0, 15))
        
        # Card 2: Estudantes Obrigat√≥rio
        card2 = ctk.CTkFrame(cards_frame, fg_color="#E3F2FD", corner_radius=10)
        card2.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card2,
            text="üìã Estudantes Obrigat√≥rio",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card2,
            text=str(stats['estudantes_obrigatorio']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(0, 15))
        
        # Card 3: Estudantes N√£o Obrigat√≥rio
        card3 = ctk.CTkFrame(cards_frame, fg_color="#E8F5E8", corner_radius=10)
        card3.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card3,
            text="üìù Estudantes N√£o Obrigat√≥rio",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card3,
            text=str(stats['estudantes_nao_obrigatorio']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(0, 15))
        
        # Card 4: Total de Estudantes
        card4 = ctk.CTkFrame(cards_frame, fg_color="#F3E5F5", corner_radius=10)
        card4.pack(side="left", fill="x", expand=True)
        
        ctk.CTkLabel(
            card4,
            text="üë• Total Estudantes",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card4,
            text=str(stats['total_estudantes']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(0, 15))
    
    def create_stats_gerais_cards(self, parent, stats):
        """Criar cards de estat√≠sticas gerais"""
        # Frame para cards
        cards_frame = ctk.CTkFrame(parent, fg_color="transparent")
        cards_frame.pack(fill="x", pady=10)
        
        # Primeira linha de cards
        row1_frame = ctk.CTkFrame(cards_frame, fg_color="transparent")
        row1_frame.pack(fill="x", pady=(0, 10))
        
        # Card 1: Total de Estudantes
        card1 = ctk.CTkFrame(row1_frame, fg_color="#E3F2FD", corner_radius=10)
        card1.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card1,
            text="üë• Total de Estudantes",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card1,
            text=str(stats['total_estudantes']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(0, 15))
        
        # Card 2: Total de Empresas
        card2 = ctk.CTkFrame(row1_frame, fg_color="#E8F5E8", corner_radius=10)
        card2.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card2,
            text="üè¢ Total de Empresas",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card2,
            text=str(stats['total_empresas']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(0, 15))
        
        # Card 3: Total de Orientadores
        card3 = ctk.CTkFrame(row1_frame, fg_color="#FFF3E0", corner_radius=10)
        card3.pack(side="left", fill="x", expand=True)
        
        ctk.CTkLabel(
            card3,
            text="üë®‚Äçüè´ Total de Orientadores",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card3,
            text=str(stats['total_orientadores']),
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(0, 15))
        
        # Segunda linha de cards
        row2_frame = ctk.CTkFrame(cards_frame, fg_color="transparent")
        row2_frame.pack(fill="x")
        
        # Card 4: Est√°gios Obrigat√≥rios
        card4 = ctk.CTkFrame(row2_frame, fg_color="#E3F2FD", corner_radius=10)
        card4.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card4,
            text="üìã Est√°gios Obrigat√≥rios",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card4,
            text=f"{stats['concluidos_obrigatorio']}/{stats['total_obrigatorio']}",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(0, 15))
        
        # Card 5: Est√°gios N√£o Obrigat√≥rios
        card5 = ctk.CTkFrame(row2_frame, fg_color="#E8F5E8", corner_radius=10)
        card5.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        ctk.CTkLabel(
            card5,
            text="üìù Est√°gios N√£o Obrigat√≥rios",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card5,
            text=f"{stats['concluidos_nao_obrigatorio']}/{stats['total_nao_obrigatorio']}",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(0, 15))
        
        # Card 6: Total de Est√°gios
        card6 = ctk.CTkFrame(row2_frame, fg_color="#F3E5F5", corner_radius=10)
        card6.pack(side="left", fill="x", expand=True)
        
        ctk.CTkLabel(
            card6,
            text="üìä Total de Est√°gios",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            card6,
            text=f"{stats['total_concluidos']}/{stats['total_estagios']}",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#7B1FA2"
        ).pack(pady=(0, 15))
        
    def show_certificados(self):
        """Mostrar tela de certificados"""
        self.clear_content()
        self.page_title.configure(text="Certificados")
        
        # Frame principal dos certificados
        certificados_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        certificados_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            certificados_frame,
            text="üèÜ Sistema de Certificados",
            font=ctk.CTkFont(size=32, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(20, 30))
        
        # Subt√≠tulo
        subtitle = ctk.CTkLabel(
            certificados_frame,
            text="Emiss√£o de certificados de conclus√£o de est√°gio",
            font=ctk.CTkFont(size=16),
            text_color=self.cor_texto
        )
        subtitle.pack(pady=(0, 40))
        
        # Frame para os bot√µes de certificados
        buttons_frame = ctk.CTkFrame(certificados_frame, fg_color="transparent")
        buttons_frame.pack(expand=True)
        
        # Bot√£o Certificados Est√°gio Obrigat√≥rio
        btn_cert_obrigatorio = ctk.CTkButton(
            buttons_frame,
            text="üìã Certificados\nEst√°gio Obrigat√≥rio",
            font=ctk.CTkFont(size=18, weight="bold"),
            width=300,
            height=120,
            fg_color=self.cor_primaria,
            hover_color=self.cor_hover,
            corner_radius=15,
            command=self.show_certificados_obrigatorio
        )
        btn_cert_obrigatorio.pack(side="left", padx=20)
        
        # Bot√£o Certificados Est√°gio N√£o Obrigat√≥rio  
        btn_cert_nao_obrigatorio = ctk.CTkButton(
            buttons_frame,
            text="üìù Certificados\nEst√°gio N√£o Obrigat√≥rio",
            font=ctk.CTkFont(size=18, weight="bold"),
            width=300,
            height=120,
            fg_color=self.cor_secundaria,
            hover_color="#45A049",
            corner_radius=15,
            command=self.show_certificados_nao_obrigatorio
        )
        btn_cert_nao_obrigatorio.pack(side="left", padx=20)
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(certificados_frame, fg_color="transparent")
        info_frame.pack(fill="x", pady=(50, 0))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="‚ÑπÔ∏è Gere certificados de conclus√£o para estudantes que completaram seus est√°gios. Os certificados incluem informa√ß√µes detalhadas sobre o per√≠odo, carga hor√°ria cumprida e avalia√ß√µes.",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_texto,
            wraplength=800
        )
        info_label.pack(pady=20)
        
    def show_certificados_obrigatorio(self):
        """Mostrar tela de certificados para est√°gios obrigat√≥rios"""
        self.clear_content()
        self.page_title.configure(text="Certificados - Est√°gio Obrigat√≥rio")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìã Certificados de Est√°gio Obrigat√≥rio",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_certificados
        )
        btn_voltar.pack(side="right")
        
        # Frame de busca
        search_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        search_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        search_label = ctk.CTkLabel(
            search_frame,
            text="üîç Buscar estudante:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        )
        search_label.pack(side="left", padx=(0, 10))
        
        self.search_cert_obrig_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text="Digite o nome do estudante, empresa ou orientador...",
            width=400,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.search_cert_obrig_entry.pack(side="left", padx=(0, 10))
        
        btn_search_cert_obrig = ctk.CTkButton(
            search_frame,
            text="Buscar",
            width=100,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_hover,
            command=self.buscar_certificados_obrigatorio
        )
        btn_search_cert_obrig.pack(side="left")
        
        # Criar tabela de certificados obrigat√≥rios
        self.create_certificados_obrigatorio_table(main_frame)
        
        # Carregar dados iniciais
        self.carregar_certificados_obrigatorio()
        
    def show_certificados_nao_obrigatorio(self):
        """Mostrar tela de certificados para est√°gios n√£o obrigat√≥rios"""
        self.clear_content()
        self.page_title.configure(text="Certificados - Est√°gio N√£o Obrigat√≥rio")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìù Certificados de Est√°gio N√£o Obrigat√≥rio",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_secundaria
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_certificados
        )
        btn_voltar.pack(side="right")
        
        # Frame de busca
        search_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        search_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        search_label = ctk.CTkLabel(
            search_frame,
            text="üîç Buscar estudante:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        )
        search_label.pack(side="left", padx=(0, 10))
        
        self.search_cert_nao_obrig_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text="Digite o nome do estudante, empresa ou orientador...",
            width=400,
            height=40,
            font=ctk.CTkFont(size=12)
        )
        self.search_cert_nao_obrig_entry.pack(side="left", padx=(0, 10))
        
        btn_search_cert_nao_obrig = ctk.CTkButton(
            search_frame,
            text="Buscar",
            width=100,
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_secundaria,
            hover_color="#45A049",
            command=self.buscar_certificados_nao_obrigatorio
        )
        btn_search_cert_nao_obrig.pack(side="left")
        
        # Criar tabela de certificados n√£o obrigat√≥rios
        self.create_certificados_nao_obrigatorio_table(main_frame)
        
        # Carregar dados iniciais
        self.carregar_certificados_nao_obrigatorio()
    
    def show_relatorio_certificados(self):
        """Mostrar relat√≥rio geral de certificados"""
        self.clear_content()
        self.page_title.configure(text="Relat√≥rio Geral de Certificados")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìä Relat√≥rio Geral de Certificados",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_certificados
        )
        btn_voltar.pack(side="right")
        
        # Frame de estat√≠sticas
        stats_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        stats_frame.pack(fill="x", padx=20, pady=20)
        
        # Obter estat√≠sticas
        stats = self.obter_estatisticas_certificados()
        
        # Cards de estat√≠sticas
        self.create_stats_cards(stats_frame)
        
        # Frame de a√ß√µes
        actions_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        actions_frame.pack(fill="x", padx=20, pady=20)
        
        # Bot√µes de a√ß√£o
        btn_gerar_todos = ctk.CTkButton(
            actions_frame,
            text="üìÑ Gerar Todos os Certificados Pendentes",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color=self.cor_verde,
            hover_color="#166534",
            command=self.gerar_todos_certificados_pendentes
        )
        btn_gerar_todos.pack(side="left", padx=(0, 10))
        
        btn_exportar_relatorio = ctk.CTkButton(
            actions_frame,
            text="üìä Exportar Relat√≥rio",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=45,
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            command=self.exportar_relatorio_certificados
        )
        btn_exportar_relatorio.pack(side="left")
        
        # Tabela de resumo
        self.create_relatorio_certificados_table(main_frame)
    
    def obter_estatisticas_certificados(self):
        """Obter estat√≠sticas gerais de certificados"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Estat√≠sticas de est√°gios obrigat√≥rios
            cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'Completo' OR carga_horaria = 0 OR carga_horaria = 0 THEN 1 ELSE 0 END) as completos,
                    SUM(CASE WHEN status != 'Completo' AND carga_horaria > 0 AND carga_horaria > 0 THEN 1 ELSE 0 END) as pendentes
                FROM estagio_obrigatorio
            """)
            stats_obrig = cursor.fetchone()
            
            # Estat√≠sticas de est√°gios n√£o obrigat√≥rios
            cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'Completo' OR carga_horaria = 0 OR carga_horaria = 0 THEN 1 ELSE 0 END) as completos,
                    SUM(CASE WHEN status != 'Completo' AND carga_horaria > 0 AND carga_horaria > 0 THEN 1 ELSE 0 END) as pendentes
                FROM estagio_nao_obrigatorio
            """)
            stats_nao_obrig = cursor.fetchone()
            
            conn.close()
            
            return {
                'obrigatorios': {
                    'total': stats_obrig[0] or 0,
                    'completos': stats_obrig[1] or 0,
                    'pendentes': stats_obrig[2] or 0
                },
                'nao_obrigatorios': {
                    'total': stats_nao_obrig[0] or 0,
                    'completos': stats_nao_obrig[1] or 0,
                    'pendentes': stats_nao_obrig[2] or 0
                }
            }
            
        except Exception as e:
            print(f"Erro ao obter estat√≠sticas: {e}")
            return {
                'obrigatorios': {'total': 0, 'completos': 0, 'pendentes': 0},
                'nao_obrigatorios': {'total': 0, 'completos': 0, 'pendentes': 0}
            }
    
    def create_statistics_cards(self, parent, stats):
        """Criar cards de estat√≠sticas"""
        # Frame para cards
        cards_frame = ctk.CTkFrame(parent, fg_color="transparent")
        cards_frame.pack(fill="x", pady=10)
        
        # Card Est√°gios Obrigat√≥rios
        card_obrig = ctk.CTkFrame(cards_frame, fg_color=self.cor_azul, corner_radius=15)
        card_obrig.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        obrig_title = ctk.CTkLabel(
            card_obrig,
            text="üìã Est√°gios Obrigat√≥rios",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_branco
        )
        obrig_title.pack(pady=(15, 5))
        
        obrig_stats = ctk.CTkLabel(
            card_obrig,
            text=f"Total: {stats['obrigatorios']['total']}\nCompletos: {stats['obrigatorios']['completos']}\nPendentes: {stats['obrigatorios']['pendentes']}",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco,
            justify="center"
        )
        obrig_stats.pack(pady=(0, 15))
        
        # Card Est√°gios N√£o Obrigat√≥rios
        card_nao_obrig = ctk.CTkFrame(cards_frame, fg_color=self.cor_verde, corner_radius=15)
        card_nao_obrig.pack(side="left", fill="x", expand=True, padx=(10, 0))
        
        nao_obrig_title = ctk.CTkLabel(
            card_nao_obrig,
            text="üìù Est√°gios N√£o Obrigat√≥rios",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_branco
        )
        nao_obrig_title.pack(pady=(15, 5))
        
        nao_obrig_stats = ctk.CTkLabel(
            card_nao_obrig,
            text=f"Total: {stats['nao_obrigatorios']['total']}\nCompletos: {stats['nao_obrigatorios']['completos']}\nPendentes: {stats['nao_obrigatorios']['pendentes']}",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco,
            justify="center"
        )
        nao_obrig_stats.pack(pady=(0, 15))
    
    def create_relatorio_certificados_table(self, parent):
        """Criar tabela de relat√≥rio de certificados"""
        # Frame da tabela
        table_frame = ctk.CTkFrame(parent, fg_color=self.cor_branco)
        table_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo da tabela
        table_title = ctk.CTkLabel(
            table_frame,
            text="üìã Resumo por Orientador",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_primaria
        )
        table_title.pack(pady=(20, 10))
        
        # Criar Treeview
        columns = ("Orientador", "Obrigat√≥rios Completos", "N√£o Obrigat√≥rios Completos", "Total Completos")
        self.relatorio_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # Configurar colunas
        for col in columns:
            self.relatorio_tree.heading(col, text=col)
            self.relatorio_tree.column(col, width=200, anchor="center")
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.relatorio_tree.yview)
        self.relatorio_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack
        self.relatorio_tree.pack(side="left", fill="both", expand=True, padx=(20, 0), pady=20)
        scrollbar.pack(side="right", fill="y", padx=(0, 20), pady=20)
        
        # Carregar dados
        self.carregar_relatorio_certificados()
    
    def carregar_relatorio_certificados(self):
        """Carregar dados do relat√≥rio de certificados"""
        try:
            # Limpar dados existentes
            for item in self.relatorio_tree.get_children():
                self.relatorio_tree.delete(item)
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar orientadores e seus certificados
            cursor.execute("""
                SELECT 
                    o.nome,
                    o.id,
                    COUNT(CASE WHEN eo.status = 'Completo' OR eo.carga_horaria = 0 OR eo.carga_horaria = 0 THEN 1 END) as obrig_completos,
                    COUNT(CASE WHEN eno.status = 'Completo' OR eno.carga_horaria = 0 OR eno.carga_horaria = 0 THEN 1 END) as nao_obrig_completos
                FROM orientadores o
                LEFT JOIN estagio_obrigatorio eo ON o.id = eo.orientador_id
                LEFT JOIN estagio_nao_obrigatorio eno ON o.id = eno.orientador_id
                GROUP BY o.id, o.nome
                ORDER BY o.nome
            """)
            
            orientadores = cursor.fetchall()
            
            for orientador in orientadores:
                nome = orientador[0]
                obrig_completos = orientador[2] or 0
                nao_obrig_completos = orientador[3] or 0
                total_completos = obrig_completos + nao_obrig_completos
                
                self.relatorio_tree.insert("", "end", values=(
                    nome,
                    obrig_completos,
                    nao_obrig_completos,
                    total_completos
                ))
            
            conn.close()
            
        except Exception as e:
            print(f"Erro ao carregar relat√≥rio: {e}")
    
    def gerar_todos_certificados_pendentes(self):
        """Gerar todos os certificados pendentes"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar est√°gios obrigat√≥rios completos
            cursor.execute("""
                SELECT estudante_id FROM estagio_obrigatorio 
                WHERE status = 'Completo' OR carga_horaria = 0 OR carga_horaria = 0
            """)
            obrigatorios = cursor.fetchall()
            
            # Buscar est√°gios n√£o obrigat√≥rios completos
            cursor.execute("""
                SELECT estudante_id FROM estagio_nao_obrigatorio 
                WHERE status = 'Completo' OR carga_horaria = 0 OR carga_horaria = 0
            """)
            nao_obrigatorios = cursor.fetchall()
            
            conn.close()
            
            total_gerados = 0
            
            # Gerar certificados obrigat√≥rios
            for (estudante_id,) in obrigatorios:
                try:
                    self.gerar_certificado_com_modelo(estudante_id, "obrigatorio")
                    total_gerados += 1
                except Exception as e:
                    print(f"Erro ao gerar certificado obrigat√≥rio para estudante {estudante_id}: {e}")
            
            # Gerar certificados n√£o obrigat√≥rios
            for (estudante_id,) in nao_obrigatorios:
                try:
                    self.gerar_certificado_com_modelo(estudante_id, "nao_obrigatorio")
                    total_gerados += 1
                except Exception as e:
                    print(f"Erro ao gerar certificado n√£o obrigat√≥rio para estudante {estudante_id}: {e}")
            
            self.show_message("Sucesso", f"Certificados gerados com sucesso!\nTotal: {total_gerados} certificados")
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao gerar certificados: {e}")
    
    def exportar_relatorio_certificados(self):
        """Exportar relat√≥rio de certificados para arquivo"""
        try:
            from tkinter import filedialog
            import csv
            
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                title="Salvar Relat√≥rio de Certificados"
            )
            
            if not filename:
                return
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar dados completos
            cursor.execute("""
                SELECT 
                    o.nome as orientador,
                    e.nome as estudante,
                    eo.empresa as empresa_obrig,
                    eno.empresa as empresa_nao_obrig,
                    CASE 
                        WHEN eo.status = 'Completo' OR eo.carga_horaria = 0 OR eo.carga_horaria = 0 THEN 'Obrigat√≥rio'
                        WHEN eno.status = 'Completo' OR eno.carga_horaria = 0 OR eno.carga_horaria = 0 THEN 'N√£o Obrigat√≥rio'
                        ELSE 'Pendente'
                    END as tipo_certificado,
                    CASE 
                        WHEN eo.status = 'Completo' OR eo.carga_horaria = 0 OR eo.carga_horaria = 0 THEN eo.carga_horaria
                        WHEN eno.status = 'Completo' OR eno.carga_horaria = 0 OR eno.carga_horaria = 0 THEN eno.carga_horaria
                        ELSE 0
                    END as carga_horaria
                FROM orientadores o
                LEFT JOIN estagio_obrigatorio eo ON o.id = eo.orientador_id
                LEFT JOIN estagio_nao_obrigatorio eno ON o.id = eno.orientador_id
                LEFT JOIN estudantes e ON (eo.estudante_id = e.id OR eno.estudante_id = e.id)
                WHERE (eo.status = 'Completo' OR eo.carga_horaria = 0 OR eo.carga_horaria = 0) 
                   OR (eno.status = 'Completo' OR eno.carga_horaria = 0 OR eno.carga_horaria = 0)
                ORDER BY o.nome, e.nome
            """)
            
            dados = cursor.fetchall()
            conn.close()
            
            # Escrever CSV
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Orientador', 'Estudante', 'Empresa', 'Tipo de Certificado', 'Carga Hor√°ria'])
                
                for linha in dados:
                    empresa = linha[2] if linha[2] else linha[3]
                    writer.writerow([linha[0], linha[1], empresa, linha[4], linha[5]])
            
            self.show_message("Sucesso", f"Relat√≥rio exportado com sucesso!\nArquivo: {filename}")
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao exportar relat√≥rio: {e}")
    
    # === M√âTODOS PARA RELAT√ìRIOS SEMESTRAIS ===
    
    def create_relatorio_semestral_obrigatorio_table(self, parent):
        """Criar tabela para relat√≥rio semestral obrigat√≥rio"""
        try:
            # Frame para a tabela
            table_frame = ctk.CTkFrame(parent, fg_color="transparent")
            table_frame.pack(fill="both", expand=True, pady=20)
            
            # Configurar estilo da tabela
            style = ttk.Style()
            style.theme_use("clam")
            style.configure("Treeview",
                           background=self.cor_branco,
                           foreground=self.cor_texto,
                           fieldbackground=self.cor_branco,
                           font=('Arial', 10))
            style.configure("Treeview.Heading",
                           background=self.cor_primaria,
                           foreground=self.cor_branco,
                           font=('Arial', 11, 'bold'))
            
            # Colunas da tabela
            columns = ('ID', 'Estudante', 'Empresa', 'Data In√≠cio', 'Data T√©rmino', 'CH Total', 'Status')
            self.tree_semestral_obrig = ttk.Treeview(table_frame, columns=columns, show='headings', height=12)
            
            # Configurar cabe√ßalhos
            for col in columns:
                self.tree_semestral_obrig.heading(col, text=col)
                self.tree_semestral_obrig.column(col, width=120, anchor='center')
            
            # Scrollbars
            scrollbar_v = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_semestral_obrig.yview)
            scrollbar_h = ttk.Scrollbar(table_frame, orient="horizontal", command=self.tree_semestral_obrig.xview)
            self.tree_semestral_obrig.configure(yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)
            
            # Pack da tabela e scrollbars
            self.tree_semestral_obrig.pack(side="left", fill="both", expand=True)
            scrollbar_v.pack(side="right", fill="y")
            scrollbar_h.pack(side="bottom", fill="x")
            
        except Exception as e:
            print(f"Erro ao criar tabela semestral obrigat√≥rio: {e}")
    
    def atualizar_relatorio_semestral_obrigatorio(self, event=None):
        """Atualizar dados do relat√≥rio semestral obrigat√≥rio"""
        try:
            if not hasattr(self, 'tree_semestral_obrig'):
                return
                
            # Limpar tabela
            for item in self.tree_semestral_obrig.get_children():
                self.tree_semestral_obrig.delete(item)
            
            # Obter filtros
            semestre = self.semestre_combo.get() if hasattr(self, 'semestre_combo') else "1¬∫ Semestre (Jan-Jun)"
            ano = self.ano_combo.get() if hasattr(self, 'ano_combo') else str(datetime.now().year)
            
            # Definir per√≠odo baseado na sele√ß√£o
            if "1¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-06-30"
            elif "2¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-07-01"
                data_fim = f"{ano}-12-31"
            else:  # Ano Completo
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-12-31"
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar dados do per√≠odo
            cursor.execute("""
                SELECT 
                    eo.id,
                    e.nome as estudante,
                    emp.nome as empresa,
                    eo.data_inicio,
                    eo.data_termino,
                    eo.carga_horaria,
                    eo.status
                FROM estagio_obrigatorio eo
                JOIN estudantes e ON eo.estudante_id = e.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.data_inicio >= ? AND eo.data_inicio <= ?
                ORDER BY e.nome
            """, (data_inicio, data_fim))
            
            dados = cursor.fetchall()
            conn.close()
            
            # Inserir dados na tabela
            for linha in dados:
                self.tree_semestral_obrig.insert('', 'end', values=linha)
                
        except Exception as e:
            print(f"Erro ao atualizar relat√≥rio semestral obrigat√≥rio: {e}")
    
    def exportar_relatorio_semestral_obrigatorio(self):
        """Exportar relat√≥rio semestral obrigat√≥rio para CSV"""
        try:
            from tkinter import filedialog
            import csv
            
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                title="Salvar Relat√≥rio Semestral Obrigat√≥rio"
            )
            
            if not filename:
                return
            
            # Obter dados da tabela
            dados = []
            if hasattr(self, 'tree_semestral_obrig'):
                for child in self.tree_semestral_obrig.get_children():
                    dados.append(self.tree_semestral_obrig.item(child)['values'])
            
            # Escrever CSV
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['ID', 'Estudante', 'Empresa', 'Data In√≠cio', 'Data T√©rmino', 'CH Total', 'Status'])
                writer.writerows(dados)
            
            self.show_message("Sucesso", f"Relat√≥rio exportado com sucesso!\nArquivo: {filename}")
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao exportar relat√≥rio: {e}")
    
    def create_relatorio_semestral_nao_obrigatorio_table(self, parent):
        """Criar tabela para relat√≥rio semestral n√£o obrigat√≥rio"""
        try:
            # Frame para a tabela
            table_frame = ctk.CTkFrame(parent, fg_color="transparent")
            table_frame.pack(fill="both", expand=True, pady=20)
            
            # Configurar estilo da tabela
            style = ttk.Style()
            style.theme_use("clam")
            style.configure("Treeview",
                           background=self.cor_branco,
                           foreground=self.cor_texto,
                           fieldbackground=self.cor_branco,
                           font=('Arial', 10))
            style.configure("Treeview.Heading",
                           background=self.cor_verde,
                           foreground=self.cor_branco,
                           font=('Arial', 11, 'bold'))
            
            # Colunas da tabela
            columns = ('ID', 'Estudante', 'Empresa', 'Data In√≠cio', 'Data T√©rmino', 'CH Total', 'Status')
            self.tree_semestral_nao_obrig = ttk.Treeview(table_frame, columns=columns, show='headings', height=12)
            
            # Configurar cabe√ßalhos
            for col in columns:
                self.tree_semestral_nao_obrig.heading(col, text=col)
                self.tree_semestral_nao_obrig.column(col, width=120, anchor='center')
            
            # Scrollbars
            scrollbar_v = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_semestral_nao_obrig.yview)
            scrollbar_h = ttk.Scrollbar(table_frame, orient="horizontal", command=self.tree_semestral_nao_obrig.xview)
            self.tree_semestral_nao_obrig.configure(yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)
            
            # Pack da tabela e scrollbars
            self.tree_semestral_nao_obrig.pack(side="left", fill="both", expand=True)
            scrollbar_v.pack(side="right", fill="y")
            scrollbar_h.pack(side="bottom", fill="x")
            
        except Exception as e:
            print(f"Erro ao criar tabela semestral n√£o obrigat√≥rio: {e}")
    
    def atualizar_relatorio_semestral_nao_obrigatorio(self, event=None):
        """Atualizar dados do relat√≥rio semestral n√£o obrigat√≥rio"""
        try:
            if not hasattr(self, 'tree_semestral_nao_obrig'):
                return
                
            # Limpar tabela
            for item in self.tree_semestral_nao_obrig.get_children():
                self.tree_semestral_nao_obrig.delete(item)
            
            # Obter filtros
            semestre = self.semestre_nao_obrig_combo.get() if hasattr(self, 'semestre_nao_obrig_combo') else "1¬∫ Semestre (Jan-Jun)"
            ano = self.ano_nao_obrig_combo.get() if hasattr(self, 'ano_nao_obrig_combo') else str(datetime.now().year)
            
            # Definir per√≠odo baseado na sele√ß√£o
            if "1¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-06-30"
            elif "2¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-07-01"
                data_fim = f"{ano}-12-31"
            else:  # Ano Completo
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-12-31"
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar dados do per√≠odo
            cursor.execute("""
                SELECT 
                    eno.id,
                    e.nome as estudante,
                    emp.nome as empresa,
                    eno.data_inicio,
                    eno.data_termino,
                    eno.carga_horaria,
                    eno.status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes e ON eno.estudante_id = e.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                WHERE eno.data_inicio >= ? AND eno.data_inicio <= ?
                ORDER BY e.nome
            """, (data_inicio, data_fim))
            
            dados = cursor.fetchall()
            conn.close()
            
            # Inserir dados na tabela
            for linha in dados:
                self.tree_semestral_nao_obrig.insert('', 'end', values=linha)
                
        except Exception as e:
            print(f"Erro ao atualizar relat√≥rio semestral n√£o obrigat√≥rio: {e}")
    
    def exportar_relatorio_semestral_nao_obrigatorio(self):
        """Exportar relat√≥rio semestral n√£o obrigat√≥rio para CSV"""
        try:
            from tkinter import filedialog
            import csv
            
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                title="Salvar Relat√≥rio Semestral N√£o Obrigat√≥rio"
            )
            
            if not filename:
                return
            
            # Obter dados da tabela
            dados = []
            if hasattr(self, 'tree_semestral_nao_obrig'):
                for child in self.tree_semestral_nao_obrig.get_children():
                    dados.append(self.tree_semestral_nao_obrig.item(child)['values'])
            
            # Escrever CSV
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['ID', 'Estudante', 'Empresa', 'Data In√≠cio', 'Data T√©rmino', 'CH Total', 'Status'])
                writer.writerows(dados)
            
            self.show_message("Sucesso", f"Relat√≥rio exportado com sucesso!\nArquivo: {filename}")
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao exportar relat√≥rio: {e}")
    
    def create_relatorio_professores_table(self, parent):
        """Criar tabela para relat√≥rio de professores"""
        try:
            # Frame para a tabela
            table_frame = ctk.CTkFrame(parent, fg_color="transparent")
            table_frame.pack(fill="both", expand=True, pady=20)
            
            # Configurar estilo da tabela
            style = ttk.Style()
            style.theme_use("clam")
            style.configure("Treeview",
                           background=self.cor_branco,
                           foreground=self.cor_texto,
                           fieldbackground=self.cor_branco,
                           font=('Arial', 10))
            style.configure("Treeview.Heading",
                           background="#FF9800",
                           foreground=self.cor_branco,
                           font=('Arial', 11, 'bold'))
            
            # Colunas da tabela
            columns = ('ID', 'Nome', 'SIAPE', 'Departamento', 'Total Orienta√ß√µes', 'Obrigat√≥rios', 'N√£o Obrigat√≥rios')
            self.tree_professores = ttk.Treeview(table_frame, columns=columns, show='headings', height=12)
            
            # Configurar cabe√ßalhos
            for col in columns:
                self.tree_professores.heading(col, text=col)
                self.tree_professores.column(col, width=120, anchor='center')
            
            # Scrollbars
            scrollbar_v = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_professores.yview)
            scrollbar_h = ttk.Scrollbar(table_frame, orient="horizontal", command=self.tree_professores.xview)
            self.tree_professores.configure(yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)
            
            # Pack da tabela e scrollbars
            self.tree_professores.pack(side="left", fill="both", expand=True)
            scrollbar_v.pack(side="right", fill="y")
            scrollbar_h.pack(side="bottom", fill="x")
            
        except Exception as e:
            print(f"Erro ao criar tabela de professores: {e}")
    
    def carregar_relatorio_professores(self):
        """Carregar dados do relat√≥rio de professores"""
        try:
            if not hasattr(self, 'tree_professores'):
                return
                
            # Limpar tabela
            for item in self.tree_professores.get_children():
                self.tree_professores.delete(item)
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar dados dos professores com contagem de orienta√ß√µes
            cursor.execute("""
                SELECT 
                    o.id,
                    o.nome,
                    o.siape,
                    o.departamento,
                    COALESCE(obrig.total, 0) + COALESCE(nao_obrig.total, 0) as total_orientacoes,
                    COALESCE(obrig.total, 0) as estagios_obrigatorios,
                    COALESCE(nao_obrig.total, 0) as estagios_nao_obrigatorios
                FROM orientadores o
                LEFT JOIN (
                    SELECT orientador_id, COUNT(*) as total 
                    FROM estagio_obrigatorio 
                    GROUP BY orientador_id
                ) obrig ON o.id = obrig.orientador_id
                LEFT JOIN (
                    SELECT orientador_id, COUNT(*) as total 
                    FROM estagio_nao_obrigatorio 
                    GROUP BY orientador_id
                ) nao_obrig ON o.id = nao_obrig.orientador_id
                WHERE o.status = 'Aprovado'
                ORDER BY total_orientacoes DESC, o.nome
            """)
            
            dados = cursor.fetchall()
            conn.close()
            
            # Inserir dados na tabela
            for linha in dados:
                self.tree_professores.insert('', 'end', values=linha)
                
        except Exception as e:
            print(f"Erro ao carregar relat√≥rio de professores: {e}")
    
    def create_relatorio_estudantes_orientador_table(self, parent):
        """Criar tabela para relat√≥rio de estudantes por orientador"""
        try:
            # Frame para a tabela
            table_frame = ctk.CTkFrame(parent, fg_color="transparent")
            table_frame.pack(fill="both", expand=True, pady=20)
            
            # Configurar estilo da tabela
            style = ttk.Style()
            style.theme_use("clam")
            style.configure("Treeview",
                           background=self.cor_branco,
                           foreground=self.cor_texto,
                           fieldbackground=self.cor_branco,
                           font=('Arial', 10))
            style.configure("Treeview.Heading",
                           background="#4CAF50",
                           foreground=self.cor_branco,
                           font=('Arial', 11, 'bold'))
            
            # Colunas da tabela
            columns = ('Estudante', 'Matr√≠cula', 'Empresa', 'Tipo Est√°gio', 'Data In√≠cio', 'Status')
            self.tree_estudantes_orientador = ttk.Treeview(table_frame, columns=columns, show='headings', height=12)
            
            # Configurar cabe√ßalhos
            for col in columns:
                self.tree_estudantes_orientador.heading(col, text=col)
                self.tree_estudantes_orientador.column(col, width=120, anchor='center')
            
            # Scrollbars
            scrollbar_v = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_estudantes_orientador.yview)
            scrollbar_h = ttk.Scrollbar(table_frame, orient="horizontal", command=self.tree_estudantes_orientador.xview)
            self.tree_estudantes_orientador.configure(yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)
            
            # Pack da tabela e scrollbars
            self.tree_estudantes_orientador.pack(side="left", fill="both", expand=True)
            scrollbar_v.pack(side="right", fill="y")
            scrollbar_h.pack(side="bottom", fill="x")
            
        except Exception as e:
            print(f"Erro ao criar tabela de estudantes por orientador: {e}")
    
    def carregar_orientadores_combo(self):
        """Carregar orientadores no combobox"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("SELECT id, nome FROM orientadores WHERE status = 'Aprovado' ORDER BY nome")
            orientadores = cursor.fetchall()
            conn.close()
            
            # Atualizar combobox se existir
            if hasattr(self, 'orientador_combo'):
                valores = [f"{o[1]} (ID: {o[0]})" for o in orientadores]
                self.orientador_combo.configure(values=valores)
                if valores:
                    self.orientador_combo.set(valores[0])
                    
        except Exception as e:
            print(f"Erro ao carregar orientadores: {e}")
    
    def atualizar_relatorio_estudantes_orientador(self, event=None):
        """Atualizar relat√≥rio de estudantes por orientador"""
        try:
            if not hasattr(self, 'tree_estudantes_orientador'):
                return
                
            # Limpar tabela
            for item in self.tree_estudantes_orientador.get_children():
                self.tree_estudantes_orientador.delete(item)
            
            # Obter orientador selecionado
            if not hasattr(self, 'orientador_combo'):
                return
                
            orientador_selecionado = self.orientador_combo.get()
            if not orientador_selecionado:
                return
                
            # Extrair ID do orientador
            orientador_id = orientador_selecionado.split("(ID: ")[1].split(")")[0]
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar est√°gios obrigat√≥rios
            cursor.execute("""
                SELECT 
                    e.nome,
                    e.matricula,
                    emp.nome as empresa,
                    'Obrigat√≥rio' as tipo,
                    eo.data_inicio,
                    eo.status
                FROM estagio_obrigatorio eo
                JOIN estudantes e ON eo.estudante_id = e.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.orientador_id = ?
                
                UNION ALL
                
                SELECT 
                    e.nome,
                    e.matricula,
                    emp.nome as empresa,
                    'N√£o Obrigat√≥rio' as tipo,
                    eno.data_inicio,
                    eno.status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes e ON eno.estudante_id = e.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                WHERE eno.orientador_id = ?
                
                ORDER BY data_inicio DESC
            """, (orientador_id, orientador_id))
            
            dados = cursor.fetchall()
            conn.close()
            
            # Inserir dados na tabela
            for linha in dados:
                self.tree_estudantes_orientador.insert('', 'end', values=linha)
                
        except Exception as e:
            print(f"Erro ao atualizar relat√≥rio de estudantes por orientador: {e}")
    
    def exportar_relatorio_estudantes_orientador(self):
        """Exportar relat√≥rio de estudantes por orientador para CSV"""
        try:
            from tkinter import filedialog
            import csv
            
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                title="Salvar Relat√≥rio de Estudantes por Orientador"
            )
            
            if not filename:
                return
            
            # Obter dados da tabela
            dados = []
            if hasattr(self, 'tree_estudantes_orientador'):
                for child in self.tree_estudantes_orientador.get_children():
                    dados.append(self.tree_estudantes_orientador.item(child)['values'])
            
            # Escrever CSV
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Estudante', 'Matr√≠cula', 'Empresa', 'Tipo Est√°gio', 'Data In√≠cio', 'Status'])
                writer.writerows(dados)
            
            self.show_message("Sucesso", f"Relat√≥rio exportado com sucesso!\nArquivo: {filename}")
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao exportar relat√≥rio: {e}")
    
    def exportar_relatorio_geral_estatisticas(self):
        """Exportar relat√≥rio geral de estat√≠sticas para CSV"""
        try:
            from tkinter import filedialog
            import csv
            
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".csv",
                filetypes=[("CSV files", "*.csv"), ("All files", "*.*")],
                title="Salvar Relat√≥rio Geral de Estat√≠sticas"
            )
            
            if not filename:
                return
            
            # Obter estat√≠sticas gerais
            stats = self.obter_estatisticas_gerais()
            
            # Escrever CSV
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['M√©trica', 'Valor'])
                
                writer.writerow(['Total de Estudantes', stats.get('total_estudantes', 0)])
                writer.writerow(['Total de Orientadores', stats.get('total_orientadores', 0)])
                writer.writerow(['Total de Empresas', stats.get('total_empresas', 0)])
                writer.writerow(['Total de Est√°gios Obrigat√≥rios', stats.get('total_estagios_obrig', 0)])
                writer.writerow(['Total de Est√°gios N√£o Obrigat√≥rios', stats.get('total_estagios_nao_obrig', 0)])
                writer.writerow(['Est√°gios Conclu√≠dos', stats.get('estagios_concluidos', 0)])
                writer.writerow(['Est√°gios em Andamento', stats.get('estagios_andamento', 0)])
                writer.writerow(['Carga Hor√°ria Total', stats.get('carga_total', 0)])
            
            self.show_message("Sucesso", f"Relat√≥rio exportado com sucesso!\nArquivo: {filename}")
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao exportar relat√≥rio: {e}")
        
    def show_configuracoes(self):
        """Mostrar tela de configura√ß√µes do sistema"""
        self.clear_content()
        self.page_title.configure(text="‚öôÔ∏è Configura√ß√µes do Sistema")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # === SE√á√ÉO: COORDENADOR DE EST√ÅGIO ===
        coordenador_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=15)
        coordenador_frame.pack(fill="x", pady=20)
        
        # T√≠tulo da se√ß√£o
        ctk.CTkLabel(
            coordenador_frame,
            text="üë®‚Äçüè´ COORDENADOR DE EST√ÅGIO",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(20, 10))
        
        # Informa√ß√£o sobre o uso
        info_label = ctk.CTkLabel(
            coordenador_frame,
            text="Configure o nome do Coordenador de Est√°gio que aparecer√° nos certificados e documentos emitidos pelo sistema.",
            font=ctk.CTkFont(size=12),
            text_color="#666666",
            wraplength=600
        )
        info_label.pack(pady=(0, 20))
        
        # Frame para os campos
        campos_frame = ctk.CTkFrame(coordenador_frame, fg_color="transparent")
        campos_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Coordenador para Ci√™ncias Cont√°beis
        ctk.CTkLabel(
            campos_frame,
            text="Coordenador de Est√°gio - Ci√™ncias Cont√°beis:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="#333333"
        ).pack(anchor="w", pady=(0, 5))
        
        self.coordenador_contabeis_entry = ctk.CTkEntry(
            campos_frame,
            placeholder_text="Digite o nome do coordenador...",
            width=400,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.coordenador_contabeis_entry.pack(anchor="w", pady=(0, 20))
        
        # Bot√µes de a√ß√£o
        botoes_frame = ctk.CTkFrame(coordenador_frame, fg_color="transparent")
        botoes_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Bot√£o salvar
        btn_salvar = ctk.CTkButton(
            botoes_frame,
            text="üíæ Salvar Configura√ß√£o",
            font=ctk.CTkFont(size=14, weight="bold"),
            width=200,
            height=45,
            fg_color="#4CAF50",
            hover_color="#45A049",
            command=self.salvar_coordenador_estagio
        )
        btn_salvar.pack(side="left", padx=(0, 10))
        
        # Bot√£o limpar
        btn_limpar = ctk.CTkButton(
            botoes_frame,
            text="üóëÔ∏è Limpar",
            font=ctk.CTkFont(size=14, weight="bold"),
            width=120,
            height=45,
            fg_color="#6c757d",
            hover_color="#5a6268",
            command=self.limpar_campos_coordenador
        )
        btn_limpar.pack(side="left")
        
        # Carregar configura√ß√£o existente
        self.carregar_coordenador_estagio()
        
        # Frame de informa√ß√µes adicionais
        info_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=10)
        info_frame.pack(fill="x", pady=20)
        
        info_text = """
‚ÑπÔ∏è Informa√ß√µes sobre o Coordenador de Est√°gio:

‚Ä¢ O nome configurado aqui ser√° usado automaticamente em todos os certificados gerados pelo sistema
‚Ä¢ Aparecer√° como respons√°vel pela coordena√ß√£o dos est√°gios nos documentos oficiais
‚Ä¢ Certifique-se de que o nome est√° correto e completo antes de salvar
‚Ä¢ Esta configura√ß√£o √© aplicada globalmente para todos os certificados do curso de Ci√™ncias Cont√°beis
        """
        
        ctk.CTkLabel(
            info_frame,
            text=info_text,
            font=ctk.CTkFont(size=12),
            text_color="#666666",
            justify="left"
        ).pack(pady=20, padx=20)
    
    def salvar_coordenador_estagio(self):
        """Salvar configura√ß√£o do coordenador de est√°gio"""
        try:
            nome_coordenador = self.coordenador_contabeis_entry.get().strip()
            
            if not nome_coordenador:
                self.show_message("Erro", "Por favor, digite o nome do coordenador de est√°gio!")
                return
            
            # Salvar no banco de dados
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Inserir ou atualizar configura√ß√£o
            cursor.execute("""
                INSERT OR REPLACE INTO configuracoes (chave, valor, descricao, data_atualizacao)
                VALUES (?, ?, ?, ?)
            """, (
                'coordenador_estagio_contabeis',
                nome_coordenador,
                'Nome do Coordenador de Est√°gio - Ci√™ncias Cont√°beis',
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            ))
            
            conn.commit()
            conn.close()
            
            self.show_message("Sucesso", f"‚úÖ Coordenador de Est√°gio salvo com sucesso!\n\nNome: {nome_coordenador}")
            
        except Exception as e:
            self.show_message("Erro", f"‚ùå Erro ao salvar configura√ß√£o: {str(e)}")
    
    def carregar_coordenador_estagio(self):
        """Carregar configura√ß√£o do coordenador de est√°gio"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar configura√ß√£o existente
            cursor.execute("""
                SELECT valor FROM configuracoes 
                WHERE chave = 'coordenador_estagio_contabeis'
            """)
            
            result = cursor.fetchone()
            if result:
                nome_coordenador = result[0]
                self.coordenador_contabeis_entry.insert(0, nome_coordenador)
            
            conn.close()
            
        except Exception as e:
            print(f"Erro ao carregar coordenador: {e}")
    
    def limpar_campos_coordenador(self):
        """Limpar campos do coordenador"""
        self.coordenador_contabeis_entry.delete(0, "end")
    
    def obter_nome_coordenador_estagio(self):
        """Obter nome do coordenador de est√°gio para uso em certificados"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Primeiro, tentar buscar da tabela de orientadores (coordenador marcado)
            cursor.execute("""
                SELECT nome FROM orientadores 
                WHERE coordenador = 1 AND status = 'Aprovado'
                LIMIT 1
            """)
            
            result = cursor.fetchone()
            
            if result:
                conn.close()
                return result[0]
            
            # Se n√£o encontrar, buscar da tabela de configura√ß√µes (fallback)
            cursor.execute("""
                SELECT valor FROM configuracoes 
                WHERE chave = 'coordenador_estagio_contabeis'
            """)
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return result[0]
            else:
                return "Coordenador de Est√°gio - Ci√™ncias Cont√°beis"
                
        except Exception as e:
            print(f"Erro ao obter coordenador: {e}")
            return "Coordenador de Est√°gio - Ci√™ncias Cont√°beis"
    
    # =====================================================
    # M√âTODOS DO SISTEMA DE CONTROLE DE RELAT√ìRIOS
    # =====================================================
    
    def show_enviar_relatorio(self):
        """Mostrar tela para enviar relat√≥rio"""
        self.clear_content()
        self.page_title.configure(text="üì§ Enviar Relat√≥rio")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üì§ Enviar Relat√≥rio de Est√°gio",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 30))
        
        # Frame do formul√°rio
        form_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        form_frame.pack(fill="x", padx=50)
        
        # Sele√ß√£o do est√°gio
        estagio_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        estagio_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            estagio_frame,
            text="Selecione o Est√°gio:",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_primaria
        ).pack(anchor="w", pady=(0, 10))
        
        self.estagio_combo = ctk.CTkComboBox(
            estagio_frame,
            width=400,
            height=40,
            font=ctk.CTkFont(size=14),
            command=self.on_estagio_selected
        )
        self.estagio_combo.pack(anchor="w")
        
        # Carregar est√°gios do usu√°rio
        self.carregar_estagios_usuario()
        
        # Informa√ß√µes do est√°gio selecionado
        self.info_estagio_frame = ctk.CTkFrame(form_frame, fg_color=self.cor_terciaria, corner_radius=10)
        self.info_estagio_frame.pack(fill="x", pady=(0, 20))
        
        # Campos do relat√≥rio
        campos_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        campos_frame.pack(fill="x", pady=(0, 20))
        
        # Tipo do relat√≥rio
        tipo_frame = ctk.CTkFrame(campos_frame, fg_color="transparent")
        tipo_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            tipo_frame,
            text="Tipo do Relat√≥rio:",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_primaria
        ).pack(anchor="w", pady=(0, 10))
        
        self.tipo_relatorio_combo = ctk.CTkComboBox(
            tipo_frame,
            values=["INICIAL", "PARCIAL", "FINAL", "COMPLEMENTAR"],
            width=400,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.tipo_relatorio_combo.pack(anchor="w")
        
        # T√≠tulo do relat√≥rio
        titulo_frame = ctk.CTkFrame(campos_frame, fg_color="transparent")
        titulo_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            titulo_frame,
            text="T√≠tulo do Relat√≥rio:",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_primaria
        ).pack(anchor="w", pady=(0, 10))
        
        self.titulo_entry = ctk.CTkEntry(
            titulo_frame,
            width=400,
            height=40,
            font=ctk.CTkFont(size=14),
            placeholder_text="Digite o t√≠tulo do relat√≥rio..."
        )
        self.titulo_entry.pack(anchor="w")
        
        # Descri√ß√£o
        descricao_frame = ctk.CTkFrame(campos_frame, fg_color="transparent")
        descricao_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            descricao_frame,
            text="Descri√ß√£o:",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_primaria
        ).pack(anchor="w", pady=(0, 10))
        
        self.descricao_text = ctk.CTkTextbox(
            descricao_frame,
            width=400,
            height=100,
            font=ctk.CTkFont(size=14)
        )
        self.descricao_text.pack(anchor="w")
        
        # Upload de arquivo
        arquivo_frame = ctk.CTkFrame(campos_frame, fg_color="transparent")
        arquivo_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            arquivo_frame,
            text="Arquivo do Relat√≥rio:",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_primaria
        ).pack(anchor="w", pady=(0, 10))
        
        arquivo_buttons_frame = ctk.CTkFrame(arquivo_frame, fg_color="transparent")
        arquivo_buttons_frame.pack(fill="x")
        
        self.arquivo_path_label = ctk.CTkLabel(
            arquivo_buttons_frame,
            text="Nenhum arquivo selecionado",
            font=ctk.CTkFont(size=12),
            text_color="#666666"
        )
        self.arquivo_path_label.pack(side="left", padx=(0, 15))
        
        btn_selecionar_arquivo = ctk.CTkButton(
            arquivo_buttons_frame,
            text="üìÅ Selecionar Arquivo",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=35,
            width=150,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=self.selecionar_arquivo_relatorio
        )
        btn_selecionar_arquivo.pack(side="left")
        
        # Bot√µes de a√ß√£o
        buttons_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(20, 0))
        
        btn_enviar = ctk.CTkButton(
            buttons_frame,
            text="üì§ Enviar Relat√≥rio",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=200,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.enviar_relatorio
        )
        btn_enviar.pack(side="left", padx=(0, 15))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=150,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=lambda: self.show_relatorios()
        )
        btn_cancelar.pack(side="left")
    
    def carregar_estagios_usuario(self):
        """Carregar est√°gios do usu√°rio logado"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Obter ID do usu√°rio logado
            usuario_id = self.usuario_logado['id'] if self.usuario_logado else 0 if self.usuario_logado else None
            if not usuario_id:
                messagebox.showerror("Erro", "Usu√°rio n√£o identificado!")
                return
            
            # Buscar est√°gios do usu√°rio
            cursor.execute("""
                SELECT e.id, e.tipo, e.semestre, e.ano, est.nome, emp.nome
                FROM estagios e
                JOIN estudantes est ON e.estudante_id = est.id
                JOIN empresas emp ON e.empresa_id = emp.id
                WHERE e.estudante_id = ? AND e.status = 'ATIVO'
                ORDER BY e.ano DESC, e.semestre DESC
            """, (usuario_id,))
            
            estagios = cursor.fetchall()
            
            if not estagios:
                messagebox.showwarning("Aviso", "Nenhum est√°gio ativo encontrado!")
                return
            
            # Popular combo
            estagio_values = []
            for estagio in estagios:
                estagio_id, tipo, semestre, ano, estudante, empresa = estagio
                descricao = f"{tipo} - {ano}/{semestre} - {empresa}"
                estagio_values.append(descricao)
            
            self.estagio_combo.configure(values=estagio_values)
            if estagio_values:
                self.estagio_combo.set(estagio_values[0])
                self.on_estagio_selected(estagio_values[0])
            
            conn.close()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar est√°gios: {e}")
    
    def on_estagio_selected(self, selection):
        """Quando um est√°gio √© selecionado"""
        try:
            # Extrair ID do est√°gio da sele√ß√£o
            estagio_id = self.extrair_id_estagio(selection)
            if not estagio_id:
                return
            
            # Buscar informa√ß√µes do est√°gio
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT e.tipo, e.semestre, e.ano, e.data_inicio, e.data_fim,
                       est.nome, est.matricula, est.curso,
                       o.nome, o.siape, o.departamento,
                       emp.nome, emp.cnpj
                FROM estagios e
                JOIN estudantes est ON e.estudante_id = est.id
                JOIN orientadores o ON e.orientador_id = o.id
                JOIN empresas emp ON e.empresa_id = emp.id
                WHERE e.id = ?
            """, (estagio_id,))
            
            estagio_info = cursor.fetchone()
            conn.close()
            
            if estagio_info:
                self.mostrar_info_estagio(estagio_info)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar informa√ß√µes do est√°gio: {e}")
    
    def extrair_id_estagio(self, selection):
        """Extrair ID do est√°gio da sele√ß√£o"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar ID baseado na descri√ß√£o
            cursor.execute("""
                SELECT e.id
                FROM estagios e
                JOIN estudantes est ON e.estudante_id = est.id
                JOIN empresas emp ON e.empresa_id = emp.id
                WHERE e.estudante_id = ? AND e.status = 'ATIVO'
                ORDER BY e.ano DESC, e.semestre DESC
            """, (self.usuario_logado.get('id') if self.usuario_logado else 0,))
            
            estagios = cursor.fetchall()
            conn.close()
            
            # Retornar ID baseado na posi√ß√£o na lista
            if estagios:
                return estagios[0][0]
            
            return None
            
        except Exception as e:
            print(f"Erro ao extrair ID do est√°gio: {e}")
            return None
    
    def mostrar_info_estagio(self, estagio_info):
        """Mostrar informa√ß√µes do est√°gio selecionado"""
        # Limpar frame anterior
        for widget in self.info_estagio_frame.winfo_children():
            widget.destroy()
        
        tipo, semestre, ano, data_inicio, data_fim, estudante, matricula, curso, orientador, siape, departamento, empresa, cnpj = estagio_info
        
        info_text = f"""
üìã INFORMA√á√ïES DO EST√ÅGIO

üéì Estudante: {estudante} ({matricula})
üìö Curso: {curso}
üè¢ Empresa: {empresa}
üë®‚Äçüè´ Orientador: {orientador} ({siape})
üèõÔ∏è Departamento: {departamento}
üìÖ Per√≠odo: {ano}/{semestre} ({tipo})
üìÜ In√≠cio: {data_inicio or 'N√£o definido'}
üìÜ Fim: {data_fim or 'N√£o definido'}
        """
        
        info_label = ctk.CTkLabel(
            self.info_estagio_frame,
            text=info_text,
            font=ctk.CTkFont(size=12),
            text_color=self.cor_branco,
            justify="left"
        )
        info_label.pack(padx=20, pady=15)
    
    def selecionar_arquivo_relatorio(self):
        """Selecionar arquivo do relat√≥rio"""
        from tkinter import filedialog
        
        filetypes = [
            ("Documentos", "*.pdf *.doc *.docx"),
            ("PDF", "*.pdf"),
            ("Word", "*.doc *.docx"),
            ("Todos os arquivos", "*.*")
        ]
        
        filename = filedialog.askopenfilename(
            title="Selecionar Relat√≥rio",
            filetypes=filetypes
        )
        
        if filename:
            self.arquivo_path_label.configure(text=os.path.basename(filename))
            self.arquivo_selecionado = filename
    
    def enviar_relatorio(self):
        """Enviar relat√≥rio"""
        try:
            # Validar campos
            if not self.estagio_combo.get():
                messagebox.showerror("Erro", "Selecione um est√°gio!")
                return
            
            if not self.tipo_relatorio_combo.get():
                messagebox.showerror("Erro", "Selecione o tipo do relat√≥rio!")
                return
            
            if not self.titulo_entry.get().strip():
                messagebox.showerror("Erro", "Digite o t√≠tulo do relat√≥rio!")
                return
            
            if not hasattr(self, 'arquivo_selecionado') or not self.arquivo_selecionado:
                messagebox.showerror("Erro", "Selecione um arquivo!")
                return
            
            # Obter dados
            estagio_id = self.extrair_id_estagio(self.estagio_combo.get())
            tipo_relatorio = self.tipo_relatorio_combo.get()
            titulo = self.titulo_entry.get().strip()
            descricao = self.descricao_text.get("1.0", "end-1c").strip()
            arquivo_path = self.arquivo_selecionado
            
            # Obter informa√ß√µes do arquivo
            arquivo_nome = os.path.basename(arquivo_path)
            arquivo_tamanho = os.path.getsize(arquivo_path)
            
            # Salvar no banco
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO relatorios (
                    estagio_id, estudante_id, orientador_id, tipo_relatorio,
                    titulo, descricao, arquivo_path, arquivo_nome, arquivo_tamanho,
                    status, data_envio
                )
                SELECT 
                    ?, e.estudante_id, e.orientador_id, ?, ?, ?, ?, ?, ?,
                    'ENVIADO', CURRENT_TIMESTAMP
                FROM estagios e
                WHERE e.id = ?
            """, (estagio_id, tipo_relatorio, titulo, descricao, arquivo_path, 
                  arquivo_nome, arquivo_tamanho, estagio_id))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("Sucesso", "Relat√≥rio enviado com sucesso!")
            self.show_relatorios()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao enviar relat√≥rio: {e}")
    
    def show_meus_relatorios(self):
        """Mostrar meus relat√≥rios enviados"""
        self.clear_content()
        self.page_title.configure(text="üìã Meus Relat√≥rios")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üìã Meus Relat√≥rios Enviados",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 30))
        
        # Filtros
        filtros_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_terciaria, corner_radius=10)
        filtros_frame.pack(fill="x", pady=(0, 20))
        
        filtros_title = ctk.CTkLabel(
            filtros_frame,
            text="üîç Filtros",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_branco
        )
        filtros_title.pack(pady=(15, 10))
        
        filtros_content = ctk.CTkFrame(filtros_frame, fg_color="transparent")
        filtros_content.pack(fill="x", padx=20, pady=(0, 15))
        
        # Filtro por tipo
        ctk.CTkLabel(
            filtros_content,
            text="Tipo:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_branco
        ).pack(side="left", padx=(0, 10))
        
        self.filtro_tipo_combo = ctk.CTkComboBox(
            filtros_content,
            values=["Todos", "INICIAL", "PARCIAL", "FINAL", "COMPLEMENTAR"],
            width=150,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        self.filtro_tipo_combo.pack(side="left", padx=(0, 20))
        self.filtro_tipo_combo.set("Todos")
        
        # Filtro por status
        ctk.CTkLabel(
            filtros_content,
            text="Status:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_branco
        ).pack(side="left", padx=(0, 10))
        
        self.filtro_status_combo = ctk.CTkComboBox(
            filtros_content,
            values=["Todos", "ENVIADO", "RECEBIDO", "APROVADO", "REJEITADO", "PENDENTE_CORRECAO"],
            width=150,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        self.filtro_status_combo.pack(side="left", padx=(0, 20))
        self.filtro_status_combo.set("Todos")
        
        # Bot√£o filtrar
        btn_filtrar = ctk.CTkButton(
            filtros_content,
            text="üîç Filtrar",
            font=ctk.CTkFont(size=12, weight="bold"),
            height=35,
            width=100,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.filtrar_relatorios
        )
        btn_filtrar.pack(side="left")
        
        # Tabela de relat√≥rios
        self.criar_tabela_relatorios(main_frame)
        
        # Carregar relat√≥rios
        self.carregar_meus_relatorios()
    
    def criar_tabela_relatorios(self, parent):
        """Criar tabela de relat√≥rios"""
        # Frame da tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, pady=(0, 20))
        
        # Criar Treeview
        columns = ('ID', 'Tipo', 'T√≠tulo', 'Status', 'Data Envio', 'Nota', 'A√ß√µes')
        self.tree_relatorios = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_relatorios.heading('ID', text='ID')
        self.tree_relatorios.heading('Tipo', text='Tipo')
        self.tree_relatorios.heading('T√≠tulo', text='T√≠tulo')
        self.tree_relatorios.heading('Status', text='Status')
        self.tree_relatorios.heading('Data Envio', text='Data Envio')
        self.tree_relatorios.heading('Nota', text='Nota')
        self.tree_relatorios.heading('A√ß√µes', text='A√ß√µes')
        
        # Configurar larguras
        self.tree_relatorios.column('ID', width=50, anchor='center')
        self.tree_relatorios.column('Tipo', width=100, anchor='center')
        self.tree_relatorios.column('T√≠tulo', width=200, anchor='w')
        self.tree_relatorios.column('Status', width=120, anchor='center')
        self.tree_relatorios.column('Data Envio', width=120, anchor='center')
        self.tree_relatorios.column('Nota', width=80, anchor='center')
        self.tree_relatorios.column('A√ß√µes', width=100, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_relatorios.yview)
        self.tree_relatorios.configure(yscrollcommand=scrollbar.set)
        
        # Pack
        self.tree_relatorios.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def carregar_meus_relatorios(self):
        """Carregar relat√≥rios do usu√°rio"""
        try:
            # Limpar tabela
            for item in self.tree_relatorios.get_children():
                self.tree_relatorios.delete(item)
            
            # Obter filtros
            filtro_tipo = self.filtro_tipo_combo.get()
            filtro_status = self.filtro_status_combo.get()
            
            # Buscar relat√≥rios
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            query = """
                SELECT r.id, r.tipo_relatorio, r.titulo, r.status, 
                       r.data_envio, r.nota, r.observacoes_orientador
                FROM relatorios r
                WHERE r.estudante_id = ?
            """
            params = [self.usuario_logado.get('id') if self.usuario_logado else 0]
            
            if filtro_tipo != "Todos":
                query += " AND r.tipo_relatorio = ?"
                params.append(filtro_tipo)
            
            if filtro_status != "Todos":
                query += " AND r.status = ?"
                params.append(filtro_status)
            
            query += " ORDER BY r.data_envio DESC"
            
            cursor.execute(query, params)
            relatorios = cursor.fetchall()
            
            # Inserir na tabela
            for relatorio in relatorios:
                relatorio_id, tipo, titulo, status, data_envio, nota, observacoes = relatorio
                
                # Formatar data
                if data_envio:
                    data_formatada = datetime.strptime(data_envio, "%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")
                else:
                    data_formatada = "-"
                
                # Formatar nota
                nota_formatada = f"{nota:.1f}" if nota else "-"
                
                # Status com cor
                status_icon = {
                    'ENVIADO': 'üì§',
                    'RECEBIDO': 'üì•',
                    'APROVADO': '‚úÖ',
                    'REJEITADO': '‚ùå',
                    'PENDENTE_CORRECAO': '‚ö†Ô∏è'
                }.get(status, '‚ùì')
                
                status_display = f"{status_icon} {status}"
                
                self.tree_relatorios.insert('', 'end', values=(
                    relatorio_id, tipo, titulo, status_display, 
                    data_formatada, nota_formatada, "Ver"
                ))
            
            conn.close()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar relat√≥rios: {e}")
    
    def filtrar_relatorios(self):
        """Filtrar relat√≥rios"""
        self.carregar_meus_relatorios()
    
    def show_enviar_relatorio_pdf(self):
        """Mostrar tela para envio de relat√≥rios PDF"""
        self.clear_content()
        self.page_title.configure(text="üì§ Enviar Relat√≥rio PDF")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üì§ Enviar Relat√≥rio PDF",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 30))
        
        # Frame do formul√°rio
        form_frame = ctk.CTkFrame(main_frame, fg_color="#F8FAFC", corner_radius=15)
        form_frame.pack(fill="x", pady=(0, 20))
        
        # T√≠tulo do formul√°rio
        form_title = ctk.CTkLabel(
            form_frame,
            text="üìã Dados do Relat√≥rio",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_secundaria
        )
        form_title.pack(pady=(20, 15))
        
        # Sele√ß√£o de est√°gio
        estagio_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        estagio_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(
            estagio_frame,
            text="üéØ Est√°gio:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_secundaria
        ).pack(anchor="w")
        
        self.estagio_var = ctk.StringVar()
        self.estagio_combo = ctk.CTkComboBox(
            estagio_frame,
            variable=self.estagio_var,
            font=ctk.CTkFont(size=14),
            height=40,
            command=self.on_estagio_selected_pdf
        )
        self.estagio_combo.pack(fill="x", pady=(5, 0))
        
        # Informa√ß√µes do est√°gio selecionado
        self.info_estagio_frame = ctk.CTkFrame(form_frame, fg_color="#E3F2FD", corner_radius=10)
        self.info_estagio_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        self.info_estagio_label = ctk.CTkLabel(
            self.info_estagio_frame,
            text="Selecione um est√°gio para ver as informa√ß√µes",
            font=ctk.CTkFont(size=12),
            text_color="#1976D2"
        )
        self.info_estagio_label.pack(pady=10)
        
        # Tipo de relat√≥rio
        tipo_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        tipo_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(
            tipo_frame,
            text="üìÑ Tipo de Relat√≥rio:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_secundaria
        ).pack(anchor="w")
        
        self.tipo_relatorio_var = ctk.StringVar(value="PARCIAL")
        tipo_combo = ctk.CTkComboBox(
            tipo_frame,
            variable=self.tipo_relatorio_var,
            values=["INICIAL", "PARCIAL", "FINAL", "COMPLEMENTAR"],
            font=ctk.CTkFont(size=14),
            height=40
        )
        tipo_combo.pack(fill="x", pady=(5, 0))
        
        # T√≠tulo do relat√≥rio
        titulo_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        titulo_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(
            titulo_frame,
            text="üìù T√≠tulo do Relat√≥rio:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_secundaria
        ).pack(anchor="w")
        
        self.titulo_entry = ctk.CTkEntry(
            titulo_frame,
            placeholder_text="Ex: Relat√≥rio Parcial - Janeiro 2024",
            font=ctk.CTkFont(size=14),
            height=40
        )
        self.titulo_entry.pack(fill="x", pady=(5, 0))
        
        # Descri√ß√£o
        descricao_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        descricao_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(
            descricao_frame,
            text="üìã Descri√ß√£o:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_secundaria
        ).pack(anchor="w")
        
        self.descricao_text = ctk.CTkTextbox(
            descricao_frame,
            font=ctk.CTkFont(size=14),
            height=100
        )
        self.descricao_text.pack(fill="x", pady=(5, 0))
        
        # Upload de arquivo PDF
        arquivo_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        arquivo_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        ctk.CTkLabel(
            arquivo_frame,
            text="üìé Arquivo PDF:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_secundaria
        ).pack(anchor="w")
        
        arquivo_buttons_frame = ctk.CTkFrame(arquivo_frame, fg_color="transparent")
        arquivo_buttons_frame.pack(fill="x", pady=(5, 0))
        
        self.arquivo_label = ctk.CTkLabel(
            arquivo_buttons_frame,
            text="Nenhum arquivo selecionado",
            font=ctk.CTkFont(size=12),
            text_color="#6b7280"
        )
        self.arquivo_label.pack(side="left", padx=(0, 10))
        
        btn_selecionar_arquivo = ctk.CTkButton(
            arquivo_buttons_frame,
            text="üìÅ Selecionar PDF",
            font=ctk.CTkFont(size=12, weight="bold"),
            height=35,
            width=150,
            fg_color="#3b82f6",
            hover_color="#2563eb",
            command=self.selecionar_arquivo_pdf
        )
        btn_selecionar_arquivo.pack(side="left")
        
        # Bot√µes de a√ß√£o
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(0, 20))
        
        btn_enviar = ctk.CTkButton(
            buttons_frame,
            text="üì§ Enviar Relat√≥rio",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=200,
            fg_color="#10b981",
            hover_color="#059669",
            command=self.enviar_relatorio_pdf
        )
        btn_enviar.pack(side="left", padx=(0, 15))
        
        btn_voltar = ctk.CTkButton(
            buttons_frame,
            text="‚¨ÖÔ∏è Voltar",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=150,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=lambda: self.show_relatorios()
        )
        btn_voltar.pack(side="left")
        
        # Carregar est√°gios do usu√°rio
        self.carregar_estagios_usuario_pdf()
    
    def carregar_estagios_usuario_pdf(self):
        """Carregar est√°gios do usu√°rio logado para envio de PDF"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar est√°gios ativos do usu√°rio logado
            cursor.execute("""
                SELECT e.id, e.tipo, e.semestre, e.ano, e.data_inicio, e.data_fim,
                       est.nome as estudante_nome, est.matricula,
                       emp.nome as empresa_nome, o.nome as orientador_nome
                FROM estagios e
                LEFT JOIN estudantes est ON e.estudante_id = est.id
                LEFT JOIN empresas emp ON e.empresa_id = emp.id
                LEFT JOIN orientadores o ON e.orientador_id = o.id
                WHERE e.estudante_id = ? AND e.status = 'Ativo'
                ORDER BY e.data_inicio DESC
            """, (self.usuario_logado['id'] if self.usuario_logado else 0,))
            
            estagios = cursor.fetchall()
            conn.close()
            
            if estagios:
                # Formatar dados para o combobox
                estagios_formatados = []
                for estagio in estagios:
                    tipo_texto = "Obrigat√≥rio" if estagio[1] == "OBRIGATORIO" else "N√£o Obrigat√≥rio"
                    descricao = f"{tipo_texto} - {estagio[6]} ({estagio[7]}) - {estagio[8]}"
                    estagios_formatados.append(descricao)
                
                self.estagio_combo.configure(values=estagios_formatados)
                if estagios_formatados:
                    self.estagio_combo.set(estagios_formatados[0])
                    self.on_estagio_selected_pdf(estagios_formatados[0])
            else:
                self.estagio_combo.configure(values=["Nenhum est√°gio ativo encontrado"])
                self.estagio_combo.set("Nenhum est√°gio ativo encontrado")
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar est√°gios: {str(e)}")
    
    def on_estagio_selected_pdf(self, selection):
        """Atualizar informa√ß√µes do est√°gio selecionado"""
        if not selection or "Nenhum est√°gio" in selection:
            return
            
        try:
            # Extrair ID do est√°gio da sele√ß√£o
            estagio_id = self.extrair_id_estagio_pdf(selection)
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT e.tipo, e.semestre, e.ano, e.data_inicio, e.data_fim,
                       est.nome, est.matricula, est.curso,
                       emp.nome, emp.cnpj,
                       o.nome, o.siape
                FROM estagios e
                LEFT JOIN estudantes est ON e.estudante_id = est.id
                LEFT JOIN empresas emp ON e.empresa_id = emp.id
                LEFT JOIN orientadores o ON e.orientador_id = o.id
                WHERE e.id = ?
            """, (estagio_id,))
            
            estagio = cursor.fetchone()
            conn.close()
            
            if estagio:
                self.mostrar_info_estagio_pdf(estagio)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar informa√ß√µes do est√°gio: {str(e)}")
    
    def extrair_id_estagio_pdf(self, selection):
        """Extrair ID do est√°gio da string de sele√ß√£o"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar por matr√≠cula na string
            import re
            matricula_match = re.search(r'\((\d+)\)', selection)
            if matricula_match:
                matricula = matricula_match.group(1)
                
                cursor.execute("""
                    SELECT e.id FROM estagios e
                    LEFT JOIN estudantes est ON e.estudante_id = est.id
                    WHERE est.matricula = ? AND e.estudante_id = ?
                """, (matricula, self.usuario_logado['id'] if self.usuario_logado else 0))
                
                result = cursor.fetchone()
                conn.close()
                return result[0] if result else None
            
            conn.close()
            return None
            
        except Exception as e:
            return None
    
    def mostrar_info_estagio_pdf(self, estagio):
        """Mostrar informa√ß√µes detalhadas do est√°gio"""
        tipo_texto = "Obrigat√≥rio" if estagio[0] == "OBRIGATORIO" else "N√£o Obrigat√≥rio"
        
        info_text = f"""
üéØ {tipo_texto} - {estagio[5]}/{estagio[6]}
üë§ Estudante: {estagio[6]} ({estagio[7]})
üìö Curso: {estagio[8]}
üè¢ Empresa: {estagio[9]} (CNPJ: {estagio[10]})
üë®‚Äçüè´ Orientador: {estagio[11]} (SIAPE: {estagio[12]})
üìÖ Per√≠odo: {estagio[4]} a {estagio[5]}
        """.strip()
        
        self.info_estagio_label.configure(text=info_text)
    
    def selecionar_arquivo_pdf(self):
        """Selecionar arquivo PDF para upload"""
        from tkinter import filedialog
        
        file_path = filedialog.askopenfilename(
            title="Selecionar Relat√≥rio PDF",
            filetypes=[("Arquivos PDF", "*.pdf"), ("Todos os arquivos", "*.*")]
        )
        
        if file_path:
            import os
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            
            # Verificar se √© PDF
            if not file_name.lower().endswith('.pdf'):
                messagebox.showerror("Erro", "Por favor, selecione apenas arquivos PDF.")
                return
            
            # Verificar tamanho (m√°ximo 10MB)
            if file_size > 10 * 1024 * 1024:
                messagebox.showerror("Erro", "O arquivo deve ter no m√°ximo 10MB.")
                return
            
            self.arquivo_path = file_path
            self.arquivo_label.configure(text=f"üìé {file_name} ({file_size // 1024} KB)")
    
    def enviar_relatorio_pdf(self):
        """Enviar relat√≥rio PDF"""
        try:
            # Validar campos obrigat√≥rios
            if not hasattr(self, 'estagio_var') or not self.estagio_var.get():
                messagebox.showerror("Erro", "Selecione um est√°gio.")
                return
            
            if not self.titulo_entry.get().strip():
                messagebox.showerror("Erro", "Digite o t√≠tulo do relat√≥rio.")
                return
            
            if not hasattr(self, 'arquivo_path') or not self.arquivo_path:
                messagebox.showerror("Erro", "Selecione um arquivo PDF.")
                return
            
            # Extrair ID do est√°gio
            estagio_id = self.extrair_id_estagio_pdf(self.estagio_var.get())
            if not estagio_id:
                messagebox.showerror("Erro", "Erro ao identificar o est√°gio.")
                return
            
            # Obter informa√ß√µes do est√°gio
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT estudante_id, orientador_id FROM estagios WHERE id = ?
            """, (estagio_id,))
            
            estagio_info = cursor.fetchone()
            if not estagio_info:
                conn.close()
                messagebox.showerror("Erro", "Est√°gio n√£o encontrado.")
                return
            
            estudante_id, orientador_id = estagio_info
            
            # Preparar dados para inser√ß√£o
            import os
            file_name = os.path.basename(self.arquivo_path)
            file_size = os.path.getsize(self.arquivo_path)
            
            # Inserir relat√≥rio no banco
            cursor.execute("""
                INSERT INTO relatorios (
                    estagio_id, estudante_id, orientador_id, tipo_relatorio,
                    titulo, descricao, arquivo_path, arquivo_nome, arquivo_tamanho,
                    status, data_envio
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'ENVIADO', CURRENT_TIMESTAMP)
            """, (
                estagio_id, estudante_id, orientador_id, self.tipo_relatorio_var.get(),
                self.titulo_entry.get().strip(), self.descricao_text.get("1.0", "end-1c").strip(),
                self.arquivo_path, file_name, file_size
            ))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("Sucesso", "Relat√≥rio PDF enviado com sucesso!")
            
            # Limpar formul√°rio
            self.titulo_entry.delete(0, "end")
            self.descricao_text.delete("1.0", "end")
            self.arquivo_label.configure(text="Nenhum arquivo selecionado")
            if hasattr(self, 'arquivo_path'):
                delattr(self, 'arquivo_path')
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao enviar relat√≥rio: {str(e)}")
    
    def show_controle_carga_horaria(self):
        """Mostrar tela de controle de carga hor√°ria"""
        self.clear_content()
        self.page_title.configure(text="‚è±Ô∏è Controle Carga Hor√°ria")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="‚è±Ô∏è Controle de Carga Hor√°ria",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 30))
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=15)
        info_frame.pack(fill="x", pady=(0, 20))
        
        info_title = ctk.CTkLabel(
            info_frame,
            text="üìä Resumo da Carga Hor√°ria",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#1976D2"
        )
        info_title.pack(pady=(20, 15))
        
        # Carregar e exibir dados de carga hor√°ria
        self.carregar_dados_carga_horaria(info_frame)
        
        # Frame de controle
        controle_frame = ctk.CTkFrame(main_frame, fg_color="#F8FAFC", corner_radius=15)
        controle_frame.pack(fill="x", pady=(0, 20))
        
        controle_title = ctk.CTkLabel(
            controle_frame,
            text="‚öôÔ∏è Controles Dispon√≠veis",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_secundaria
        )
        controle_title.pack(pady=(20, 15))
        
        # Bot√µes de controle
        buttons_frame = ctk.CTkFrame(controle_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        btn_atualizar_ch = ctk.CTkButton(
            buttons_frame,
            text="üîÑ Atualizar Carga Hor√°ria",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=250,
            fg_color="#3b82f6",
            hover_color="#2563eb",
            command=self.atualizar_carga_horaria
        )
        btn_atualizar_ch.pack(side="left", padx=(0, 15))
        
        btn_relatorio_ch = ctk.CTkButton(
            buttons_frame,
            text="üìã Relat√≥rio de CH",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=200,
            fg_color="#10b981",
            hover_color="#059669",
            command=self.gerar_relatorio_carga_horaria
        )
        btn_relatorio_ch.pack(side="left", padx=(0, 15))
        
        btn_voltar = ctk.CTkButton(
            buttons_frame,
            text="‚¨ÖÔ∏è Voltar",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=150,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=lambda: self.show_relatorios()
        )
        btn_voltar.pack(side="left")
    
    def carregar_dados_carga_horaria(self, parent_frame):
        """Carregar e exibir dados de carga hor√°ria"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar est√°gios do usu√°rio com carga hor√°ria
            cursor.execute("""
                SELECT e.id, e.tipo, e.semestre, e.ano, e.data_inicio, e.data_fim,
                       e.carga_horaria, e.carga_horaria,
                       est.nome, est.matricula,
                       emp.nome as empresa_nome
                FROM estagios e
                LEFT JOIN estudantes est ON e.estudante_id = est.id
                LEFT JOIN empresas emp ON e.empresa_id = emp.id
                WHERE e.estudante_id = ? AND e.status = 'Ativo'
                ORDER BY e.data_inicio DESC
            """, (self.usuario_logado['id'] if self.usuario_logado else 0,))
            
            estagios = cursor.fetchall()
            conn.close()
            
            if estagios:
                # Criar tabela de dados
                dados_frame = ctk.CTkFrame(parent_frame, fg_color="transparent")
                dados_frame.pack(fill="x", padx=20, pady=(0, 20))
                
                # Cabe√ßalho da tabela
                header_frame = ctk.CTkFrame(dados_frame, fg_color="#1976D2", corner_radius=5)
                header_frame.pack(fill="x", pady=(0, 5))
                
                headers = ["Tipo", "Per√≠odo", "Empresa", "CH Atual", "CH Total", "Progresso"]
                for i, header in enumerate(headers):
                    label = ctk.CTkLabel(
                        header_frame,
                        text=header,
                        font=ctk.CTkFont(size=12, weight="bold"),
                        text_color="white"
                    )
                    label.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
                
                # Configurar colunas
                for i in range(len(headers)):
                    header_frame.grid_columnconfigure(i, weight=1)
                
                # Dados dos est√°gios
                for estagio in estagios:
                    row_frame = ctk.CTkFrame(dados_frame, fg_color="white", corner_radius=5)
                    row_frame.pack(fill="x", pady=2)
                    
                    tipo_texto = "Obrigat√≥rio" if estagio[1] == "OBRIGATORIO" else "N√£o Obrigat√≥rio"
                    periodo = f"{estagio[2]}/{estagio[3]}"
                    ch_atual = estagio[6] or 0
                    ch_total = estagio[7] or 0
                    progresso = f"{(ch_atual/ch_total*100):.1f}%" if ch_total > 0 else "0%"
                    
                    dados = [tipo_texto, periodo, estagio[10], f"{ch_atual}h", f"{ch_total}h", progresso]
                    
                    for i, dado in enumerate(dados):
                        label = ctk.CTkLabel(
                            row_frame,
                            text=dado,
                            font=ctk.CTkFont(size=11),
                            text_color="#374151"
                        )
                        label.grid(row=0, column=i, padx=10, pady=8, sticky="ew")
                    
                    # Configurar colunas
                    for i in range(len(dados)):
                        row_frame.grid_columnconfigure(i, weight=1)
            else:
                # Nenhum est√°gio encontrado
                no_data_label = ctk.CTkLabel(
                    parent_frame,
                    text="Nenhum est√°gio ativo encontrado para controle de carga hor√°ria.",
                    font=ctk.CTkFont(size=14),
                    text_color="#6b7280"
                )
                no_data_label.pack(pady=20)
                
        except Exception as e:
            error_label = ctk.CTkLabel(
                parent_frame,
                text=f"Erro ao carregar dados: {str(e)}",
                font=ctk.CTkFont(size=14),
                text_color="#dc2626"
            )
            error_label.pack(pady=20)
    
    def atualizar_carga_horaria(self):
        """Atualizar carga hor√°ria do est√°gio"""
        messagebox.showinfo("Info", "Funcionalidade de atualiza√ß√£o de carga hor√°ria ser√° implementada em breve.")
    
    def gerar_relatorio_carga_horaria(self):
        """Gerar relat√≥rio de carga hor√°ria"""
        messagebox.showinfo("Info", "Funcionalidade de relat√≥rio de carga hor√°ria ser√° implementada em breve.")

    def show_avaliar_relatorios(self):
        """Mostrar tela para avaliar relat√≥rios (apenas administradores)"""
        self.clear_content()
        self.page_title.configure(text="‚úÖ Avaliar Relat√≥rios")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="‚úÖ Avaliar Relat√≥rios de Est√°gio",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 30))
        
        # Informa√ß√£o
        info_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=10)
        info_frame.pack(fill="x", pady=(0, 20))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="‚ÑπÔ∏è Esta funcionalidade permite avaliar relat√≥rios enviados pelos estudantes",
            font=ctk.CTkFont(size=14),
            text_color="#1976D2"
        )
        info_label.pack(pady=15)
        
        # Bot√£o voltar
        btn_voltar = ctk.CTkButton(
            main_frame,
            text="‚¨ÖÔ∏è Voltar",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=50,
            width=150,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=lambda: self.show_relatorios()
        )
        btn_voltar.pack(pady=(20, 0))
    
    def configurar_whatsapp_api(self):
        """Abrir janela para configurar WhatsApp API"""
        messagebox.showinfo("WhatsApp API", 
                           "Para configurar o WhatsApp API, execute o arquivo 'configurar_whatsapp.py' "
                           "ou consulte o arquivo 'GUIA_WHATSAPP_API.md' para instru√ß√µes detalhadas.")
    
    def configurar_gmail_senha_app(self):
        """Abrir configurador de Gmail com senha de app"""
        try:
            import subprocess
            import os
            
            resposta = messagebox.askyesno(
                "Configurar Gmail", 
                "üîê CONFIGURA√á√ÉO SEGURA DO GMAIL\n\n"
                "Este assistente ir√° ajud√°-lo a configurar:\n"
                "‚Ä¢ Autentica√ß√£o em duas etapas (2FA)\n"
                "‚Ä¢ Senha de app do Gmail\n"
                "‚Ä¢ Vari√°vel de ambiente segura\n\n"
                "Deseja executar o configurador?"
            )
            
            if resposta:
                # Verificar se o arquivo existe
                if os.path.exists("configurar_email_gmail.py"):
                    messagebox.showinfo(
                        "Iniciando Configurador", 
                        "üöÄ Abrindo configurador de Gmail...\n\n"
                        "Uma nova janela ser√° aberta com instru√ß√µes detalhadas.\n"
                        "Siga os passos para configurar a senha de app."
                    )
                    
                    # Executar o configurador em nova janela
                    subprocess.Popen([
                        "python", "configurar_email_gmail.py"
                    ], creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0)
                    
                else:
                    messagebox.showerror(
                        "Arquivo n√£o encontrado", 
                        "‚ùå O arquivo 'configurar_email_gmail.py' n√£o foi encontrado.\n\n"
                        "Certifique-se de que o arquivo est√° na pasta do projeto."
                    )
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir configurador: {str(e)}")
    
    # === FUN√á√ïES DA CENTRAL DE ALERTAS (DESABILITADAS) ===
    
    def executar_analise_inteligente(self):
        """Fun√ß√£o desabilitada temporariamente"""
        messagebox.showinfo("Informa√ß√£o", "Esta funcionalidade est√° temporariamente desabilitada.")
    
    def gerar_relatorio_inteligente(self):
        """Fun√ß√£o desabilitada temporariamente"""
        messagebox.showinfo("Informa√ß√£o", "Esta funcionalidade est√° temporariamente desabilitada.")
    
    def configurar_envio_automatico(self):
        """Configurar envio autom√°tico de alertas"""
        config_window = ctk.CTkToplevel(self.root)
        config_window.title("‚ö° Configurar Envio Autom√°tico")
        config_window.geometry("500x400")
        config_window.transient(self.root)
        
        main_frame = ctk.CTkFrame(config_window)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            main_frame,
            text="‚ö° CONFIGURA√á√ÉO DE ENVIO AUTOM√ÅTICO",
            font=ctk.CTkFont(size=18, weight="bold")
        ).pack(pady=20)
        
        # Op√ß√µes de configura√ß√£o
        config_frame = ctk.CTkFrame(main_frame)
        config_frame.pack(fill="x", pady=20, padx=20)
        
        # Hor√°rio de execu√ß√£o
        ctk.CTkLabel(config_frame, text="üïê Hor√°rio de execu√ß√£o di√°ria:", 
                    font=ctk.CTkFont(size=12, weight="bold")).pack(anchor="w", pady=(10, 5))
        
        hora_frame = ctk.CTkFrame(config_frame, fg_color="transparent")
        hora_frame.pack(fill="x", pady=5)
        
        hora_var = ctk.StringVar(value="08:00")
        hora_entry = ctk.CTkEntry(hora_frame, textvariable=hora_var, width=100)
        hora_entry.pack(side="left", padx=(0, 10))
        
        ctk.CTkLabel(hora_frame, text="(formato: HH:MM)").pack(side="left")
        
        # Canais ativos
        ctk.CTkLabel(config_frame, text="üì° Canais de comunica√ß√£o:", 
                    font=ctk.CTkFont(size=12, weight="bold")).pack(anchor="w", pady=(20, 5))
        
        email_var = ctk.BooleanVar(value=True)
        whatsapp_var = ctk.BooleanVar(value=True)
        sms_var = ctk.BooleanVar(value=False)
        
        ctk.CTkCheckBox(config_frame, text="üìß Email", variable=email_var).pack(anchor="w", pady=2)
        ctk.CTkCheckBox(config_frame, text="üì± WhatsApp", variable=whatsapp_var).pack(anchor="w", pady=2)
        ctk.CTkCheckBox(config_frame, text="üìû SMS", variable=sms_var).pack(anchor="w", pady=2)
        
        # Bot√µes
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.pack(fill="x", pady=20, padx=20)
        
        def salvar_configuracao():
            try:
                # Salvar no banco de dados
                self.cursor.execute("""
                    INSERT OR REPLACE INTO configuracoes (chave, valor) 
                    VALUES ('envio_automatico_hora', ?)
                """, (hora_var.get(),))
                
                self.cursor.execute("""
                    INSERT OR REPLACE INTO configuracoes (chave, valor) 
                    VALUES ('envio_automatico_email', ?)
                """, (str(email_var.get()),))
                
                self.cursor.execute("""
                    INSERT OR REPLACE INTO configuracoes (chave, valor) 
                    VALUES ('envio_automatico_whatsapp', ?)
                """, (str(whatsapp_var.get()),))
                
                self.cursor.execute("""
                    INSERT OR REPLACE INTO configuracoes (chave, valor) 
                    VALUES ('envio_automatico_sms', ?)
                """, (str(sms_var.get()),))
                
                self.conn.commit()
                
                messagebox.showinfo("Sucesso", "Configura√ß√£o salva com sucesso!")
                self.log_atividade(f"‚ö° Envio autom√°tico configurado para {hora_var.get()}")
                config_window.destroy()
                
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao salvar configura√ß√£o: {str(e)}")
        
        ctk.CTkButton(
            button_frame,
            text="üíæ Salvar",
            command=salvar_configuracao,
            fg_color="#10B981",
            hover_color="#059669"
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkButton(
            button_frame,
            text="‚ùå Cancelar",
            command=config_window.destroy,
            fg_color="#EF4444",
            hover_color="#DC2626"
        ).pack(side="left")
    
    def enviar_alertas_criticos(self):
        """Enviar apenas alertas cr√≠ticos (‚â§ 3 dias)"""
        self.enviar_alertas_por_prioridade_inteligente("CRITICA")
    
    def enviar_alertas_altos(self):
        """Enviar apenas alertas altos (‚â§ 7 dias)"""
        self.enviar_alertas_por_prioridade_inteligente("ALTA")
    
    def enviar_alertas_preventivos(self):
        """Enviar apenas alertas preventivos (‚â§ 30 dias)"""
        self.enviar_alertas_por_prioridade_inteligente("PREVENTIVO")
    
    def enviar_alertas_por_prioridade_inteligente(self, prioridade):
        """Enviar alertas usando a Central de Alertas Inteligente"""
        try:
            if not self.central_alertas:
                messagebox.showerror("Erro", "Central de Alertas Inteligente n√£o dispon√≠vel")
                return
            
            # Mapear prioridades
            prioridade_map = {
                "CRITICA": (3, "üö® CR√çTICOS"),
                "ALTA": (7, "‚ö†Ô∏è ALTOS"),
                "PREVENTIVO": (30, "‚è∞ PREVENTIVOS")
            }
            
            dias_limite, titulo = prioridade_map[prioridade]
            
            # Buscar est√°gios da prioridade espec√≠fica
            estagios = self.central_alertas.analisar_estagios_vencimento()
            estagios_filtrados = [
                e for e in estagios 
                if e['dias_restantes'] <= dias_limite and 
                (prioridade == "CRITICA" or e['dias_restantes'] > (dias_limite // 2 if dias_limite > 3 else 0))
            ]
            
            if not estagios_filtrados:
                messagebox.showinfo("Informa√ß√£o", f"Nenhum est√°gio encontrado com prioridade {titulo}")
                return
            
            # Confirmar envio
            resposta = messagebox.askyesno(
                "Confirmar Envio",
                f"{titulo}\n\n"
                f"Enviar alertas para {len(estagios_filtrados)} est√°gio(s)?\n\n"
                f"Esta a√ß√£o enviar√° emails e mensagens para estudantes e orientadores."
            )
            
            if not resposta:
                return
            
            # Gerar alertas espec√≠ficos
            from central_alertas_inteligente import PrioridadeAlerta
            prioridade_enum = {
                "CRITICA": PrioridadeAlerta.CRITICA,
                "ALTA": PrioridadeAlerta.ALTA,
                "PREVENTIVO": PrioridadeAlerta.PREVENTIVO
            }[prioridade]
            
            alertas_especificos = []
            for estagio_data in estagios_filtrados:
                contatos = self.central_alertas.criar_contatos_estagio(estagio_data)
                canais = self.central_alertas.estrategias_comunicacao[prioridade_enum]
                
                from central_alertas_inteligente import Alerta
                alerta = Alerta(
                    id=f"MANUAL_{estagio_data['estagio_id']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                    titulo=f"Alerta {prioridade} - {estagio_data['estudante_nome']}",
                    mensagem=f"Alerta manual de prioridade {prioridade}",
                    prioridade=prioridade_enum,
                    destinatarios=contatos,
                    canais=canais,
                    data_criacao=datetime.now(),
                    estagio_id=estagio_data['estagio_id']
                )
                alertas_especificos.append(alerta)
            
            # Processar alertas
            relatorio = self.central_alertas.processar_alertas(alertas_especificos)
            
            # Mostrar resultado
            messagebox.showinfo(
                "Envio Conclu√≠do",
                f"‚úÖ Alertas {titulo} enviados!\n\n"
                f"üìä Total processados: {relatorio['total_alertas']}\n"
                f"‚úÖ Enviados com sucesso: {relatorio['enviados']}\n"
                f"‚ùå Falhas: {relatorio['falhas']}"
            )
            
            self.log_atividade(f"üì§ Alertas {titulo} enviados: {relatorio['enviados']} sucessos, {relatorio['falhas']} falhas")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao enviar alertas: {str(e)}")
    
    def testar_sistema_email(self):
        """Testar sistema de email da Central de Alertas"""
        self.testar_envio_email()  # Usar fun√ß√£o existente
    
    def carregar_log_atividades(self):
        """Carregar log de atividades recentes"""
        try:
            if not hasattr(self, 'log_text'):
                return
            
            # Buscar logs recentes do banco
            self.cursor.execute("""
                SELECT data_execucao, total_alertas, enviados, falhas 
                FROM log_alertas 
                ORDER BY data_criacao DESC 
                LIMIT 10
            """)
            
            logs = self.cursor.fetchall()
            
            log_content = "üìã LOG DE ATIVIDADES RECENTES\n"
            log_content += "=" * 50 + "\n\n"
            
            if logs:
                for log in logs:
                    data_exec, total, enviados, falhas = log
                    data_formatada = datetime.fromisoformat(data_exec).strftime("%d/%m/%Y %H:%M:%S")
                    
                    log_content += f"üïê {data_formatada}\n"
                    log_content += f"   üìä Total: {total} | ‚úÖ Enviados: {enviados} | ‚ùå Falhas: {falhas}\n"
                    log_content += "-" * 30 + "\n"
            else:
                log_content += "Nenhuma atividade registrada ainda.\n"
                log_content += "Execute uma an√°lise para ver os logs aqui.\n"
            
            # Adicionar informa√ß√µes do sistema
            log_content += "\n" + "=" * 50 + "\n"
            log_content += "üí° SISTEMA DE ALERTAS INTELIGENTE\n\n"
            log_content += "üéØ Prioridades:\n"
            log_content += "   üö® CR√çTICA: ‚â§ 3 dias (Email + WhatsApp + SMS)\n"
            log_content += "   ‚ö†Ô∏è ALTA: ‚â§ 7 dias (Email + WhatsApp)\n"
            log_content += "   ‚è∞ PREVENTIVA: ‚â§ 30 dias (Email + Sistema)\n\n"
            
            status_email = "‚úÖ Ativo" if self.email_sender else "‚ùå Inativo"
            status_whatsapp = "‚úÖ Ativo" if self.whatsapp_api else "‚ùå Inativo"
            
            log_content += f"üìß Email: {status_email}\n"
            log_content += f"üì± WhatsApp: {status_whatsapp}\n"
            log_content += f"üïê √öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n"
            
            self.log_text.delete("1.0", "end")
            self.log_text.insert("1.0", log_content)
            
        except Exception as e:
            if hasattr(self, 'log_text'):
                self.log_text.delete("1.0", "end")
                self.log_text.insert("1.0", f"Erro ao carregar log: {str(e)}")
    
    def log_atividade(self, mensagem):
        """Registrar atividade no log"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_entry = f"[{timestamp}] {mensagem}\n"
            
            if hasattr(self, 'log_text'):
                # Adicionar no in√≠cio do log
                conteudo_atual = self.log_text.get("1.0", "end")
                novo_conteudo = log_entry + conteudo_atual
                
                self.log_text.delete("1.0", "end")
                self.log_text.insert("1.0", novo_conteudo)
            
            print(f"LOG: {log_entry.strip()}")
            
        except Exception as e:
            print(f"Erro ao registrar log: {e}")
        
    def show_backup(self):
        """Mostrar tela de backup do sistema"""
        self.clear_content()
        self.page_title.configure(text="üíæ Backup do Sistema")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üíæ Backup do Sistema",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_azul_escuro
        )
        title_label.pack(pady=(20, 30))
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_cinza_claro)
        info_frame.pack(fill="x", padx=20, pady=10)
        
        info_text = """
        O sistema de backup permite criar c√≥pias de seguran√ßa dos dados do sistema.
        
        Funcionalidades dispon√≠veis:
        ‚Ä¢ Backup completo do banco de dados
        ‚Ä¢ Restaura√ß√£o de backup
        ‚Ä¢ Agendamento de backups autom√°ticos
        ‚Ä¢ Hist√≥rico de backups realizados
        """
        
        info_label = ctk.CTkLabel(
            info_frame,
            text=info_text,
            font=ctk.CTkFont(size=14),
            text_color=self.cor_cinza_escuro,
            justify="left"
        )
        info_label.pack(padx=20, pady=20)
        
        # Bot√µes de a√ß√£o
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        # Bot√£o de backup manual
        backup_btn = ctk.CTkButton(
            buttons_frame,
            text="üì¶ Criar Backup Agora",
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_azul,
            hover_color=self.cor_azul_escuro,
            height=50,
            command=self.criar_backup_manual
        )
        backup_btn.pack(side="left", padx=(0, 10), fill="x", expand=True)
        
        # Bot√£o de restaurar
        restore_btn = ctk.CTkButton(
            buttons_frame,
            text="üîÑ Restaurar Backup",
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_verde,
            hover_color=self.cor_verde_escuro,
            height=50,
            command=self.restaurar_backup
        )
        restore_btn.pack(side="left", padx=10, fill="x", expand=True)
        
        # Bot√£o de configura√ß√µes
        config_btn = ctk.CTkButton(
            buttons_frame,
            text="‚öôÔ∏è Configurar Backup",
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_laranja,
            hover_color=self.cor_laranja_escuro,
            height=50,
            command=self.configurar_backup
        )
        config_btn.pack(side="left", padx=(10, 0), fill="x", expand=True)
        
        # Frame de hist√≥rico
        history_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_cinza_claro)
        history_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        history_title = ctk.CTkLabel(
            history_frame,
            text="üìã Hist√≥rico de Backups",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_azul_escuro
        )
        history_title.pack(pady=(20, 10))
        
        # √Årea de log de backup
        self.log_text = ctk.CTkTextbox(
            history_frame,
            height=200,
            font=ctk.CTkFont(size=12),
            fg_color=self.cor_branco
        )
        self.log_text.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Carregar log inicial
        self.carregar_log_backup()
    
    def carregar_log_backup(self):
        """Carregar log de backup no textbox"""
        try:
            log_content = "üìã Log de Backup do Sistema\n"
            log_content += "=" * 50 + "\n\n"
            
            # Verificar se h√° backups
            backups_dir = "backups"
            if os.path.exists(backups_dir):
                backups = [f for f in os.listdir(backups_dir) if f.endswith('.db')]
                log_content += f"üìÅ Backups encontrados: {len(backups)}\n\n"
                
                # Listar √∫ltimos 10 backups
                backups.sort(reverse=True)
                for i, backup in enumerate(backups[:10]):
                    try:
                        backup_path = os.path.join(backups_dir, backup)
                        size = os.path.getsize(backup_path)
                        modified = datetime.fromtimestamp(os.path.getmtime(backup_path))
                        log_content += f"{i+1:2}. {backup}\n"
                        log_content += f"    üìè Tamanho: {size/1024:.1f} KB\n"
                        log_content += f"    üìÖ Criado: {modified.strftime('%d/%m/%Y %H:%M:%S')}\n\n"
                    except Exception as e:
                        log_content += f"    ‚ùå Erro ao ler informa√ß√µes: {e}\n\n"
            else:
                log_content += "üìÅ Diret√≥rio de backups n√£o encontrado\n\n"
            
            # Status dos servi√ßos
            status_email = "‚úÖ Ativo" if self.email_sender else "‚ùå Inativo"
            status_whatsapp = "‚úÖ Ativo" if self.whatsapp_api else "‚ùå Inativo"
            
            log_content += f"üìß Email: {status_email}\n"
            log_content += f"üì± WhatsApp: {status_whatsapp}\n"
            log_content += f"üïê √öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n"
            
            self.log_text.delete("1.0", "end")
            self.log_text.insert("1.0", log_content)
            
        except Exception as e:
            if hasattr(self, 'log_text'):
                self.log_text.delete("1.0", "end")
                self.log_text.insert("1.0", f"Erro ao carregar log: {str(e)}")
    
    def criar_backup_manual(self):
        """Criar backup manual do sistema"""
        try:
            import shutil
            from datetime import datetime
            
            # Nome do arquivo de backup com timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"backup_estagio_{timestamp}.db"
            
            # Copiar o banco de dados
            shutil.copy2('estagio.db', backup_filename)
            
            # Mostrar mensagem de sucesso
            self.show_message("‚úÖ Backup criado com sucesso!", f"Arquivo: {backup_filename}")
            
        except Exception as e:
            self.show_message("‚ùå Erro ao criar backup", str(e))
    
    def restaurar_backup(self):
        """Restaurar backup do sistema"""
        self.show_message("‚ÑπÔ∏è Funcionalidade em desenvolvimento", "A restaura√ß√£o de backup ser√° implementada em breve.")
    
    def configurar_backup(self):
        """Configurar backup autom√°tico"""
        self.show_message("‚ÑπÔ∏è Funcionalidade em desenvolvimento", "A configura√ß√£o de backup autom√°tico ser√° implementada em breve.")
        
    def show_ajuda(self):
        self.clear_content()
        self.page_title.configure(text="Ajuda")
        self.show_placeholder("Ajuda", "Funcionalidade em desenvolvimento")
        
    def show_message(self, title, message):
        """Mostrar mensagem em popup"""
        import tkinter.messagebox as messagebox
        messagebox.showinfo(title, message)
    
    # M√©todo de aprova√ß√£o de orientadores removido conforme solicitado
    
    # M√©todos auxiliares de aprova√ß√£o de orientadores removidos
    
    # M√©todo criar_card_orientador_pendente removido
    
    # M√©todo aprovar_orientador removido
    
    # M√©todo rejeitar_orientador removido
    
    # M√©todo aprovar_todos_orientadores removido
        
    def show_placeholder(self, title, message):
        placeholder_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        placeholder_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        title_label = ctk.CTkLabel(
            placeholder_frame,
            text=title,
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=(50, 20))
        
        message_label = ctk.CTkLabel(
            placeholder_frame,
            text=message,
            font=ctk.CTkFont(size=16),
            text_color=self.cor_texto
        )
        message_label.pack()
        
    def clear_content(self):
        # Limpar conte√∫do din√¢mico
        for widget in self.dynamic_frame.winfo_children():
            widget.destroy()
            
    def create_estudantes_buttons(self, parent):
        """Criar bot√µes de a√ß√£o para estudantes"""
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # Frame para bot√µes √† esquerda
        left_buttons = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        left_buttons.pack(side="left")
        
        # Bot√µes de a√ß√£o
        btn_novo = ctk.CTkButton(
            left_buttons,
            text="‚ûï Novo Cadastro",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=150,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.novo_estudante
        )
        btn_novo.pack(side="left", padx=(0, 10))
        
        btn_editar = ctk.CTkButton(
            left_buttons,
            text="‚úèÔ∏è Editar",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color=self.cor_secundaria,
            hover_color=self.cor_terciaria,
            command=self.editar_estudante
        )
        btn_editar.pack(side="left", padx=(0, 10))
        
        btn_excluir = ctk.CTkButton(
            left_buttons,
            text="üóëÔ∏è Excluir",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color="#dc2626",
            hover_color="#b91c1c",
            command=self.excluir_estudante
        )
        btn_excluir.pack(side="left", padx=(0, 10))
        
        # Frame para busca √† direita
        right_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        right_frame.pack(side="right")
        
        # Campo de busca
        self.search_entry = ctk.CTkEntry(
            right_frame,
            placeholder_text="Buscar por nome, matr√≠cula ou CPF...",
            width=300,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.search_entry.pack(side="left", padx=(0, 10))
        
        btn_buscar = ctk.CTkButton(
            right_frame,
            text="üîç Localizar",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color="#10b981",
            hover_color="#059669",
            command=self.buscar_estudantes
        )
        btn_buscar.pack(side="left")
        
    def create_estudantes_table(self, parent):
        """Criar tabela de estudantes"""
        # Frame da tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # T√≠tulo da tabela
        title_label = ctk.CTkLabel(
            table_frame,
            text="Lista de Estudantes",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=(0, 15))
        
        # Criar Treeview com estilo personalizado
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configurar cores do Treeview
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       rowheight=35,
                       fieldbackground=self.cor_branco)
        
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('ID', 'Nome', 'Email', 'Curso', 'Matr√≠cula', 'Telefone', 'CPF', 'Endere√ßo', 'Data Ingresso', 'Status')
        self.tree_estudantes = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_estudantes.heading('ID', text='ID')
        self.tree_estudantes.heading('Nome', text='Nome')
        self.tree_estudantes.heading('Email', text='Email')
        self.tree_estudantes.heading('Curso', text='Curso')
        self.tree_estudantes.heading('Matr√≠cula', text='Matr√≠cula')
        self.tree_estudantes.heading('Telefone', text='Telefone')
        self.tree_estudantes.heading('CPF', text='CPF')
        self.tree_estudantes.heading('Endere√ßo', text='Endere√ßo')
        self.tree_estudantes.heading('Data Ingresso', text='Data Ingresso')
        self.tree_estudantes.heading('Status', text='Status')
        
        # Configurar larguras das colunas
        self.tree_estudantes.column('ID', width=50, anchor='center')
        self.tree_estudantes.column('Nome', width=180, anchor='center')
        self.tree_estudantes.column('Email', width=180, anchor='center')
        self.tree_estudantes.column('Curso', width=150, anchor='center')
        self.tree_estudantes.column('Matr√≠cula', width=100, anchor='center')
        self.tree_estudantes.column('Telefone', width=120, anchor='center')
        self.tree_estudantes.column('CPF', width=120, anchor='center')
        self.tree_estudantes.column('Endere√ßo', width=200, anchor='center')
        self.tree_estudantes.column('Data Ingresso', width=120, anchor='center')
        self.tree_estudantes.column('Status', width=100, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_estudantes.yview)
        self.tree_estudantes.configure(yscrollcommand=scrollbar.set)
        
        # Pack da tabela e scrollbar
        self.tree_estudantes.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Carregar dados na tabela
        self.carregar_estudantes()
        
    def carregar_estudantes(self):
        """Carregar estudantes na tabela"""
        # Limpar tabela
        for item in self.tree_estudantes.get_children():
            self.tree_estudantes.delete(item)
        
        # Buscar estudantes no banco
        self.cursor.execute("SELECT id, nome, email, curso, matricula, telefone, cpf, endereco, data_ingresso, status FROM estudantes ORDER BY nome")
        estudantes = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for estudante in estudantes:
            self.tree_estudantes.insert('', 'end', values=estudante)
            
    def novo_estudante(self):
        """Abrir formul√°rio para novo estudante"""
        self.abrir_formulario_estudante()
        
    def editar_estudante(self):
        """Editar estudante selecionado"""
        selected = self.tree_estudantes.selection()
        if not selected:
            messagebox.showwarning("Aviso", "‚ö†Ô∏è Selecione um registro na tabela para editar!")
            return
            
        item = self.tree_estudantes.item(selected[0])
        estudante_id = item['values'][0]
        nome_estudante = item['values'][1]
        
        # Buscar dados completos do estudante
        self.cursor.execute("SELECT * FROM estudantes WHERE id = ?", (estudante_id,))
        estudante = self.cursor.fetchone()
        
        if estudante:
            # Confirmar edi√ß√£o
            if messagebox.askyesno("Confirmar Edi√ß√£o", f"Deseja editar os dados do estudante:\n\n{nome_estudante}?"):
                self.abrir_formulario_estudante(estudante)
        else:
            messagebox.showerror("Erro", "Estudante n√£o encontrado no banco de dados!")
            
    def excluir_estudante(self):
        """Excluir estudante selecionado"""
        selected = self.tree_estudantes.selection()
        if not selected:
            messagebox.showwarning("Aviso", "‚ö†Ô∏è Selecione um registro na tabela para excluir!")
            return
            
        item = self.tree_estudantes.item(selected[0])
        estudante_id = item['values'][0]
        nome = item['values'][1]
        
        if messagebox.askyesno("Confirmar Exclus√£o", f"Deseja realmente excluir o estudante {nome}?"):
            try:
                self.cursor.execute("DELETE FROM estudantes WHERE id = ?", (estudante_id,))
                self.conn.commit()

                # Sincronizar com Supabase se dispon√≠vel
                if SUPABASE_SYNC_AVAILABLE:
                    try:
                        sync_result = sync_estudante_delete(int(estudante_id))
                        if sync_result:
                            print(f"‚úÖ Estudante {nome} marcado como inativo no Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha ao marcar estudante {nome} como inativo no Supabase")
                    except Exception as e:
                        print(f"‚ùå Erro na sincroniza√ß√£o da exclus√£o com Supabase: {e}")

                messagebox.showinfo("Sucesso", "Estudante exclu√≠do com sucesso!")
                self.carregar_estudantes()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir estudante: {str(e)}")
                
    def buscar_estudantes(self):
        """Buscar estudantes por crit√©rio"""
        termo = self.search_entry.get().strip()
        
        if not termo:
            self.carregar_estudantes()
            return
            
        # Limpar tabela
        for item in self.tree_estudantes.get_children():
            self.tree_estudantes.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT id, nome, email, curso, matricula, telefone, cpf, endereco, data_ingresso, status 
            FROM estudantes 
            WHERE nome LIKE ? OR matricula LIKE ? OR cpf LIKE ? OR email LIKE ?
            ORDER BY nome
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        estudantes = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for estudante in estudantes:
            self.tree_estudantes.insert('', 'end', values=estudante)
            
    def abrir_formulario_estudante(self, estudante=None):
        """Abrir formul√°rio de cadastro/edi√ß√£o de estudante"""
        # Criar janela modal
        form_window = ctk.CTkToplevel(self.root)
        form_window.title("Cadastro de Estudante" if not estudante else "Editar Estudante")
        form_window.geometry("1000x700")
        form_window.resizable(False, False)
        
        # Centralizar janela na tela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Centralizar janela na tela principal
        form_window.update_idletasks()
        
        # Obter dimens√µes da tela
        screen_width = form_window.winfo_screenwidth()
        screen_height = form_window.winfo_screenheight()
        
        # Calcular posi√ß√£o central
        window_width = 1000
        window_height = 700
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        # Definir posi√ß√£o e tamanho
        form_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # Garantir que a janela apare√ßa no topo
        form_window.lift()
        form_window.attributes('-topmost', True)
        form_window.after_idle(lambda: form_window.attributes('-topmost', False))
        
        # Frame principal do formul√°rio
        main_frame = ctk.CTkFrame(form_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üìù Cadastro de Estudante" if not estudante else "‚úèÔ∏è Editar Estudante",
            font=ctk.CTkFont(size=26, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(20, 25))
        
        # Frame do formul√°rio sem scroll (janela maior)
        form_container = ctk.CTkFrame(main_frame, fg_color="transparent")
        form_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Configurar grid do formul√°rio
        form_container.grid_columnconfigure(1, weight=1)
        
        # Campos do formul√°rio organizados em duas colunas
        campos_esquerda = [
            ("Nome Completo:", "nome", True),
            ("Email:", "email", True),
            ("Curso:", "curso", True),
            ("Matr√≠cula:", "matricula", True)
        ]
        
        campos_direita = [
            ("Telefone:", "telefone", True),
            ("CPF:", "cpf", True),
            ("Endere√ßo:", "endereco", False),
            ("Data de Ingresso na UFVJM:", "data_ingresso", False)
        ]
        
        self.form_entries = {}
        
        # Campos da coluna esquerda
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_esquerda):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=0, sticky="ew", pady=8, padx=(0, 15))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            entry = ctk.CTkEntry(
                field_frame,
                width=400,
                height=45,
                font=ctk.CTkFont(size=14),
                placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
            )
            entry.pack(fill="x")
            self.form_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if estudante:
                self.preencher_campo_edicao(entry, field_name, estudante)
        
        # Campos da coluna direita
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_direita):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=1, sticky="ew", pady=8, padx=(15, 0))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            entry = ctk.CTkEntry(
                field_frame,
                width=400,
                height=45,
                font=ctk.CTkFont(size=14),
                placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
            )
            entry.pack(fill="x")
            self.form_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if estudante:
                self.preencher_campo_edicao(entry, field_name, estudante)
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_terciaria, corner_radius=10)
        info_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="‚ÑπÔ∏è Campos marcados com * s√£o obrigat√≥rios",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_branco
        )
        info_label.pack(pady=8)
        
        # Bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(20, 20))
        
        btn_salvar = ctk.CTkButton(
            buttons_frame,
            text="üíæ Salvar",
            font=ctk.CTkFont(size=18, weight="bold"),
            height=55,
            width=200,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.salvar_estudante(form_window, estudante)
        )
        btn_salvar.pack(side="left", padx=(0, 30))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            font=ctk.CTkFont(size=18, weight="bold"),
            height=55,
            width=200,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=form_window.destroy
        )
        btn_cancelar.pack(side="left")
        
    def preencher_campo_edicao(self, entry, field_name, estudante):
        """Preencher campo durante edi√ß√£o"""
        if field_name == "nome":
            entry.insert(0, estudante[1])
        elif field_name == "email":
            entry.insert(0, estudante[2])
        elif field_name == "curso":
            entry.insert(0, estudante[3])
        elif field_name == "matricula":
            entry.insert(0, estudante[4])
        elif field_name == "telefone":
            entry.insert(0, estudante[5] or "")
        elif field_name == "cpf":
            entry.insert(0, estudante[6])
        elif field_name == "endereco":
            entry.insert(0, estudante[7] or "")
        elif field_name == "data_ingresso":
            entry.insert(0, estudante[8] or "")
        
    def salvar_estudante(self, window, estudante=None):
        """Salvar dados do estudante"""
        try:
            # Validar campos obrigat√≥rios
            nome = self.form_entries['nome'].get().strip()
            email = self.form_entries['email'].get().strip()
            curso = self.form_entries['curso'].get().strip()
            matricula = self.form_entries['matricula'].get().strip()
            telefone = self.form_entries['telefone'].get().strip()
            cpf = self.form_entries['cpf'].get().strip()
            data_ingresso = self.form_entries['data_ingresso'].get().strip()
            
            if not all([nome, email, curso, matricula, telefone, cpf]):
                messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios!")
                return
                
            # Dados do estudante
            dados = {
                'nome': nome,
                'email': email,
                'curso': curso,
                'matricula': matricula,
                'telefone': telefone,
                'cpf': cpf,
                'endereco': self.form_entries['endereco'].get().strip(),
                'data_ingresso': data_ingresso
            }
            
            if estudante:
                # Atualizar estudante existente
                self.cursor.execute("""
                    UPDATE estudantes SET 
                    nome=?, email=?, curso=?, matricula=?, telefone=?, cpf=?, endereco=?, data_ingresso=?
                    WHERE id=?
                """, (dados['nome'], dados['email'], dados['curso'], dados['matricula'],
                     dados['telefone'], dados['cpf'], dados['endereco'], dados['data_ingresso'], estudante[0]))
                message = "Estudante atualizado com sucesso!"
            else:
                # Inserir novo estudante
                data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
                self.cursor.execute("""
                    INSERT INTO estudantes 
                    (nome, email, curso, matricula, telefone, cpf, endereco, data_ingresso, data_cadastro)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (dados['nome'], dados['email'], dados['curso'], dados['matricula'],
                     dados['telefone'], dados['cpf'], dados['endereco'], dados['data_ingresso'], data_cadastro))
                message = "Estudante cadastrado com sucesso!"
            
            self.conn.commit()

            # Sincronizar com Supabase se dispon√≠vel
            if SUPABASE_SYNC_AVAILABLE:
                try:
                    if estudante:
                        # Atualiza√ß√£o - buscar ID do estudante no SQLite
                        estudante_id = estudante[0]
                        sync_result = sync_estudante_update(estudante_id, dados)
                        if sync_result:
                            print(f"‚úÖ Estudante {dados['nome']} sincronizado com Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha na sincroniza√ß√£o do estudante {dados['nome']} com Supabase")
                    else:
                        # Cria√ß√£o - sincronizar novo estudante
                        sync_result = sync_estudante_create(dados)
                        if sync_result:
                            print(f"‚úÖ Novo estudante {dados['nome']} sincronizado com Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha na sincroniza√ß√£o do novo estudante {dados['nome']} com Supabase")
                except Exception as e:
                    print(f"‚ùå Erro na sincroniza√ß√£o com Supabase: {e}")

            messagebox.showinfo("Sucesso", message)
            window.destroy()
            self.carregar_estudantes()
            
        except sqlite3.IntegrityError as e:
            if "UNIQUE constraint failed" in str(e):
                if "matricula" in str(e):
                    messagebox.showerror("Erro", "Matr√≠cula j√° cadastrada!")
                elif "cpf" in str(e):
                    messagebox.showerror("Erro", "CPF j√° cadastrado!")
            else:
                messagebox.showerror("Erro", f"Erro de integridade: {str(e)}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar estudante: {str(e)}")

    def create_empresas_buttons(self, parent):
        """Criar bot√µes de a√ß√£o para empresas"""
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # Frame para bot√µes √† esquerda
        left_buttons = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        left_buttons.pack(side="left")
        
        # Bot√µes de a√ß√£o
        btn_novo = ctk.CTkButton(
            left_buttons,
            text="‚ûï Nova Empresa",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=150,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.nova_empresa
        )
        btn_novo.pack(side="left", padx=(0, 10))
        
        btn_editar = ctk.CTkButton(
            left_buttons,
            text="‚úèÔ∏è Editar",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color=self.cor_secundaria,
            hover_color=self.cor_terciaria,
            command=self.editar_empresa
        )
        btn_editar.pack(side="left", padx=(0, 10))
        
        btn_excluir = ctk.CTkButton(
            left_buttons,
            text="üóëÔ∏è Excluir",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color="#dc2626",
            hover_color="#b91c1c",
            command=self.excluir_empresa
        )
        btn_excluir.pack(side="left", padx=(0, 10))
        
        # Frame para busca √† direita
        right_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        right_frame.pack(side="right")
        
        # Campo de busca
        self.search_empresa_entry = ctk.CTkEntry(
            right_frame,
            placeholder_text="Buscar por nome, CNPJ ou email...",
            width=300,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.search_empresa_entry.pack(side="left", padx=(0, 10))
        
        btn_buscar = ctk.CTkButton(
            right_frame,
            text="üîç Localizar",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color="#10b981",
            hover_color="#059669",
            command=self.buscar_empresas
        )
        btn_buscar.pack(side="left")
        
    def create_empresas_table(self, parent):
        """Criar tabela de empresas"""
        # Frame da tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # T√≠tulo da tabela
        title_label = ctk.CTkLabel(
            table_frame,
            text="Lista de Empresas",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=(0, 15))
        
        # Criar Treeview com estilo personalizado
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configurar cores do Treeview
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       rowheight=35,
                       fieldbackground=self.cor_branco)
        
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('ID', 'Nome', 'Email', 'Telefone', 'CNPJ', 'Cidade', 'Respons√°vel', 'Status')
        self.tree_empresas = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_empresas.heading('ID', text='ID')
        self.tree_empresas.heading('Nome', text='Nome')
        self.tree_empresas.heading('Email', text='Email')
        self.tree_empresas.heading('Telefone', text='Telefone')
        self.tree_empresas.heading('CNPJ', text='CNPJ')
        self.tree_empresas.heading('Cidade', text='Cidade')
        self.tree_empresas.heading('Respons√°vel', text='Respons√°vel')
        self.tree_empresas.heading('Status', text='Status')
        
        # Configurar larguras das colunas
        self.tree_empresas.column('ID', width=50, anchor='center')
        self.tree_empresas.column('Nome', width=200, anchor='center')
        self.tree_empresas.column('Email', width=180, anchor='center')
        self.tree_empresas.column('Telefone', width=120, anchor='center')
        self.tree_empresas.column('CNPJ', width=140, anchor='center')
        self.tree_empresas.column('Cidade', width=150, anchor='center')
        self.tree_empresas.column('Respons√°vel', width=150, anchor='center')
        self.tree_empresas.column('Status', width=100, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_empresas.yview)
        self.tree_empresas.configure(yscrollcommand=scrollbar.set)
        
        # Pack da tabela e scrollbar
        self.tree_empresas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Carregar dados na tabela
        self.carregar_empresas()
        
    def carregar_empresas(self):
        """Carregar empresas na tabela"""
        # Limpar tabela
        for item in self.tree_empresas.get_children():
            self.tree_empresas.delete(item)
        
        # Buscar empresas no banco
        self.cursor.execute("SELECT id, nome, email, telefone, cnpj, cidade, responsavel, status FROM empresas ORDER BY nome")
        empresas = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for empresa in empresas:
            self.tree_empresas.insert('', 'end', values=empresa)
            
    def nova_empresa(self):
        """Abrir formul√°rio para nova empresa"""
        self.abrir_formulario_empresa()
        
    def editar_empresa(self):
        """Editar empresa selecionada"""
        selected = self.tree_empresas.selection()
        if not selected:
            messagebox.showwarning("Aviso", "‚ö†Ô∏è Selecione um registro na tabela para editar!")
            return
            
        item = self.tree_empresas.item(selected[0])
        empresa_id = item['values'][0]
        nome_empresa = item['values'][1]
        
        # Buscar dados completos da empresa
        self.cursor.execute("SELECT * FROM empresas WHERE id = ?", (empresa_id,))
        empresa = self.cursor.fetchone()
        
        if empresa:
            # Confirmar edi√ß√£o
            if messagebox.askyesno("Confirmar Edi√ß√£o", f"Deseja editar os dados da empresa:\n\n{nome_empresa}?"):
                self.abrir_formulario_empresa(empresa)
        else:
            messagebox.showerror("Erro", "Empresa n√£o encontrada no banco de dados!")
            
    def excluir_empresa(self):
        """Excluir empresa selecionada"""
        selected = self.tree_empresas.selection()
        if not selected:
            messagebox.showwarning("Aviso", "‚ö†Ô∏è Selecione um registro na tabela para excluir!")
            return
            
        item = self.tree_empresas.item(selected[0])
        empresa_id = item['values'][0]
        nome = item['values'][1]
        
        if messagebox.askyesno("Confirmar Exclus√£o", f"Deseja realmente excluir a empresa {nome}?"):
            try:
                self.cursor.execute("DELETE FROM empresas WHERE id = ?", (empresa_id,))
                self.conn.commit()

                # Sincronizar com Supabase se dispon√≠vel
                if SUPABASE_SYNC_AVAILABLE:
                    try:
                        sync_result = sync_empresa_delete(int(empresa_id))
                        if sync_result:
                            print(f"‚úÖ Empresa {nome} marcada como inativa no Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha ao marcar empresa {nome} como inativa no Supabase")
                    except Exception as e:
                        print(f"‚ùå Erro na sincroniza√ß√£o da exclus√£o com Supabase: {e}")

                messagebox.showinfo("Sucesso", "Empresa exclu√≠da com sucesso!")
                self.carregar_empresas()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir empresa: {str(e)}")
                
    def buscar_empresas(self):
        """Buscar empresas por crit√©rio"""
        termo = self.search_empresa_entry.get().strip()
        
        if not termo:
            self.carregar_empresas()
            return
            
        # Limpar tabela
        for item in self.tree_empresas.get_children():
            self.tree_empresas.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT id, nome, email, telefone, cnpj, cidade, responsavel, status 
            FROM empresas 
            WHERE nome LIKE ? OR cnpj LIKE ? OR email LIKE ?
            ORDER BY nome
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        empresas = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for empresa in empresas:
            self.tree_empresas.insert('', 'end', values=empresa)
            
    def abrir_formulario_empresa(self, empresa=None):
        """Abrir formul√°rio de cadastro/edi√ß√£o de empresa"""
        # Criar janela modal
        form_window = ctk.CTkToplevel(self.root)
        form_window.title("Cadastro de Empresa" if not empresa else "Editar Empresa")
        form_window.geometry("1000x800")
        form_window.resizable(False, False)
        
        # Centralizar janela na tela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Centralizar janela na tela principal
        form_window.update_idletasks()
        
        # Obter dimens√µes da tela
        screen_width = form_window.winfo_screenwidth()
        screen_height = form_window.winfo_screenheight()
        
        # Calcular posi√ß√£o central
        window_width = 1000
        window_height = 800
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        # Definir posi√ß√£o e tamanho
        form_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # Garantir que a janela apare√ßa no topo
        form_window.lift()
        form_window.attributes('-topmost', True)
        form_window.after_idle(lambda: form_window.attributes('-topmost', False))
        
        # Frame principal do formul√°rio
        main_frame = ctk.CTkFrame(form_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üè¢ Cadastro de Empresa" if not empresa else "‚úèÔ∏è Editar Empresa",
            font=ctk.CTkFont(size=26, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(20, 25))
        
        # Frame do formul√°rio sem scroll (janela maior)
        form_container = ctk.CTkFrame(main_frame, fg_color="transparent")
        form_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Configurar grid do formul√°rio
        form_container.grid_columnconfigure(1, weight=1)
        
        # Campos do formul√°rio organizados em duas colunas
        campos_esquerda = [
            ("Nome da Empresa:", "nome", True),
            ("Email:", "email", True),
            ("Telefone:", "telefone", True),
            ("CNPJ:", "cnpj", True)
        ]
        
        campos_direita = [
            ("Endere√ßo:", "endereco", False),
            ("Cidade:", "cidade", False),
            ("Estado:", "estado", False),
            ("CEP:", "cep", False)
        ]
        
        campos_inferiores = [
            ("Respons√°vel:", "responsavel", False),
            ("Cargo do Respons√°vel:", "cargo_responsavel", False)
        ]
        
        self.form_empresa_entries = {}
        
        # Campos da coluna esquerda
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_esquerda):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=0, sticky="ew", pady=8, padx=(0, 15))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            entry = ctk.CTkEntry(
                field_frame,
                width=400,
                height=45,
                font=ctk.CTkFont(size=14),
                placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
            )
            entry.pack(fill="x")
            self.form_empresa_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if empresa:
                self.preencher_campo_empresa_edicao(entry, field_name, empresa)
        
        # Campos da coluna direita
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_direita):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=1, sticky="ew", pady=8, padx=(15, 0))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            entry = ctk.CTkEntry(
                field_frame,
                width=400,
                height=45,
                font=ctk.CTkFont(size=14),
                placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
            )
            entry.pack(fill="x")
            self.form_empresa_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if empresa:
                self.preencher_campo_empresa_edicao(entry, field_name, empresa)
        
        # Campos inferiores (respons√°vel e cargo)
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_inferiores):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=4, column=i, sticky="ew", pady=8, padx=(0 if i == 0 else 15, 15 if i == 0 else 0))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            entry = ctk.CTkEntry(
                field_frame,
                width=400,
                height=45,
                font=ctk.CTkFont(size=14),
                placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
            )
            entry.pack(fill="x")
            self.form_empresa_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if empresa:
                self.preencher_campo_empresa_edicao(entry, field_name, empresa)
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_terciaria, corner_radius=10)
        info_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="‚ÑπÔ∏è Campos marcados com * s√£o obrigat√≥rios",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_branco
        )
        info_label.pack(pady=8)
        
        # Bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(20, 20))
        
        btn_salvar = ctk.CTkButton(
            buttons_frame,
            text="üíæ Salvar",
            font=ctk.CTkFont(size=18, weight="bold"),
            height=55,
            width=200,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.salvar_empresa(form_window, empresa)
        )
        btn_salvar.pack(side="left", padx=(0, 30))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            font=ctk.CTkFont(size=18, weight="bold"),
            height=55,
            width=200,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=form_window.destroy
        )
        btn_cancelar.pack(side="left")
        
    def preencher_campo_empresa_edicao(self, entry, field_name, empresa):
        """Preencher campo durante edi√ß√£o de empresa"""
        if field_name == "nome":
            entry.insert(0, empresa[1])
        elif field_name == "email":
            entry.insert(0, empresa[2])
        elif field_name == "telefone":
            entry.insert(0, empresa[3])
        elif field_name == "cnpj":
            entry.insert(0, empresa[4])
        elif field_name == "endereco":
            entry.insert(0, empresa[5] or "")
        elif field_name == "cidade":
            entry.insert(0, empresa[6] or "")
        elif field_name == "estado":
            entry.insert(0, empresa[7] or "")
        elif field_name == "cep":
            entry.insert(0, empresa[8] or "")
        elif field_name == "responsavel":
            entry.insert(0, empresa[9] or "")
        elif field_name == "cargo_responsavel":
            entry.insert(0, empresa[10] or "")
        
    def salvar_empresa(self, window, empresa=None):
        """Salvar dados da empresa"""
        try:
            # Validar campos obrigat√≥rios
            nome = self.form_empresa_entries['nome'].get().strip()
            email = self.form_empresa_entries['email'].get().strip()
            telefone = self.form_empresa_entries['telefone'].get().strip()
            cnpj = self.form_empresa_entries['cnpj'].get().strip()
            
            if not all([nome, email, telefone, cnpj]):
                messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios!")
                return
            
            # Dados da empresa
            dados = {
                'nome': nome,
                'email': email,
                'telefone': telefone,
                'cnpj': cnpj,
                'endereco': self.form_empresa_entries['endereco'].get().strip(),
                'cidade': self.form_empresa_entries['cidade'].get().strip(),
                'estado': self.form_empresa_entries['estado'].get().strip(),
                'cep': self.form_empresa_entries['cep'].get().strip(),
                'responsavel': self.form_empresa_entries['responsavel'].get().strip(),
                'cargo_responsavel': self.form_empresa_entries['cargo_responsavel'].get().strip()
            }
            
            if empresa:
                # Atualizar empresa existente
                self.cursor.execute("""
                    UPDATE empresas SET 
                    nome=?, email=?, telefone=?, cnpj=?, endereco=?, cidade=?, estado=?, cep=?, responsavel=?, cargo_responsavel=?
                    WHERE id=?
                """, (dados['nome'], dados['email'], dados['telefone'], dados['cnpj'],
                     dados['endereco'], dados['cidade'], dados['estado'], dados['cep'],
                     dados['responsavel'], dados['cargo_responsavel'], empresa[0]))
                message = "Empresa atualizada com sucesso!"
            else:
                # Inserir nova empresa
                data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
                self.cursor.execute("""
                    INSERT INTO empresas 
                    (nome, email, telefone, cnpj, endereco, cidade, estado, cep, responsavel, cargo_responsavel, data_cadastro)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (dados['nome'], dados['email'], dados['telefone'], dados['cnpj'],
                     dados['endereco'], dados['cidade'], dados['estado'], dados['cep'],
                     dados['responsavel'], dados['cargo_responsavel'], data_cadastro))
                message = "Empresa cadastrada com sucesso!"
            
            self.conn.commit()

            # Sincronizar com Supabase se dispon√≠vel
            if SUPABASE_SYNC_AVAILABLE:
                try:
                    if empresa:
                        # Atualiza√ß√£o - buscar ID da empresa no SQLite
                        empresa_id = empresa[0]
                        sync_result = sync_empresa_update(empresa_id, dados)
                        if sync_result:
                            print(f"‚úÖ Empresa {dados['nome']} sincronizada com Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha na sincroniza√ß√£o da empresa {dados['nome']} com Supabase")
                    else:
                        # Cria√ß√£o - sincronizar nova empresa
                        sync_result = sync_empresa_create(dados)
                        if sync_result:
                            print(f"‚úÖ Nova empresa {dados['nome']} sincronizada com Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha na sincroniza√ß√£o da nova empresa {dados['nome']} com Supabase")
                except Exception as e:
                    print(f"‚ùå Erro na sincroniza√ß√£o com Supabase: {e}")

            messagebox.showinfo("Sucesso", message)
            window.destroy()
            self.carregar_empresas()
            
        except sqlite3.IntegrityError as e:
            if "UNIQUE constraint failed" in str(e):
                if "cnpj" in str(e):
                    messagebox.showerror("Erro", "CNPJ j√° cadastrado!")
                else:
                    messagebox.showerror("Erro", f"Erro de integridade: {str(e)}")
            else:
                messagebox.showerror("Erro", f"Erro de integridade: {str(e)}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar empresa: {str(e)}")

    def create_orientadores_buttons(self, parent):
        """Criar bot√µes de a√ß√£o para orientadores"""
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        # Frame para bot√µes √† esquerda
        left_buttons = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        left_buttons.pack(side="left")
        
        # Bot√µes de a√ß√£o
        btn_novo = ctk.CTkButton(
            left_buttons,
            text="‚ûï Novo Orientador",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=150,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.novo_orientador
        )
        btn_novo.pack(side="left", padx=(0, 10))
        
        btn_editar = ctk.CTkButton(
            left_buttons,
            text="‚úèÔ∏è Editar",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color=self.cor_secundaria,
            hover_color=self.cor_terciaria,
            command=self.editar_orientador
        )
        btn_editar.pack(side="left", padx=(0, 10))
        
        btn_excluir = ctk.CTkButton(
            left_buttons,
            text="üóëÔ∏è Excluir",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color="#dc2626",
            hover_color="#b91c1c",
            command=self.excluir_orientador
        )
        btn_excluir.pack(side="left", padx=(0, 10))
        
        # Frame para busca √† direita
        right_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        right_frame.pack(side="right")
        
        # Campo de busca
        self.search_orientador_entry = ctk.CTkEntry(
            right_frame,
            placeholder_text="Buscar por nome, SIAPE, CPF ou email...",
            width=300,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.search_orientador_entry.pack(side="left", padx=(0, 10))
        
        btn_buscar = ctk.CTkButton(
            right_frame,
            text="üîç Localizar",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            width=120,
            fg_color="#10b981",
            hover_color="#059669",
            command=self.buscar_orientadores
        )
        btn_buscar.pack(side="left")
        
    def create_orientadores_table(self, parent):
        """Criar tabela de orientadores"""
        # Frame da tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # T√≠tulo da tabela
        title_label = ctk.CTkLabel(
            table_frame,
            text="Lista de Orientadores",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=(0, 15))
        
        # Criar Treeview com estilo personalizado
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configurar cores do Treeview
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       rowheight=35,
                       fieldbackground=self.cor_branco)
        
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('ID', 'Nome', 'SIAPE', 'CPF', 'Departamento', 'Curso', 'Telefone', 'Email', 'Administrador', 'Coordenador', 'Status')
        self.tree_orientadores = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_orientadores.heading('ID', text='ID')
        self.tree_orientadores.heading('Nome', text='Nome')
        self.tree_orientadores.heading('SIAPE', text='SIAPE')
        self.tree_orientadores.heading('CPF', text='CPF')
        self.tree_orientadores.heading('Departamento', text='Departamento')
        self.tree_orientadores.heading('Curso', text='Curso')
        self.tree_orientadores.heading('Telefone', text='Telefone')
        self.tree_orientadores.heading('Email', text='Email')
        self.tree_orientadores.heading('Administrador', text='Administrador')
        self.tree_orientadores.heading('Coordenador', text='Coordenador')
        self.tree_orientadores.heading('Status', text='Status')
        
        # Configurar larguras das colunas
        self.tree_orientadores.column('ID', width=50, anchor='center')
        self.tree_orientadores.column('Nome', width=160, anchor='center')
        self.tree_orientadores.column('SIAPE', width=80, anchor='center')
        self.tree_orientadores.column('CPF', width=100, anchor='center')
        self.tree_orientadores.column('Departamento', width=120, anchor='center')
        self.tree_orientadores.column('Curso', width=120, anchor='center')
        self.tree_orientadores.column('Telefone', width=100, anchor='center')
        self.tree_orientadores.column('Email', width=180, anchor='center')
        self.tree_orientadores.column('Administrador', width=100, anchor='center')
        self.tree_orientadores.column('Coordenador', width=100, anchor='center')
        self.tree_orientadores.column('Status', width=80, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_orientadores.yview)
        self.tree_orientadores.configure(yscrollcommand=scrollbar.set)
        
        # Pack da tabela e scrollbar
        self.tree_orientadores.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Carregar dados na tabela
        self.carregar_orientadores()
        
    def carregar_orientadores(self):
        """Carregar orientadores na tabela"""
        # Limpar tabela
        for item in self.tree_orientadores.get_children():
            self.tree_orientadores.delete(item)
        
        # Buscar orientadores no banco
        self.cursor.execute("SELECT id, nome, siape, cpf, departamento, curso, telefone, email_institucional, CASE WHEN administrador = 1 THEN 'Sim' ELSE 'N√£o' END, CASE WHEN coordenador = 1 THEN 'Sim' ELSE 'N√£o' END, status FROM orientadores ORDER BY nome")
        orientadores = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for orientador in orientadores:
            self.tree_orientadores.insert('', 'end', values=orientador)
            
    def novo_orientador(self):
        """Abrir formul√°rio para novo orientador"""
        self.abrir_formulario_orientador()
        
    def editar_orientador(self):
        """Editar orientador selecionado"""
        selected = self.tree_orientadores.selection()
        if not selected:
            messagebox.showwarning("Aviso", "‚ö†Ô∏è Selecione um registro na tabela para editar!")
            return
            
        item = self.tree_orientadores.item(selected[0])
        orientador_id = item['values'][0]
        nome_orientador = item['values'][1]
        
        # Buscar dados completos do orientador
        self.cursor.execute("SELECT * FROM orientadores WHERE id = ?", (orientador_id,))
        orientador = self.cursor.fetchone()
        
        if orientador:
            # Confirmar edi√ß√£o
            if messagebox.askyesno("Confirmar Edi√ß√£o", f"Deseja editar os dados do orientador:\n\n{nome_orientador}?"):
                self.abrir_formulario_orientador(orientador)
        else:
            messagebox.showerror("Erro", "Orientador n√£o encontrado no banco de dados!")
            
    def excluir_orientador(self):
        """Excluir orientador selecionado"""
        selected = self.tree_orientadores.selection()
        if not selected:
            messagebox.showwarning("Aviso", "‚ö†Ô∏è Selecione um registro na tabela para excluir!")
            return
            
        item = self.tree_orientadores.item(selected[0])
        orientador_id = item['values'][0]
        nome = item['values'][1]
        
        if messagebox.askyesno("Confirmar Exclus√£o", f"Deseja realmente excluir o orientador {nome}?"):
            try:
                self.cursor.execute("DELETE FROM orientadores WHERE id = ?", (orientador_id,))
                self.conn.commit()

                # Sincronizar com Supabase se dispon√≠vel
                if SUPABASE_SYNC_AVAILABLE:
                    try:
                        sync_result = sync_orientador_delete(int(orientador_id))
                        if sync_result:
                            print(f"‚úÖ Orientador {nome} marcado como inativo no Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha ao marcar orientador {nome} como inativo no Supabase")
                    except Exception as e:
                        print(f"‚ùå Erro na sincroniza√ß√£o da exclus√£o com Supabase: {e}")

                messagebox.showinfo("Sucesso", "Orientador exclu√≠do com sucesso!")
                self.carregar_orientadores()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir orientador: {str(e)}")
                
    def buscar_orientadores(self):
        """Buscar orientadores por crit√©rio"""
        termo = self.search_orientador_entry.get().strip()
        
        if not termo:
            self.carregar_orientadores()
            return
            
        # Limpar tabela
        for item in self.tree_orientadores.get_children():
            self.tree_orientadores.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT id, nome, siape, cpf, departamento, curso, telefone, email_institucional, CASE WHEN administrador = 1 THEN 'Sim' ELSE 'N√£o' END, status 
            FROM orientadores 
            WHERE nome LIKE ? OR cpf LIKE ? OR email_institucional LIKE ? OR siape LIKE ?
            ORDER BY nome
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        orientadores = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for orientador in orientadores:
            self.tree_orientadores.insert('', 'end', values=orientador)
            
    def abrir_formulario_orientador(self, orientador=None):
        """Abrir formul√°rio de cadastro/edi√ß√£o de orientador"""
        # Criar janela modal
        form_window = ctk.CTkToplevel(self.root)
        form_window.title("Cadastro de Orientador" if not orientador else "Editar Orientador")
        form_window.geometry("1000x800")
        form_window.resizable(False, False)
        
        # Centralizar janela na tela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Centralizar janela na tela principal
        form_window.update_idletasks()
        
        # Obter dimens√µes da tela
        screen_width = form_window.winfo_screenwidth()
        screen_height = form_window.winfo_screenheight()
        
        # Calcular posi√ß√£o central
        window_width = 1000
        window_height = 800
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        # Definir posi√ß√£o e tamanho
        form_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # Garantir que a janela apare√ßa no topo
        form_window.lift()
        form_window.attributes('-topmost', True)
        form_window.after_idle(lambda: form_window.attributes('-topmost', False))
        
        # Frame principal do formul√°rio
        main_frame = ctk.CTkFrame(form_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üë®‚Äçüè´ Cadastro de Orientador" if not orientador else "‚úèÔ∏è Editar Orientador",
            font=ctk.CTkFont(size=26, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(20, 25))
        
        # Frame do formul√°rio sem scroll (janela maior)
        form_container = ctk.CTkFrame(main_frame, fg_color="transparent")
        form_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Configurar grid do formul√°rio
        form_container.grid_columnconfigure(1, weight=1)
        
        # Campos do formul√°rio organizados em duas colunas
        campos_esquerda = [
            ("Nome Completo:", "nome", True),
            ("SIAPE:", "siape", True),
            ("CPF:", "cpf", True),
            ("Departamento:", "departamento", True)
        ]
        
        campos_direita = [
            ("Curso:", "curso", True),
            ("Telefone:", "telefone", True),
            ("Email Institucional:", "email_institucional", True),
            ("Senha:", "senha", True)
        ]
        
        self.form_orientador_entries = {}
        
        # Campos da coluna esquerda
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_esquerda):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=0, sticky="ew", pady=8, padx=(0, 15))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            entry = ctk.CTkEntry(
                field_frame,
                width=400,
                height=45,
                font=ctk.CTkFont(size=14),
                placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
            )
            entry.pack(fill="x")
            self.form_orientador_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if orientador:
                self.preencher_campo_orientador_edicao(entry, field_name, orientador)
        
        # Campos da coluna direita
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_direita):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=1, sticky="ew", pady=8, padx=(15, 0))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            if field_name == "senha":
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text=f"Digite {label_text.lower().replace(':', '')}...",
                    show="*"
                )
            else:
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
                )
            entry.pack(fill="x")
            self.form_orientador_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if orientador:
                self.preencher_campo_orientador_edicao(entry, field_name, orientador)
        
        # Checkbox para administrador
        admin_frame = ctk.CTkFrame(form_container, fg_color="transparent")
        admin_frame.grid(row=4, column=0, columnspan=2, sticky="ew", pady=20, padx=20)
        
        self.admin_checkbox = ctk.CTkCheckBox(
            admin_frame,
            text="üîê Administrador do Sistema",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_primaria,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria
        )
        self.admin_checkbox.pack(anchor="w")
        
        # Checkbox para coordenador de est√°gio
        self.coordenador_checkbox = ctk.CTkCheckBox(
            admin_frame,
            text="üë®‚Äçüè´ Coordenador de Est√°gio - Ci√™ncias Cont√°beis",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#FF9800",
            fg_color="#FF9800",
            hover_color="#F57C00"
        )
        self.coordenador_checkbox.pack(anchor="w", pady=(10, 0))
        
        # Preencher checkboxes se estiver editando
        if orientador:
            if orientador[9] == 1:  # administrador
                self.admin_checkbox.select()
            if len(orientador) > 10 and orientador[10] == 1:  # coordenador
                self.coordenador_checkbox.select()
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_terciaria, corner_radius=10)
        info_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="‚ÑπÔ∏è Campos marcados com * s√£o obrigat√≥rios",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_branco
        )
        info_label.pack(pady=8)
        
        # Bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=(20, 20))
        
        btn_salvar = ctk.CTkButton(
            buttons_frame,
            text="üíæ Salvar",
            font=ctk.CTkFont(size=18, weight="bold"),
            height=55,
            width=200,
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.salvar_orientador(form_window, orientador)
        )
        btn_salvar.pack(side="left", padx=(0, 15))
        
        # Bot√£o Alterar Senha (apenas para edi√ß√£o)
        if orientador:
            btn_alterar_senha = ctk.CTkButton(
                buttons_frame,
                text="üîê Alterar Senha",
                font=ctk.CTkFont(size=16, weight="bold"),
                height=55,
                width=180,
                fg_color="#f59e0b",
                hover_color="#d97706",
                command=lambda: self.show_alterar_senha_orientador_dialog(form_window, orientador)
            )
            btn_alterar_senha.pack(side="left", padx=(0, 15))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            font=ctk.CTkFont(size=18, weight="bold"),
            height=55,
            width=200,
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=form_window.destroy
        )
        btn_cancelar.pack(side="left")
    
    def show_alterar_senha_orientador_dialog(self, parent_dialog, orientador):
        """Exibe di√°logo para alterar senha de orientador (apenas para administradores)"""
        # Verificar se √© administrador
        if not (self.usuario_logado and self.usuario_logado.get('administrador', False)):
            self.show_message("Erro", "Apenas administradores podem alterar senhas de orientadores.")
            return
        
        # Criar janela de di√°logo
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Alterar Senha do Orientador")
        dialog.geometry("500x500")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centralizar janela
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialog.winfo_screenheight() // 2) - (500 // 2)
        dialog.geometry(f"500x500+{x}+{y}")
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            dialog,
            text="üîê Alterar Senha do Orientador",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=20)
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Informa√ß√µes do orientador
        user_frame = ctk.CTkFrame(main_frame, fg_color="#e3f2fd")
        user_frame.pack(fill="x", padx=15, pady=15)
        
        user_title = ctk.CTkLabel(
            user_frame,
            text="üë®‚Äçüè´ Informa√ß√µes do Orientador",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#1976d2"
        )
        user_title.pack(pady=(15, 10))
        
        user_info = ctk.CTkLabel(
            user_frame,
            text=f"Nome: {orientador[1]}\nEmail: {orientador[7]}\nSIAPE: {orientador[2]}",
            font=ctk.CTkFont(size=12),
            text_color="#1976d2",
            justify="left"
        )
        user_info.pack(pady=(0, 15))
        
        # Formul√°rio de altera√ß√£o de senha
        form_frame = ctk.CTkFrame(main_frame)
        form_frame.pack(fill="x", padx=15, pady=15)
        
        form_title = ctk.CTkLabel(
            form_frame,
            text="üîë Nova Senha",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_texto
        )
        form_title.pack(pady=(15, 10))
        
        # Nova senha
        new_label = ctk.CTkLabel(
            form_frame,
            text="Nova Senha:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_texto
        )
        new_label.pack(anchor="w", padx=20, pady=(10, 5))
        
        new_password_entry = ctk.CTkEntry(
            form_frame,
            placeholder_text="Digite a nova senha",
            show="*",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        new_password_entry.pack(padx=20, pady=(0, 10))
        
        # Confirmar nova senha
        confirm_label = ctk.CTkLabel(
            form_frame,
            text="Confirmar Nova Senha:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_texto
        )
        confirm_label.pack(anchor="w", padx=20, pady=(10, 5))
        
        confirm_password_entry = ctk.CTkEntry(
            form_frame,
            placeholder_text="Confirme a nova senha",
            show="*",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        confirm_password_entry.pack(padx=20, pady=(0, 15))
        
        # Valida√ß√£o de senha em tempo real
        def validate_new_password(event=None):
            password = new_password_entry.get()
            if len(password) >= 6:
                new_password_entry.configure(border_color="#10b981")  # Verde
            elif len(password) >= 3:
                new_password_entry.configure(border_color="#f59e0b")  # Amarelo
            else:
                new_password_entry.configure(border_color="#ef4444")  # Vermelho
        
        def validate_confirm_password(event=None):
            new_pass = new_password_entry.get()
            confirm_pass = confirm_password_entry.get()
            if confirm_pass and new_pass == confirm_pass:
                confirm_password_entry.configure(border_color="#10b981")  # Verde
            elif confirm_pass:
                confirm_password_entry.configure(border_color="#ef4444")  # Vermelho
            else:
                confirm_password_entry.configure(border_color="#e2e8f0")  # Cinza
        
        new_password_entry.bind('<KeyRelease>', validate_new_password)
        confirm_password_entry.bind('<KeyRelease>', validate_confirm_password)
        
        # Informa√ß√µes sobre requisitos da senha
        info_frame = ctk.CTkFrame(main_frame, fg_color="#f8f9fa")
        info_frame.pack(fill="x", padx=15, pady=15)
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="üí° Requisitos da senha:\n‚Ä¢ M√≠nimo 6 caracteres\n‚Ä¢ Pode conter letras, n√∫meros e s√≠mbolos",
            font=ctk.CTkFont(size=11),
            text_color="#6c757d",
            justify="left"
        )
        info_label.pack(pady=10)
        
        # Bot√µes
        btn_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        btn_frame.pack(fill="x", padx=15, pady=15)
        
        def alterar_senha_orientador():
            new_pass = new_password_entry.get().strip()
            confirm_pass = confirm_password_entry.get().strip()
            
            # Valida√ß√µes
            if not new_pass or not confirm_pass:
                self.show_message("Erro", "Por favor, preencha todos os campos.")
                return
            
            if len(new_pass) < 6:
                self.show_message("Erro", "A nova senha deve ter pelo menos 6 caracteres.")
                return
            
            if new_pass != confirm_pass:
                self.show_message("Erro", "A confirma√ß√£o da senha n√£o confere.")
                return
            
            # Alterar senha do orientador
            if self.alterar_senha_orientador_db(orientador[0], new_pass):
                self.show_message("Sucesso", f"Senha do orientador {orientador[1]} alterada com sucesso!")
                dialog.destroy()
            else:
                self.show_message("Erro", "Erro ao alterar senha. Tente novamente.")
        
        btn_alterar = ctk.CTkButton(
            btn_frame,
            text="üîê Alterar Senha",
            command=alterar_senha_orientador,
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#10b981",
            hover_color="#059669"
        )
        btn_alterar.pack(side="left", padx=(0, 10))
        
        btn_cancelar = ctk.CTkButton(
            btn_frame,
            text="Cancelar",
            command=dialog.destroy,
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#6c757d",
            hover_color="#5a6268"
        )
        btn_cancelar.pack(side="left")
    
    def alterar_senha_orientador_db(self, orientador_id, nova_senha):
        """Altera a senha de um orientador no banco de dados"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Hash da nova senha
            nova_senha_hash = hashlib.sha256(nova_senha.encode()).hexdigest()
            
            # Atualizar senha no banco
            cursor.execute("""
                UPDATE orientadores 
                SET senha = ? 
                WHERE id = ?
            """, (nova_senha_hash, orientador_id))
            
            conn.commit()
            conn.close()
            
            return True
            
        except Exception as e:
            print(f"Erro ao alterar senha do orientador: {e}")
            return False
        
    def preencher_campo_orientador_edicao(self, entry, field_name, orientador):
        """Preencher campo durante edi√ß√£o de orientador"""
        if field_name == "nome":
            entry.insert(0, orientador[1])
        elif field_name == "siape":
            entry.insert(0, orientador[2])
        elif field_name == "cpf":
            entry.insert(0, orientador[3])
        elif field_name == "departamento":
            entry.insert(0, orientador[4])
        elif field_name == "curso":
            entry.insert(0, orientador[5])
        elif field_name == "telefone":
            entry.insert(0, orientador[6])
        elif field_name == "email_institucional":
            entry.insert(0, orientador[7])
        elif field_name == "senha":
            # N√£o preencher senha durante edi√ß√£o por seguran√ßa
            entry.insert(0, "")
        
    def salvar_orientador(self, window, orientador=None):
        """Salvar dados do orientador"""
        try:
            # Validar campos obrigat√≥rios
            nome = self.form_orientador_entries['nome'].get().strip()
            siape = self.form_orientador_entries['siape'].get().strip()
            cpf = self.form_orientador_entries['cpf'].get().strip()
            departamento = self.form_orientador_entries['departamento'].get().strip()
            curso = self.form_orientador_entries['curso'].get().strip()
            telefone = self.form_orientador_entries['telefone'].get().strip()
            email_institucional = self.form_orientador_entries['email_institucional'].get().strip()
            senha = self.form_orientador_entries['senha'].get().strip()
            
            # Verificar campos obrigat√≥rios (senha s√≥ √© obrigat√≥ria para novos orientadores)
            campos_obrigatorios = [nome, siape, cpf, departamento, curso, telefone, email_institucional]
            if not orientador:  # Novo orientador
                campos_obrigatorios.append(senha)
            
            if not all(campos_obrigatorios):
                messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios!")
                return
            
            # Hash da senha (s√≥ se for fornecida)
            if senha:
                senha_hash = hashlib.sha256(senha.encode()).hexdigest()
            else:
                # Manter senha atual se n√£o for fornecida nova senha
                senha_hash = orientador[8] if orientador else None
            
            # Dados do orientador
            dados = {
                'nome': nome,
                'siape': siape,
                'cpf': cpf,
                'departamento': departamento,
                'curso': curso,
                'telefone': telefone,
                'email_institucional': email_institucional,
                'senha': senha_hash,
                'administrador': 1 if self.admin_checkbox.get() else 0,
                'coordenador': 1 if self.coordenador_checkbox.get() else 0
            }
            
            if orientador:
                # Atualizar orientador existente
                self.cursor.execute("""
                    UPDATE orientadores SET 
                    nome=?, siape=?, cpf=?, departamento=?, curso=?, telefone=?, email_institucional=?, senha=?, administrador=?, coordenador=?
                    WHERE id=?
                """, (dados['nome'], dados['siape'], dados['cpf'], dados['departamento'],
                     dados['curso'], dados['telefone'], dados['email_institucional'],
                     dados['senha'], dados['administrador'], dados['coordenador'], orientador[0]))
                message = "Orientador atualizado com sucesso!"
            else:
                # Inserir novo orientador
                data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
                self.cursor.execute("""
                    INSERT INTO orientadores 
                    (nome, siape, cpf, departamento, curso, telefone, email_institucional, senha, administrador, coordenador, data_cadastro)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (dados['nome'], dados['siape'], dados['cpf'], dados['departamento'],
                     dados['curso'], dados['telefone'], dados['email_institucional'],
                     dados['senha'], dados['administrador'], dados['coordenador'], data_cadastro))
                message = "Orientador cadastrado com sucesso!"
            
            self.conn.commit()

            # Sincronizar com Supabase se dispon√≠vel
            if SUPABASE_SYNC_AVAILABLE:
                try:
                    if orientador:
                        # Atualiza√ß√£o - buscar ID do orientador no SQLite
                        orientador_id = orientador[0]
                        sync_result = sync_orientador_update(orientador_id, dados)
                        if sync_result:
                            print(f"‚úÖ Orientador {dados['nome']} sincronizado com Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha na sincroniza√ß√£o do orientador {dados['nome']} com Supabase")
                    else:
                        # Cria√ß√£o - sincronizar novo orientador
                        sync_result = sync_orientador_create(dados)
                        if sync_result:
                            print(f"‚úÖ Novo orientador {dados['nome']} sincronizado com Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha na sincroniza√ß√£o do novo orientador {dados['nome']} com Supabase")
                except Exception as e:
                    print(f"‚ùå Erro na sincroniza√ß√£o com Supabase: {e}")

            messagebox.showinfo("Sucesso", message)
            window.destroy()
            self.carregar_orientadores()
            
        except sqlite3.IntegrityError as e:
            if "UNIQUE constraint failed" in str(e):
                if "cpf" in str(e):
                    messagebox.showerror("Erro", "CPF j√° cadastrado!")
                elif "siape" in str(e):
                    messagebox.showerror("Erro", "SIAPE j√° cadastrado!")
                else:
                    messagebox.showerror("Erro", f"Erro de integridade: {str(e)}")
            else:
                messagebox.showerror("Erro", f"Erro de integridade: {str(e)}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar orientador: {str(e)}")

    def create_estagio_obrigatorio_buttons(self, parent):
        """Criar bot√µes de a√ß√£o para est√°gio obrigat√≥rio"""
        # Frame para bot√µes
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(0, 20))
        
        # Frame para bot√µes √† esquerda
        left_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        left_frame.pack(side="left")
        
        # Bot√µes de a√ß√£o
        btn_novo = ctk.CTkButton(
            left_frame,
            text="‚ûï Novo Est√°gio",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.abrir_formulario_estagio_obrigatorio
        )
        btn_novo.pack(side="left", padx=(0, 10))
        
        btn_editar = ctk.CTkButton(
            left_frame,
            text="‚úèÔ∏è Editar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#f59e0b",
            hover_color="#d97706",
            command=self.editar_estagio_obrigatorio
        )
        btn_editar.pack(side="left", padx=(0, 10))
        
        btn_excluir = ctk.CTkButton(
            left_frame,
            text="üóëÔ∏è Excluir",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#ef4444",
            hover_color="#dc2626",
            command=self.excluir_estagio_obrigatorio
        )
        btn_excluir.pack(side="left", padx=(0, 10))
        
        btn_controle = ctk.CTkButton(
            left_frame,
            text="üìä Controle do Est√°gio",
            width=180,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#8b5cf6",
            hover_color="#7c3aed",
            command=self.abrir_controle_estagio_obrigatorio
        )
        btn_controle.pack(side="left", padx=(0, 10))
        
        # Frame para busca √† direita
        right_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        right_frame.pack(side="right")
        
        # Campo de busca
        self.search_estagio_entry = ctk.CTkEntry(
            right_frame,
            placeholder_text="Buscar por estudante, orientador ou empresa...",
            width=300,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.search_estagio_entry.pack(side="left", padx=(0, 10))
        
        btn_buscar = ctk.CTkButton(
            right_frame,
            text="üîç Localizar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.buscar_estagio_obrigatorio
        )
        btn_buscar.pack(side="left")
        
        # Bind Enter para busca
        self.search_estagio_entry.bind('<Return>', lambda e: self.buscar_estagio_obrigatorio())

    def create_estagio_obrigatorio_table(self, parent):
        """Criar tabela de est√°gio obrigat√≥rio"""
        # Frame para a tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True)
        
        # Configurar estilo da tabela
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       fieldbackground=self.cor_branco,
                       font=('Arial', 11))
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('ID', 'Estudante', 'Orientador', 'Empresa', 'Data In√≠cio', 'Data T√©rmino', 'Supervisor', 'CRC', 'Carga Hor√°ria', 'Status', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10', 'RF')
        self.tree_estagio_obrigatorio = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_estagio_obrigatorio.heading('ID', text='ID')
        self.tree_estagio_obrigatorio.heading('Estudante', text='Estudante')
        self.tree_estagio_obrigatorio.heading('Orientador', text='Orientador')
        self.tree_estagio_obrigatorio.heading('Empresa', text='Empresa')
        self.tree_estagio_obrigatorio.heading('Data In√≠cio', text='Data In√≠cio')
        self.tree_estagio_obrigatorio.heading('Data T√©rmino', text='Data T√©rmino')
        self.tree_estagio_obrigatorio.heading('Supervisor', text='Supervisor')
        self.tree_estagio_obrigatorio.heading('CRC', text='CRC')
        self.tree_estagio_obrigatorio.heading('Carga Hor√°ria', text='Carga Hor√°ria')
        self.tree_estagio_obrigatorio.heading('Status', text='Status')
        self.tree_estagio_obrigatorio.heading('R1', text='R1')
        self.tree_estagio_obrigatorio.heading('R2', text='R2')
        self.tree_estagio_obrigatorio.heading('R3', text='R3')
        self.tree_estagio_obrigatorio.heading('R4', text='R4')
        self.tree_estagio_obrigatorio.heading('R5', text='R5')
        self.tree_estagio_obrigatorio.heading('R6', text='R6')
        self.tree_estagio_obrigatorio.heading('R7', text='R7')
        self.tree_estagio_obrigatorio.heading('R8', text='R8')
        self.tree_estagio_obrigatorio.heading('R9', text='R9')
        self.tree_estagio_obrigatorio.heading('R10', text='R10')
        self.tree_estagio_obrigatorio.heading('RF', text='RF')
        
        # Configurar larguras das colunas
        self.tree_estagio_obrigatorio.column('ID', width=50, anchor='center')
        self.tree_estagio_obrigatorio.column('Estudante', width=180, anchor='center')
        self.tree_estagio_obrigatorio.column('Orientador', width=180, anchor='center')
        self.tree_estagio_obrigatorio.column('Empresa', width=180, anchor='center')
        self.tree_estagio_obrigatorio.column('Data In√≠cio', width=120, anchor='center')
        self.tree_estagio_obrigatorio.column('Data T√©rmino', width=120, anchor='center')
        self.tree_estagio_obrigatorio.column('Supervisor', width=150, anchor='center')
        self.tree_estagio_obrigatorio.column('CRC', width=120, anchor='center')
        self.tree_estagio_obrigatorio.column('Carga Hor√°ria', width=120, anchor='center')
        self.tree_estagio_obrigatorio.column('Status', width=100, anchor='center')
        self.tree_estagio_obrigatorio.column('R1', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R2', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R3', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R4', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R5', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R6', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R7', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R8', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R9', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('R10', width=40, anchor='center')
        self.tree_estagio_obrigatorio.column('RF', width=40, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_estagio_obrigatorio.yview)
        self.tree_estagio_obrigatorio.configure(yscrollcommand=scrollbar.set)
        
        # Posicionar tabela e scrollbar
        self.tree_estagio_obrigatorio.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def carregar_estagio_obrigatorio(self):
        """Carregar est√°gios obrigat√≥rios na tabela"""
        # Limpar tabela
        for item in self.tree_estagio_obrigatorio.get_children():
            self.tree_estagio_obrigatorio.delete(item)
        
        # Determinar se deve filtrar por professor
        usuario_id = self.usuario_logado.get('id') if self.usuario_logado else None
        is_admin = self.usuario_logado.get('administrador', False) if self.usuario_logado else False
        
        # Query base
        query = """
            SELECT eo.id, est.nome, ori.nome, emp.nome, eo.data_inicio, eo.data_termino, 
                   eo.nome_supervisor, eo.registro_crc, eo.carga_horaria, eo.status
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN orientadores ori ON eo.orientador_id = ori.id
            JOIN empresas emp ON eo.empresa_id = emp.id
        """
        
        # Adicionar filtro por professor se n√£o for administrador
        if not is_admin and usuario_id:
            query += " WHERE eo.orientador_id = ?"
            query += " ORDER BY eo.data_inicio DESC"
            self.cursor.execute(query, (usuario_id,))
        else:
            query += " ORDER BY eo.data_inicio DESC"
            self.cursor.execute(query)
        
        estagios = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for estagio in estagios:
            estagio_id = estagio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio NOT LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Determinar checkboxes dos relat√≥rios
            r1 = "‚úÖ" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r2 = "‚úÖ" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r3 = "‚úÖ" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r4 = "‚úÖ" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r5 = "‚úÖ" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r6 = "‚úÖ" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r7 = "‚úÖ" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r8 = "‚úÖ" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r9 = "‚úÖ" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r10 = "‚úÖ" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            rf = "‚úÖ" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå"
            
            # Inserir dados do est√°gio incluindo checkboxes dos relat√≥rios
            valores = estagio + (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rf)
            self.tree_estagio_obrigatorio.insert('', 'end', values=valores)

    def buscar_estagio_obrigatorio(self):
        """Buscar est√°gios obrigat√≥rios"""
        termo = self.search_estagio_entry.get().strip()
        
        if not termo:
            self.carregar_estagio_obrigatorio()
            return
        
        # Limpar tabela
        for item in self.tree_estagio_obrigatorio.get_children():
            self.tree_estagio_obrigatorio.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT eo.id, est.nome, ori.nome, emp.nome, eo.data_inicio, eo.data_termino, 
                   eo.nome_supervisor, eo.registro_crc, eo.carga_horaria, eo.status
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN orientadores ori ON eo.orientador_id = ori.id
            JOIN empresas emp ON eo.empresa_id = emp.id
            WHERE est.nome LIKE ? OR ori.nome LIKE ? OR emp.nome LIKE ? OR eo.nome_supervisor LIKE ?
            ORDER BY eo.data_inicio DESC
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        estagios = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for estagio in estagios:
            estagio_id = estagio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio NOT LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Determinar checkboxes dos relat√≥rios
            r1 = "‚úÖ" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r2 = "‚úÖ" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r3 = "‚úÖ" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r4 = "‚úÖ" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r5 = "‚úÖ" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r6 = "‚úÖ" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r7 = "‚úÖ" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r8 = "‚úÖ" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r9 = "‚úÖ" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r10 = "‚úÖ" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            rf = "‚úÖ" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå"
            
            # Inserir dados do est√°gio incluindo checkboxes dos relat√≥rios
            valores = estagio + (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rf)
            self.tree_estagio_obrigatorio.insert('', 'end', values=valores)

    def abrir_formulario_estagio_obrigatorio(self, estagio=None):
        """Abrir formul√°rio de cadastro/edi√ß√£o de est√°gio obrigat√≥rio"""
        # Criar janela modal
        form_window = ctk.CTkToplevel(self.root)
        form_window.title("üìã Cadastro de Est√°gio Obrigat√≥rio" if not estagio else "‚úèÔ∏è Editar Est√°gio Obrigat√≥rio")
        form_window.geometry("1000x800")
        form_window.resizable(False, False)
        
        # Centralizar janela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Centralizar na tela
        form_window.update_idletasks()
        x = (form_window.winfo_screenwidth() // 2) - (1000 // 2)
        y = (form_window.winfo_screenheight() // 2) - (800 // 2)
        form_window.geometry(f"1000x800+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(form_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üìã Cadastro de Est√°gio Obrigat√≥rio" if not estagio else "‚úèÔ∏è Editar Est√°gio Obrigat√≥rio",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 30))
        
        # Frame do formul√°rio
        form_container = ctk.CTkFrame(main_frame, fg_color="transparent")
        form_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Configurar grid do formul√°rio
        form_container.grid_columnconfigure(1, weight=1)
        
        # Campos do formul√°rio organizados em duas colunas
        campos_esquerda = [
            ("Estudante:", "estudante", True),
            ("Orientador:", "orientador", True),
            ("Empresa:", "empresa", True),
            ("Data de In√≠cio:", "data_inicio", True)
        ]
        
        campos_direita = [
            ("Data de T√©rmino:", "data_termino", True),
            ("Nome do Supervisor:", "nome_supervisor", True),
            ("Registro CRC:", "registro_crc", True),
            ("Carga Hor√°ria:", "carga_horaria", True)
        ]
        
        self.form_estagio_entries = {}
        
        # Campos da coluna esquerda
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_esquerda):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=0, sticky="ew", pady=8, padx=(0, 15))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry ou bot√£o de busca
            if field_name in ["estudante", "orientador", "empresa"]:
                # Frame para entry + bot√£o
                entry_frame = ctk.CTkFrame(field_frame, fg_color="transparent")
                entry_frame.pack(fill="x")
                
                entry = ctk.CTkEntry(
                    entry_frame,
                    width=300,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text=f"Selecione {label_text.lower().replace(':', '')}..."
                )
                entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
                
                btn_buscar = ctk.CTkButton(
                    entry_frame,
                    text="üîç",
                    width=50,
                    height=45,
                    font=ctk.CTkFont(size=16),
                    fg_color=self.cor_primaria,
                    hover_color=self.cor_secundaria,
                    command=lambda f=field_name, e=entry: self.buscar_para_estagio(f, e)
                )
                btn_buscar.pack(side="right")
                
                self.form_estagio_entries[field_name] = entry
            else:
                # Entry normal
                if field_name == "data_inicio" or field_name == "data_termino":
                    entry = ctk.CTkEntry(
                        field_frame,
                        width=400,
                        height=45,
                        font=ctk.CTkFont(size=14),
                        placeholder_text="DD/MM/AAAA"
                    )
                elif field_name == "carga_horaria":
                    entry = ctk.CTkEntry(
                        field_frame,
                        width=400,
                        height=45,
                        font=ctk.CTkFont(size=14),
                        placeholder_text="390"
                    )
                else:
                    entry = ctk.CTkEntry(
                        field_frame,
                        width=400,
                        height=45,
                        font=ctk.CTkFont(size=14),
                        placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
                    )
                entry.pack(fill="x")
                self.form_estagio_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if estagio:
                self.preencher_campo_estagio_edicao(entry, field_name, estagio)
        
        # Campos da coluna direita
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_direita):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=1, sticky="ew", pady=8, padx=(15, 0))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            if field_name == "data_termino":
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text="DD/MM/AAAA"
                )
            elif field_name == "carga_horaria":
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text="390"
                )
            else:
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
                )
            entry.pack(fill="x")
            self.form_estagio_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if estagio:
                self.preencher_campo_estagio_edicao(entry, field_name, estagio)
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_terciaria, corner_radius=10)
        info_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="‚ÑπÔ∏è Campos marcados com * s√£o obrigat√≥rios. Use os bot√µes de busca para selecionar estudante, orientador e empresa.",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_texto,
            wraplength=900
        )
        info_label.pack(pady=15)
        
        # Frame dos bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(20, 0))
        
        # Bot√µes
        btn_salvar = ctk.CTkButton(
            buttons_frame,
            text="üíæ Salvar",
            width=200,
            height=55,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.salvar_estagio_obrigatorio(form_window, estagio)
        )
        btn_salvar.pack(side="left")
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=200,
            height=55,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=form_window.destroy
        )
        btn_cancelar.pack(side="left")

    def buscar_para_estagio(self, tipo, entry):
        """Abrir janela de busca para selecionar estudante, orientador ou empresa"""
        # Criar janela de busca
        search_window = ctk.CTkToplevel(self.root)
        search_window.title(f"Buscar {tipo.title()}")
        search_window.geometry("900x750")
        search_window.resizable(False, False)
        
        # Centralizar janela
        search_window.transient(self.root)
        search_window.grab_set()
        
        # Centralizar na tela
        search_window.update_idletasks()
        x = (search_window.winfo_screenwidth() // 2) - (900 // 2)
        y = (search_window.winfo_screenheight() // 2) - (750 // 2)
        search_window.geometry(f"900x750+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(search_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text=f"üîç Buscar {tipo.title()}",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 20))
        
        # Campo de busca
        search_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        search_frame.pack(fill="x", pady=(0, 20))
        
        search_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text=f"Digite o nome do {tipo}...",
            width=400,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        search_entry.pack(side="left", padx=(0, 10))
        
        btn_buscar = ctk.CTkButton(
            search_frame,
            text="üîç Buscar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.executar_busca_estagio(tipo, search_entry, tree)
        )
        btn_buscar.pack(side="left")
        
        # Tabela de resultados
        table_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, pady=(0, 20))
        
        # Configurar estilo da tabela
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       fieldbackground=self.cor_branco,
                       font=('Arial', 11))
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        if tipo == "estudante":
            columns = ('ID', 'Nome', 'Email', 'Curso', 'Matr√≠cula')
        elif tipo == "orientador":
            columns = ('ID', 'Nome', 'SIAPE', 'Departamento', 'Curso')
        else:  # empresa
            columns = ('ID', 'Nome', 'Email', 'Cidade', 'CNPJ')
            
        tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=20)
        
        # Configurar colunas
        for col in columns:
            tree.heading(col, text=col)
            if col == 'ID':
                tree.column(col, width=80, anchor='center', minwidth=50)
            elif col in ['Nome', 'Email']:
                tree.column(col, width=200, anchor='w', minwidth=150)
            else:
                tree.column(col, width=150, anchor='center', minwidth=100)
        
        # Scrollbar vertical
        scrollbar_y = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=scrollbar_y.set)
        
        # Scrollbar horizontal
        scrollbar_x = ttk.Scrollbar(table_frame, orient="horizontal", command=tree.xview)
        tree.configure(xscrollcommand=scrollbar_x.set)
        
        # Posicionar tabela e scrollbars
        tree.grid(row=0, column=0, sticky="nsew")
        scrollbar_y.grid(row=0, column=1, sticky="ns")
        scrollbar_x.grid(row=1, column=0, sticky="ew")
        
        # Configurar expans√£o do grid
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)
        
        # Carregar dados iniciais
        self.carregar_dados_busca_estagio(tipo, tree)
        
        # Bot√µes (sempre vis√≠veis)
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(20, 10))
        
        btn_selecionar = ctk.CTkButton(
            buttons_frame,
            text="‚úÖ Selecionar",
            width=180,
            height=45,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.selecionar_item_estagio(tipo, tree, entry, search_window)
        )
        btn_selecionar.pack(side="left", padx=(0, 20))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=180,
            height=45,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=search_window.destroy
        )
        btn_cancelar.pack(side="right")
        
        # Bind Enter para busca
        search_entry.bind('<Return>', lambda e: self.executar_busca_estagio(tipo, search_entry, tree))

    def carregar_dados_busca_estagio(self, tipo, tree):
        """Carregar dados iniciais na busca"""
        try:
            # Limpar tabela
            for item in tree.get_children():
                tree.delete(item)
            
            if tipo == "estudante":
                self.cursor.execute("SELECT id, nome, email, curso, matricula FROM estudantes WHERE status = 'ATIVO' ORDER BY nome")
            elif tipo == "orientador":
                self.cursor.execute("SELECT id, nome, siape, departamento, curso FROM orientadores WHERE status = 'Ativo' ORDER BY nome")
            else:  # empresa
                self.cursor.execute("SELECT id, nome, email, cidade, cnpj FROM empresas WHERE status = 'Ativa' ORDER BY nome")
            
            dados = self.cursor.fetchall()
            
            # Inserir dados na tabela
            for item in dados:
                tree.insert('', 'end', values=item)
            
        except Exception as e:
            print(f"ERRO ao carregar dados de busca para {tipo}: {str(e)}")
            import traceback
            traceback.print_exc()

    def executar_busca_estagio(self, tipo, search_entry, tree):
        """Executar busca na tabela"""
        try:
            termo = search_entry.get().strip()
            
            # Limpar tabela
            for item in tree.get_children():
                tree.delete(item)
            
            if not termo:
                self.carregar_dados_busca_estagio(tipo, tree)
                return
            
            if tipo == "estudante":
                self.cursor.execute("""
                    SELECT id, nome, email, curso, matricula 
                    FROM estudantes 
                    WHERE status = 'ATIVO' AND (nome LIKE ? OR matricula LIKE ?)
                    ORDER BY nome
                """, (f'%{termo}%', f'%{termo}%'))
            elif tipo == "orientador":
                self.cursor.execute("""
                    SELECT id, nome, siape, departamento, curso 
                    FROM orientadores 
                    WHERE status = 'Ativo' AND (nome LIKE ? OR siape LIKE ?)
                    ORDER BY nome
                """, (f'%{termo}%', f'%{termo}%'))
            else:  # empresa
                self.cursor.execute("""
                    SELECT id, nome, email, cidade, cnpj 
                    FROM empresas 
                    WHERE status = 'Ativa' AND (nome LIKE ? OR cnpj LIKE ?)
                    ORDER BY nome
                """, (f'%{termo}%', f'%{termo}%'))
            
            dados = self.cursor.fetchall()
            
            # Inserir resultados na tabela
            for item in dados:
                tree.insert('', 'end', values=item)
            
        except Exception as e:
            print(f"ERRO ao executar busca para {tipo}: {str(e)}")
            import traceback
            traceback.print_exc()

    def selecionar_item_estagio(self, tipo, tree, entry, window):
        """Selecionar item da busca"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning("Aviso", f"Selecione um {tipo} da lista!")
            return
        
        item = tree.item(selected[0])
        values = item['values']
        
        # Armazenar ID e nome (apenas o nome aparece no campo)
        if tipo == "estudante":
            entry.delete(0, 'end')
            entry.insert(0, values[1])  # Apenas o nome do estudante
            entry.estudante_id = values[0]
        elif tipo == "orientador":
            entry.delete(0, 'end')
            entry.insert(0, values[1])  # Apenas o nome do orientador
            entry.orientador_id = values[0]
        else:  # empresa
            entry.delete(0, 'end')
            entry.insert(0, values[1])  # Apenas o nome da empresa
            entry.empresa_id = values[0]
        
        window.destroy()

    def preencher_campo_estagio_edicao(self, entry, field_name, estagio):
        """Preencher campo durante edi√ß√£o de est√°gio"""
        if field_name == "estudante":
            entry.insert(0, estagio[10])  # Nome do estudante (posi√ß√£o 10 na query com JOIN)
            entry.estudante_id = estagio[1]  # ID do estudante (estudante_id)
        elif field_name == "orientador":
            entry.insert(0, estagio[11])  # Nome do orientador (posi√ß√£o 11 na query com JOIN)
            entry.orientador_id = estagio[2]  # ID do orientador (orientador_id)
        elif field_name == "empresa":
            entry.insert(0, estagio[12])  # Nome da empresa (posi√ß√£o 12 na query com JOIN)
            entry.empresa_id = estagio[3]  # ID da empresa (empresa_id)
        elif field_name == "data_inicio":
            entry.insert(0, estagio[4])
        elif field_name == "data_termino":
            entry.insert(0, estagio[5])
        elif field_name == "nome_supervisor":
            entry.insert(0, estagio[6])
        elif field_name == "registro_crc":
            entry.insert(0, estagio[7])
        elif field_name == "carga_horaria":
            entry.insert(0, str(estagio[8]))

    def salvar_estagio_obrigatorio(self, window, estagio=None):
        """Salvar dados do est√°gio obrigat√≥rio"""
        try:
            # Validar campos obrigat√≥rios
            estudante_id = getattr(self.form_estagio_entries['estudante'], 'estudante_id', None)
            orientador_id = getattr(self.form_estagio_entries['orientador'], 'orientador_id', None)
            empresa_id = getattr(self.form_estagio_entries['empresa'], 'empresa_id', None)
            data_inicio = self.form_estagio_entries['data_inicio'].get().strip()
            data_termino = self.form_estagio_entries['data_termino'].get().strip()
            nome_supervisor = self.form_estagio_entries['nome_supervisor'].get().strip()
            registro_crc = self.form_estagio_entries['registro_crc'].get().strip()
            carga_horaria = self.form_estagio_entries['carga_horaria'].get().strip()
            
            if not all([estudante_id, orientador_id, empresa_id, data_inicio, data_termino, nome_supervisor, registro_crc, carga_horaria]):
                messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios e selecione estudante, orientador e empresa!")
                return
            
            # Validar carga hor√°ria
            try:
                carga_horaria = int(carga_horaria)
            except ValueError:
                messagebox.showerror("Erro", "Carga hor√°ria deve ser um n√∫mero!")
                return
            
            # Dados do est√°gio
            dados = {
                'estudante_id': estudante_id,
                'orientador_id': orientador_id,
                'empresa_id': empresa_id,
                'data_inicio': data_inicio,
                'data_termino': data_termino,
                'nome_supervisor': nome_supervisor,
                'registro_crc': registro_crc,
                'carga_horaria': carga_horaria
            }
            
            if estagio:
                # Atualizar est√°gio existente
                self.cursor.execute("""
                    UPDATE estagio_obrigatorio SET 
                    estudante_id=?, orientador_id=?, empresa_id=?, data_inicio=?, data_termino=?, 
                    nome_supervisor=?, registro_crc=?, carga_horaria=?
                    WHERE id=?
                """, (dados['estudante_id'], dados['orientador_id'], dados['empresa_id'],
                     dados['data_inicio'], dados['data_termino'], dados['nome_supervisor'],
                     dados['registro_crc'], dados['carga_horaria'], estagio[0]))
                message = "Est√°gio atualizado com sucesso!"
            else:
                # Inserir novo est√°gio
                data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
                self.cursor.execute("""
                    INSERT INTO estagio_obrigatorio 
                    (estudante_id, orientador_id, empresa_id, data_inicio, data_termino, 
                     nome_supervisor, registro_crc, carga_horaria, data_cadastro)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (dados['estudante_id'], dados['orientador_id'], dados['empresa_id'],
                     dados['data_inicio'], dados['data_termino'], dados['nome_supervisor'],
                     dados['registro_crc'], dados['carga_horaria'], data_cadastro))
                message = "Est√°gio cadastrado com sucesso!"
            
            self.conn.commit()

            # Sincronizar com Supabase se dispon√≠vel
            if SUPABASE_SYNC_AVAILABLE:
                try:
                    # Preparar dados adicionais para Supabase
                    supabase_dados = dados.copy()
                    supabase_dados.update({
                        'tipo': 'OBRIGATORIO',
                        'semestre': 1,  # Valor padr√£o, pode ser ajustado conforme necess√°rio
                        'ano': datetime.now().year,
                        'status': 'ATIVO',
                        'prioridade_alerta': 'MEDIA',
                        'observacoes': f"Supervisor: {nome_supervisor}, CRC: {registro_crc}"
                    })

                    if estagio:
                        # Atualiza√ß√£o - buscar ID do est√°gio no SQLite
                        estagio_id = estagio[0]
                        sync_result = sync_estagio_update(estagio_id, supabase_dados)
                        if sync_result:
                            print("‚úÖ Est√°gio obrigat√≥rio atualizado no Supabase")
                        else:
                            print("‚ö†Ô∏è  Falha na sincroniza√ß√£o do est√°gio obrigat√≥rio com Supabase")
                    else:
                        # Cria√ß√£o - sincronizar novo est√°gio
                        sync_result = sync_estagio_create(supabase_dados, 'OBRIGATORIO')
                        if sync_result:
                            print("‚úÖ Novo est√°gio obrigat√≥rio sincronizado com Supabase")
                        else:
                            print("‚ö†Ô∏è  Falha na sincroniza√ß√£o do novo est√°gio obrigat√≥rio com Supabase")
                except Exception as e:
                    print(f"‚ùå Erro na sincroniza√ß√£o com Supabase: {e}")

            messagebox.showinfo("Sucesso", message)
            window.destroy()
            self.carregar_estagio_obrigatorio()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar est√°gio: {str(e)}")

    def editar_estagio_obrigatorio(self):
        """Editar est√°gio obrigat√≥rio selecionado"""
        selected = self.tree_estagio_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para editar!")
            return
        
        item = self.tree_estagio_obrigatorio.item(selected[0])
        estagio_id = item['values'][0]
        
        # Buscar dados completos do est√°gio
        self.cursor.execute("""
            SELECT eo.id, eo.estudante_id, eo.orientador_id, eo.empresa_id, eo.data_inicio, eo.data_termino,
                   eo.nome_supervisor, eo.registro_crc, eo.carga_horaria, eo.status,
                   est.nome, ori.nome, emp.nome
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN orientadores ori ON eo.orientador_id = ori.id
            JOIN empresas emp ON eo.empresa_id = emp.id
            WHERE eo.id = ?
        """, (estagio_id,))
        
        estagio = self.cursor.fetchone()
        if estagio:
            self.abrir_formulario_estagio_obrigatorio(estagio)

    def excluir_estagio_obrigatorio(self):
        """Excluir est√°gio obrigat√≥rio selecionado"""
        selected = self.tree_estagio_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para excluir!")
            return
        
        item = self.tree_estagio_obrigatorio.item(selected[0])
        estagio_id = item['values'][0]
        estudante_nome = item['values'][1]
        
        # Confirmar exclus√£o
        if messagebox.askyesno("Confirmar Exclus√£o", 
                              f"Tem certeza que deseja excluir o est√°gio do estudante {estudante_nome}?\n\nEsta a√ß√£o n√£o pode ser desfeita!"):
            try:
                self.cursor.execute("DELETE FROM estagio_obrigatorio WHERE id = ?", (estagio_id,))
                self.conn.commit()

                # Sincronizar com Supabase se dispon√≠vel
                if SUPABASE_SYNC_AVAILABLE:
                    try:
                        sync_result = sync_estagio_delete(int(estagio_id))
                        if sync_result:
                            print(f"‚úÖ Est√°gio obrigat√≥rio de {estudante_nome} arquivado no Supabase")
                        else:
                            print(f"‚ö†Ô∏è  Falha ao arquivar est√°gio obrigat√≥rio de {estudante_nome} no Supabase")
                    except Exception as e:
                        print(f"‚ùå Erro na sincroniza√ß√£o da exclus√£o com Supabase: {e}")

                messagebox.showinfo("Sucesso", "Est√°gio exclu√≠do com sucesso!")
                self.carregar_estagio_obrigatorio()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir est√°gio: {str(e)}")

    def abrir_controle_estagio_obrigatorio(self):
        """Abrir janela de controle do est√°gio obrigat√≥rio"""
        selected = self.tree_estagio_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para controlar!")
            return
        
        item = self.tree_estagio_obrigatorio.item(selected[0])
        estagio_id = item['values'][0]
        
        # Buscar dados completos do est√°gio
        try:
            self.cursor.execute("""
                SELECT eo.id, est.nome, est.cpf, est.matricula, ori.nome, emp.nome, 
                       eo.data_inicio, eo.data_termino, eo.nome_supervisor, eo.registro_crc, 
                       eo.carga_horaria, eo.status
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.id = ?
            """, (estagio_id,))
            
            estagio_data = self.cursor.fetchone()
            if not estagio_data:
                messagebox.showerror("Erro", "Est√°gio n√£o encontrado!")
                return
            
            # Abrir janela de controle
            self.show_controle_estagio_window(estagio_data)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao buscar dados do est√°gio: {str(e)}")

    def show_controle_estagio_window(self, estagio_data):
        """Mostrar janela de controle do est√°gio"""
        # Criar janela modal
        control_window = ctk.CTkToplevel(self.root)
        control_window.title("Controle do Est√°gio Obrigat√≥rio")
        control_window.geometry("1000x800")
        control_window.resizable(True, True)
        
        # Centralizar janela na tela
        control_window.transient(self.root)
        control_window.grab_set()
        
        # Centralizar janela na tela principal
        control_window.update_idletasks()
        screen_width = control_window.winfo_screenwidth()
        screen_height = control_window.winfo_screenheight()
        window_width = 1000
        window_height = 800
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        control_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # Garantir que a janela apare√ßa no topo
        control_window.lift()
        control_window.attributes('-topmost', True)
        control_window.after_idle(lambda: control_window.attributes('-topmost', False))
        
        # Frame principal
        main_frame = ctk.CTkFrame(control_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üìä Controle do Est√°gio Obrigat√≥rio",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(20, 25))
        
        # Frame principal com scroll
        scroll_frame = ctk.CTkScrollableFrame(main_frame)
        scroll_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Extrair dados do est√°gio
        estagio_id, estudante_nome, estudante_cpf, estudante_matricula, orientador_nome, empresa_nome, data_inicio, data_termino, supervisor_nome, supervisor_crc, carga_horaria, status = estagio_data
        
        # === SE√á√ÉO: INFORMA√á√ïES DO EST√ÅGIO ===
        info_frame = ctk.CTkFrame(scroll_frame, fg_color="#e3f2fd")
        info_frame.pack(fill="x", pady=(0, 20))
        
        info_title = ctk.CTkLabel(
            info_frame,
            text="üìã Informa√ß√µes do Est√°gio",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#1976d2"
        )
        info_title.pack(pady=(15, 10))
        
        # Grid de informa√ß√µes
        info_grid = ctk.CTkFrame(info_frame, fg_color="transparent")
        info_grid.pack(fill="x", padx=20, pady=(0, 15))
        info_grid.grid_columnconfigure(1, weight=1)
        info_grid.grid_columnconfigure(3, weight=1)
        
        # Informa√ß√µes do estudante
        ctk.CTkLabel(info_grid, text="üë§ Estudante:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=0, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=estudante_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=0, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìß Matr√≠cula:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=0, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=estudante_matricula, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=0, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üÜî CPF:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=1, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=estudante_cpf, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=1, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üë®‚Äçüè´ Orientador:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=1, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=orientador_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=1, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üè¢ Empresa:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=2, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=empresa_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=2, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üë®‚Äçüíº Supervisor:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=2, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=supervisor_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=2, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìÖ In√≠cio:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=3, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=data_inicio, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=3, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìÖ T√©rmino:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=3, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=data_termino, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=3, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="‚è∞ CH Total:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=4, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=f"{carga_horaria} horas", font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=4, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìä Status:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=4, column=2, sticky="w", padx=(20, 10), pady=5)
        status_color = "#10b981" if status == "Completo" else "#f59e0b" if status == "Ativo" else "#ef4444"
        ctk.CTkLabel(info_grid, text=status, font=ctk.CTkFont(size=12, weight="bold"), text_color=status_color).grid(row=4, column=3, sticky="w", pady=5)
        
        # === SE√á√ÉO: CONTROLE DE CARGA HOR√ÅRIA ===
        ch_frame = ctk.CTkFrame(scroll_frame, fg_color="#f0fdf4")
        ch_frame.pack(fill="x", pady=(0, 20))
        
        ch_title = ctk.CTkLabel(
            ch_frame,
            text="‚è∞ Controle de Carga Hor√°ria",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#16a34a"
        )
        ch_title.pack(pady=(15, 10))
        
        # Buscar CH parcial atual
        self.cursor.execute("""
            SELECT COALESCE(SUM(horas_registradas), 0) as ch_parcial
            FROM controle_ch_obrigatorio 
            WHERE estagio_id = ?
        """, (estagio_id,))
        
        ch_parcial_result = self.cursor.fetchone()
        ch_parcial = ch_parcial_result[0] if ch_parcial_result else 0
        ch_restante = carga_horaria - ch_parcial
        percentual = (ch_parcial / carga_horaria * 100) if carga_horaria > 0 else 0
        
        # Grid de CH
        ch_grid = ctk.CTkFrame(ch_frame, fg_color="transparent")
        ch_grid.pack(fill="x", padx=20, pady=(0, 15))
        ch_grid.grid_columnconfigure(1, weight=1)
        ch_grid.grid_columnconfigure(3, weight=1)
        
        ctk.CTkLabel(ch_grid, text="üìä CH Total:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=0, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{carga_horaria} horas", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=0, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(ch_grid, text="‚úÖ CH Cumprida:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=0, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{ch_parcial} horas", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=0, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(ch_grid, text="‚è≥ CH Restante:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=1, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{ch_restante} horas", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=1, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(ch_grid, text="üìà Progresso:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=1, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{percentual:.1f}%", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=1, column=3, sticky="w", pady=5)
        
        # Barra de progresso
        progress_frame = ctk.CTkFrame(ch_frame, fg_color="transparent")
        progress_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(progress_frame, text="Barra de Integraliza√ß√£o:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").pack(anchor="w", pady=(0, 5))
        
        progress_bar = ctk.CTkProgressBar(progress_frame, width=400, height=20)
        progress_bar.pack(anchor="w")
        progress_bar.set(percentual / 100)
        
        # === SE√á√ÉO: ANEXO DE RELAT√ìRIOS ===
        relatorios_frame = ctk.CTkFrame(scroll_frame, fg_color="#fef3c7")
        relatorios_frame.pack(fill="x", pady=(0, 20))
        
        relatorios_title = ctk.CTkLabel(
            relatorios_frame,
            text="üìÑ Anexo de Relat√≥rios",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#d97706"
        )
        relatorios_title.pack(pady=(15, 10))
        
        # Formul√°rio de anexo
        form_frame = ctk.CTkFrame(relatorios_frame, fg_color="transparent")
        form_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Tipo de relat√≥rio
        ctk.CTkLabel(form_frame, text="Tipo de Relat√≥rio:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#d97706").pack(anchor="w", pady=(0, 5))
        tipo_relatorio = ctk.CTkComboBox(
            form_frame,
            values=[
                "1¬∫ Relat√≥rio Parcial",
                "2¬∫ Relat√≥rio Parcial", 
                "3¬∫ Relat√≥rio Parcial",
                "4¬∫ Relat√≥rio Parcial",
                "5¬∫ Relat√≥rio Parcial",
                "6¬∫ Relat√≥rio Parcial",
                "7¬∫ Relat√≥rio Parcial",
                "8¬∫ Relat√≥rio Parcial",
                "9¬∫ Relat√≥rio Parcial",
                "10¬∫ Relat√≥rio Parcial",
                "Relat√≥rio Final"
            ],
            width=300,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        tipo_relatorio.pack(anchor="w", pady=(0, 10))
        
        # CH do relat√≥rio
        ch_frame_rel = ctk.CTkFrame(form_frame, fg_color="transparent")
        ch_frame_rel.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(ch_frame_rel, text="CH do Relat√≥rio:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#d97706").pack(side="left", padx=(0, 10))
        ch_relatorio_entry = ctk.CTkEntry(
            ch_frame_rel,
            placeholder_text="Digite a carga hor√°ria do relat√≥rio",
            width=200,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        ch_relatorio_entry.pack(side="left", padx=(0, 20))
        
        # Arquivo PDF
        ctk.CTkLabel(form_frame, text="Arquivo PDF:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#d97706").pack(anchor="w", pady=(0, 5))
        file_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        file_frame.pack(fill="x", pady=(0, 10))
        
        file_path_var = ctk.StringVar()
        file_entry = ctk.CTkEntry(
            file_frame,
            textvariable=file_path_var,
            placeholder_text="Selecione o arquivo PDF do relat√≥rio",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        file_entry.pack(side="left", padx=(0, 10))
        
        def selecionar_arquivo():
            from tkinter import filedialog
            file_path = filedialog.askopenfilename(
                title="Selecionar Relat√≥rio PDF",
                filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
            )
            if file_path:
                file_path_var.set(file_path)
        
        btn_selecionar = ctk.CTkButton(
            file_frame,
            text="üìÅ Selecionar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#d97706",
            hover_color="#b45309",
            command=selecionar_arquivo
        )
        btn_selecionar.pack(side="left")
        
        # Bot√£o anexar
        def anexar_relatorio():
            tipo = tipo_relatorio.get()
            ch_text = ch_relatorio_entry.get().strip()
            arquivo = file_path_var.get()
            
            if not tipo or not ch_text or not arquivo:
                messagebox.showwarning("Aviso", "Preencha todos os campos!")
                return
            
            try:
                ch_horas = int(ch_text)
                if ch_horas <= 0:
                    messagebox.showwarning("Aviso", "A carga hor√°ria deve ser maior que zero!")
                    return
                
                # Salvar relat√≥rio
                self.salvar_relatorio_estagio(estagio_id, tipo, ch_horas, arquivo)
                
                # Limpar campos
                ch_relatorio_entry.delete(0, 'end')
                file_path_var.set("")
                
                # Atualizar dados na janela
                self.atualizar_dados_controle_estagio(control_window, estagio_id, ch_frame, progress_bar)
                
                messagebox.showinfo("Sucesso", "Relat√≥rio anexado com sucesso!")
                
            except ValueError:
                messagebox.showerror("Erro", "A carga hor√°ria deve ser um n√∫mero v√°lido!")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao anexar relat√≥rio: {str(e)}")
        
        btn_anexar = ctk.CTkButton(
            form_frame,
            text="üìé Anexar Relat√≥rio",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#d97706",
            hover_color="#b45309",
            command=anexar_relatorio
        )
        btn_anexar.pack(anchor="w", pady=(10, 0))
        
        # === SE√á√ÉO: RELAT√ìRIOS ANEXADOS ===
        anexados_frame = ctk.CTkFrame(scroll_frame, fg_color="#f3f4f6")
        anexados_frame.pack(fill="x", pady=(0, 20))
        
        anexados_title = ctk.CTkLabel(
            anexados_frame,
            text="üìã Relat√≥rios Anexados",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#374151"
        )
        anexados_title.pack(pady=(15, 10))
        
        # Tabela de relat√≥rios anexados
        self.carregar_relatorios_anexados(anexados_frame, estagio_id)
        
        # Bot√µes de a√ß√£o
        btn_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        btn_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Bot√£o Salvar Altera√ß√µes
        btn_salvar = ctk.CTkButton(
            btn_frame,
            text="üíæ Salvar Altera√ß√µes",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#28a745",
            hover_color="#218838",
            command=lambda: self.salvar_alteracoes_controle_estagio(control_window, estagio_id)
        )
        btn_salvar.pack(side="left", padx=(0, 10))
        
        btn_fechar = ctk.CTkButton(
            btn_frame,
            text="‚ùå Fechar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#6c757d",
            hover_color="#5a6268",
            command=control_window.destroy
        )
        btn_fechar.pack(side="right")

    def salvar_alteracoes_controle_estagio(self, window, estagio_id):
        """Salvar altera√ß√µes realizadas no controle de est√°gio obrigat√≥rio"""
        try:
            # Aqui voc√™ pode adicionar l√≥gica para salvar altera√ß√µes espec√≠ficas
            # Por exemplo, atualizar status, observa√ß√µes, etc.
            
            # Por enquanto, vamos apenas mostrar uma mensagem de sucesso
            messagebox.showinfo("Sucesso", "Altera√ß√µes salvas com sucesso!")
            
            # Atualizar dados na janela se necess√°rio
            # self.atualizar_dados_controle_estagio(window, estagio_id, ch_frame, progress_bar)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar altera√ß√µes: {str(e)}")

    def salvar_relatorio_estagio(self, estagio_id, tipo_relatorio, ch_horas, arquivo_path):
        """Salvar relat√≥rio anexado ao est√°gio"""
        try:
            import os
            import shutil
            from datetime import datetime
            
            # Criar diret√≥rio de relat√≥rios se n√£o existir
            relatorios_dir = "relatorios_anexados"
            if not os.path.exists(relatorios_dir):
                os.makedirs(relatorios_dir)
            
            # Gerar nome √∫nico para o arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_arquivo = f"estagio_{estagio_id}_{tipo_relatorio.replace(' ', '_')}_{timestamp}.pdf"
            caminho_destino = os.path.join(relatorios_dir, nome_arquivo)
            
            # Copiar arquivo
            shutil.copy2(arquivo_path, caminho_destino)
            
            # Salvar no banco de dados
            self.cursor.execute("""
                INSERT INTO relatorios_anexados 
                (estagio_id, tipo_relatorio, arquivo_path, data_anexo, horas_registradas)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, tipo_relatorio, caminho_destino, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ch_horas))

            # Salvar no controle de CH
            self.cursor.execute("""
                INSERT INTO controle_ch_obrigatorio
                (estagio_id, horas_registradas, data_registro, observacoes)
                VALUES (?, ?, ?, ?)
            """, (estagio_id, ch_horas, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), f"Relat√≥rio: {tipo_relatorio}"))

            self.conn.commit()

            # Sincronizar controle de carga hor√°ria com Supabase se dispon√≠vel
            if SUPABASE_SYNC_AVAILABLE:
                try:
                    # Buscar carga hor√°ria atual do est√°gio
                    self.cursor.execute("""
                        SELECT COALESCE(SUM(horas_registradas), 0) as total_executado,
                               (SELECT carga_horaria FROM estagio_obrigatorio WHERE id = ?) as carga_total
                        FROM controle_ch_obrigatorio
                        WHERE estagio_id = ?
                    """, (estagio_id, estagio_id))

                    resultado = self.cursor.fetchone()
                    carga_executada = resultado[0] if resultado else 0
                    carga_total = resultado[1] if resultado and resultado[1] else 0

                    sync_result = sync_controle_ch_update(estagio_id, carga_executada, carga_total)
                    if sync_result:
                        print(f"‚úÖ Controle CH do est√°gio {estagio_id} sincronizado com Supabase")
                    else:
                        print(f"‚ö†Ô∏è  Falha na sincroniza√ß√£o do controle CH do est√°gio {estagio_id} com Supabase")
                except Exception as e:
                    print(f"‚ùå Erro na sincroniza√ß√£o do controle CH com Supabase: {e}")

        except Exception as e:
            raise Exception(f"Erro ao salvar relat√≥rio: {str(e)}")

    def carregar_relatorios_anexados(self, parent, estagio_id):
        """Carregar tabela de relat√≥rios anexados"""
        try:
            # Buscar relat√≥rios anexados
            self.cursor.execute("""
                SELECT tipo_relatorio, data_anexo, horas_registradas, arquivo_path
                FROM relatorios_anexados 
                WHERE estagio_id = ?
                ORDER BY data_anexo DESC
            """, (estagio_id,))
            
            relatorios = self.cursor.fetchall()
            
            if not relatorios:
                # Mostrar mensagem se n√£o h√° relat√≥rios
                no_data_label = ctk.CTkLabel(
                    parent,
                    text="Nenhum relat√≥rio anexado ainda.",
                    font=ctk.CTkFont(size=12),
                    text_color="#6b7280"
                )
                no_data_label.pack(pady=20)
                return
            
            # Criar tabela
            table_frame = ctk.CTkFrame(parent, fg_color="transparent")
            table_frame.pack(fill="x", padx=20, pady=(0, 15))
            
            # Headers
            headers = ["Tipo", "Data", "CH", "Arquivo"]
            for i, header in enumerate(headers):
                header_label = ctk.CTkLabel(
                    table_frame,
                    text=header,
                    font=ctk.CTkFont(size=12, weight="bold"),
                    text_color="#374151"
                )
                header_label.grid(row=0, column=i, padx=10, pady=5, sticky="w")
            
            # Dados
            for row_idx, relatorio in enumerate(relatorios, 1):
                tipo, data, horas, arquivo = relatorio
                
                # Tipo
                tipo_label = ctk.CTkLabel(
                    table_frame,
                    text=tipo,
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                tipo_label.grid(row=row_idx, column=0, padx=10, pady=2, sticky="w")
                
                # Data
                data_label = ctk.CTkLabel(
                    table_frame,
                    text=data.split()[0] if data else "N/A",
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                data_label.grid(row=row_idx, column=1, padx=10, pady=2, sticky="w")
                
                # CH
                ch_label = ctk.CTkLabel(
                    table_frame,
                    text=f"{horas} horas",
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                ch_label.grid(row=row_idx, column=2, padx=10, pady=2, sticky="w")
                
                # Arquivo
                arquivo_nome = os.path.basename(arquivo) if arquivo else "N/A"
                arquivo_label = ctk.CTkLabel(
                    table_frame,
                    text=arquivo_nome,
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                arquivo_label.grid(row=row_idx, column=3, padx=10, pady=2, sticky="w")
                
        except Exception as e:
            error_label = ctk.CTkLabel(
                parent,
                text=f"Erro ao carregar relat√≥rios: {str(e)}",
                font=ctk.CTkFont(size=12),
                text_color="#ef4444"
            )
            error_label.pack(pady=20)

    def atualizar_dados_controle_estagio(self, window, estagio_id, ch_frame, progress_bar):
        """Atualizar dados de controle do est√°gio ap√≥s anexar relat√≥rio"""
        try:
            # Buscar CH atualizada
            self.cursor.execute("""
                SELECT COALESCE(SUM(horas_registradas), 0) as ch_parcial
                FROM controle_ch_obrigatorio 
                WHERE estagio_id = ?
            """, (estagio_id,))
            
            ch_parcial_result = self.cursor.fetchone()
            ch_parcial = ch_parcial_result[0] if ch_parcial_result else 0
            
            # Buscar CH total
            self.cursor.execute("SELECT carga_horaria FROM estagio_obrigatorio WHERE id = ?", (estagio_id,))
            carga_horaria = self.cursor.fetchone()[0]
            
            ch_restante = carga_horaria - ch_parcial
            percentual = (ch_parcial / carga_horaria * 100) if carga_horaria > 0 else 0
            
            # Atualizar barra de progresso
            progress_bar.set(percentual / 100)
            
            # Atualizar labels de CH (se necess√°rio, pode ser implementado)
            # Por simplicidade, vamos apenas atualizar a barra de progresso
            
        except Exception as e:
            print(f"Erro ao atualizar dados: {e}")

    def create_estagio_nao_obrigatorio_buttons(self, parent):
        """Criar bot√µes de a√ß√£o para est√°gio n√£o obrigat√≥rio"""
        # Frame para bot√µes
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(0, 20))
        
        # Frame para bot√µes √† esquerda
        left_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        left_frame.pack(side="left")
        
        # Bot√µes de a√ß√£o
        btn_novo = ctk.CTkButton(
            left_frame,
            text="‚ûï Novo Est√°gio",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.abrir_formulario_estagio_nao_obrigatorio
        )
        btn_novo.pack(side="left", padx=(0, 10))
        
        btn_editar = ctk.CTkButton(
            left_frame,
            text="‚úèÔ∏è Editar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#f59e0b",
            hover_color="#d97706",
            command=self.editar_estagio_nao_obrigatorio
        )
        btn_editar.pack(side="left", padx=(0, 10))
        
        btn_excluir = ctk.CTkButton(
            left_frame,
            text="üóëÔ∏è Excluir",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#ef4444",
            hover_color="#dc2626",
            command=self.excluir_estagio_nao_obrigatorio
        )
        btn_excluir.pack(side="left", padx=(0, 10))
        
        btn_controle = ctk.CTkButton(
            left_frame,
            text="üìä Controle do Est√°gio",
            width=180,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#8b5cf6",
            hover_color="#7c3aed",
            command=self.abrir_controle_estagio_nao_obrigatorio
        )
        btn_controle.pack(side="left", padx=(0, 10))
        
        # Frame para busca √† direita
        right_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        right_frame.pack(side="right")
        
        # Campo de busca
        self.search_estagio_nao_obrigatorio_entry = ctk.CTkEntry(
            right_frame,
            placeholder_text="Buscar por estudante, orientador ou empresa...",
            width=300,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.search_estagio_nao_obrigatorio_entry.pack(side="left", padx=(0, 10))
        
        btn_buscar = ctk.CTkButton(
            right_frame,
            text="üîç Localizar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.buscar_estagio_nao_obrigatorio
        )
        btn_buscar.pack(side="left")
        
        # Bind Enter para busca
        self.search_estagio_nao_obrigatorio_entry.bind('<Return>', lambda e: self.buscar_estagio_nao_obrigatorio())

    def create_estagio_nao_obrigatorio_table(self, parent):
        """Criar tabela de est√°gio n√£o obrigat√≥rio"""
        # Frame para a tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True)
        
        # Configurar estilo da tabela
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       fieldbackground=self.cor_branco,
                       font=('Arial', 11))
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('ID', 'Estudante', 'Orientador', 'Empresa', 'Data In√≠cio', 'Data T√©rmino', 'Supervisor', 'CRC', 'Carga Hor√°ria', 'CH Parcial', 'Status', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10', 'RF')
        self.tree_estagio_nao_obrigatorio = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_estagio_nao_obrigatorio.heading('ID', text='ID')
        self.tree_estagio_nao_obrigatorio.heading('Estudante', text='Estudante')
        self.tree_estagio_nao_obrigatorio.heading('Orientador', text='Orientador')
        self.tree_estagio_nao_obrigatorio.heading('Empresa', text='Empresa')
        self.tree_estagio_nao_obrigatorio.heading('Data In√≠cio', text='Data In√≠cio')
        self.tree_estagio_nao_obrigatorio.heading('Data T√©rmino', text='Data T√©rmino')
        self.tree_estagio_nao_obrigatorio.heading('Supervisor', text='Supervisor')
        self.tree_estagio_nao_obrigatorio.heading('CRC', text='CRC')
        self.tree_estagio_nao_obrigatorio.heading('Carga Hor√°ria', text='Carga Hor√°ria')
        self.tree_estagio_nao_obrigatorio.heading('CH Parcial', text='CH Parcial')
        self.tree_estagio_nao_obrigatorio.heading('Status', text='Status')
        self.tree_estagio_nao_obrigatorio.heading('R1', text='R1')
        self.tree_estagio_nao_obrigatorio.heading('R2', text='R2')
        self.tree_estagio_nao_obrigatorio.heading('R3', text='R3')
        self.tree_estagio_nao_obrigatorio.heading('R4', text='R4')
        self.tree_estagio_nao_obrigatorio.heading('R5', text='R5')
        self.tree_estagio_nao_obrigatorio.heading('R6', text='R6')
        self.tree_estagio_nao_obrigatorio.heading('R7', text='R7')
        self.tree_estagio_nao_obrigatorio.heading('R8', text='R8')
        self.tree_estagio_nao_obrigatorio.heading('R9', text='R9')
        self.tree_estagio_nao_obrigatorio.heading('R10', text='R10')
        self.tree_estagio_nao_obrigatorio.heading('RF', text='RF')
        
        # Configurar larguras das colunas
        self.tree_estagio_nao_obrigatorio.column('ID', width=50, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Estudante', width=120, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Orientador', width=120, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Empresa', width=120, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Data In√≠cio', width=80, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Data T√©rmino', width=80, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Supervisor', width=100, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('CRC', width=70, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Carga Hor√°ria', width=80, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('CH Parcial', width=80, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('Status', width=80, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R1', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R2', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R3', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R4', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R5', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R6', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R7', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R8', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R9', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('R10', width=40, anchor='center')
        self.tree_estagio_nao_obrigatorio.column('RF', width=40, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_estagio_nao_obrigatorio.yview)
        self.tree_estagio_nao_obrigatorio.configure(yscrollcommand=scrollbar.set)
        
        # Posicionar tabela e scrollbar
        self.tree_estagio_nao_obrigatorio.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind evento de clique duplo na coluna de a√ß√£o
        self.tree_estagio_nao_obrigatorio.bind('<Double-1>', self.on_double_click_estagio_nao_obrigatorio)
        
        # Bind clique direito para menu de contexto
        self.tree_estagio_nao_obrigatorio.bind('<Button-3>', self.show_context_menu_nao_obrigatorio)
        
        # Bind Enter para abrir detalhes
        self.tree_estagio_nao_obrigatorio.bind('<Return>', lambda e: self.abrir_detalhes_estagio_nao_obrigatorio())
        
        # Bind F2 para abrir detalhes
        self.tree_estagio_nao_obrigatorio.bind('<F2>', lambda e: self.abrir_detalhes_estagio_nao_obrigatorio())

    def create_certificados_obrigatorio_table(self, parent):
        """Criar tabela de certificados para est√°gios obrigat√≥rios"""
        # Frame para a tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20)
        
        # Configurar estilo da tabela
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       fieldbackground=self.cor_branco,
                       font=('Arial', 11))
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('ID', 'Estudante', 'CPF', 'Empresa', 'Orientador', 'Data In√≠cio', 'Data T√©rmino', 'CH Total', 'CH Cumprida', 'Status', 'A√ß√£o')
        self.tree_cert_obrigatorio = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_cert_obrigatorio.heading('ID', text='ID')
        self.tree_cert_obrigatorio.heading('Estudante', text='Estudante')
        self.tree_cert_obrigatorio.heading('CPF', text='CPF')
        self.tree_cert_obrigatorio.heading('Empresa', text='Empresa')
        self.tree_cert_obrigatorio.heading('Orientador', text='Orientador')
        self.tree_cert_obrigatorio.heading('Data In√≠cio', text='Data In√≠cio')
        self.tree_cert_obrigatorio.heading('Data T√©rmino', text='Data T√©rmino')
        self.tree_cert_obrigatorio.heading('CH Total', text='CH Total')
        self.tree_cert_obrigatorio.heading('CH Cumprida', text='CH Cumprida')
        self.tree_cert_obrigatorio.heading('Status', text='Status')
        self.tree_cert_obrigatorio.heading('A√ß√£o', text='A√ß√£o')
        
        # Configurar larguras das colunas
        self.tree_cert_obrigatorio.column('ID', width=50, anchor='center')
        self.tree_cert_obrigatorio.column('Estudante', width=150, anchor='center')
        self.tree_cert_obrigatorio.column('CPF', width=120, anchor='center')
        self.tree_cert_obrigatorio.column('Empresa', width=130, anchor='center')
        self.tree_cert_obrigatorio.column('Orientador', width=130, anchor='center')
        self.tree_cert_obrigatorio.column('Data In√≠cio', width=100, anchor='center')
        self.tree_cert_obrigatorio.column('Data T√©rmino', width=100, anchor='center')
        self.tree_cert_obrigatorio.column('CH Total', width=80, anchor='center')
        self.tree_cert_obrigatorio.column('CH Cumprida', width=80, anchor='center')
        self.tree_cert_obrigatorio.column('Status', width=100, anchor='center')
        self.tree_cert_obrigatorio.column('A√ß√£o', width=120, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_cert_obrigatorio.yview)
        self.tree_cert_obrigatorio.configure(yscrollcommand=scrollbar.set)
        
        # Posicionar tabela e scrollbar
        self.tree_cert_obrigatorio.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind duplo clique para gerar certificado
        self.tree_cert_obrigatorio.bind('<Double-1>', self.gerar_certificado_obrigatorio)

    def create_certificados_nao_obrigatorio_table(self, parent):
        """Criar tabela de certificados para est√°gios n√£o obrigat√≥rios"""
        # Frame para a tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20)
        
        # Configurar estilo da tabela
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       fieldbackground=self.cor_branco,
                       font=('Arial', 11))
        style.configure("Treeview.Heading",
                       background=self.cor_secundaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('ID', 'Estudante', 'CPF', 'Empresa', 'Orientador', 'Data In√≠cio', 'Data T√©rmino', 'CH Total', 'CH Cumprida', 'Status', 'A√ß√£o')
        self.tree_cert_nao_obrigatorio = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_cert_nao_obrigatorio.heading('ID', text='ID')
        self.tree_cert_nao_obrigatorio.heading('Estudante', text='Estudante')
        self.tree_cert_nao_obrigatorio.heading('CPF', text='CPF')
        self.tree_cert_nao_obrigatorio.heading('Empresa', text='Empresa')
        self.tree_cert_nao_obrigatorio.heading('Orientador', text='Orientador')
        self.tree_cert_nao_obrigatorio.heading('Data In√≠cio', text='Data In√≠cio')
        self.tree_cert_nao_obrigatorio.heading('Data T√©rmino', text='Data T√©rmino')
        self.tree_cert_nao_obrigatorio.heading('CH Total', text='CH Total')
        self.tree_cert_nao_obrigatorio.heading('CH Cumprida', text='CH Cumprida')
        self.tree_cert_nao_obrigatorio.heading('Status', text='Status')
        self.tree_cert_nao_obrigatorio.heading('A√ß√£o', text='A√ß√£o')
        
        # Configurar larguras das colunas
        self.tree_cert_nao_obrigatorio.column('ID', width=50, anchor='center')
        self.tree_cert_nao_obrigatorio.column('Estudante', width=150, anchor='center')
        self.tree_cert_nao_obrigatorio.column('CPF', width=120, anchor='center')
        self.tree_cert_nao_obrigatorio.column('Empresa', width=130, anchor='center')
        self.tree_cert_nao_obrigatorio.column('Orientador', width=130, anchor='center')
        self.tree_cert_nao_obrigatorio.column('Data In√≠cio', width=100, anchor='center')
        self.tree_cert_nao_obrigatorio.column('Data T√©rmino', width=100, anchor='center')
        self.tree_cert_nao_obrigatorio.column('CH Total', width=80, anchor='center')
        self.tree_cert_nao_obrigatorio.column('CH Cumprida', width=80, anchor='center')
        self.tree_cert_nao_obrigatorio.column('Status', width=100, anchor='center')
        self.tree_cert_nao_obrigatorio.column('A√ß√£o', width=120, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_cert_nao_obrigatorio.yview)
        self.tree_cert_nao_obrigatorio.configure(yscrollcommand=scrollbar.set)
        
        # Posicionar tabela e scrollbar
        self.tree_cert_nao_obrigatorio.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind duplo clique para gerar certificado
        self.tree_cert_nao_obrigatorio.bind('<Double-1>', self.gerar_certificado_nao_obrigatorio)

    def carregar_estagio_nao_obrigatorio(self):
        """Carregar est√°gios n√£o obrigat√≥rios na tabela"""
        # Limpar tabela
        for item in self.tree_estagio_nao_obrigatorio.get_children():
            self.tree_estagio_nao_obrigatorio.delete(item)
        
        # Determinar se deve filtrar por professor
        usuario_id = self.usuario_logado.get('id') if self.usuario_logado else None
        is_admin = self.usuario_logado.get('administrador', False) if self.usuario_logado else False
        
        # Query base
        query = """
            SELECT eno.id, est.nome, ori.nome, emp.nome, eno.data_inicio, eno.data_termino, 
                   eno.nome_supervisor, eno.registro_crc, eno.carga_horaria, eno.status,
                   COALESCE(SUM(ch.horas_registradas), 0) as ch_parcial
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            LEFT JOIN controle_ch_nao_obrigatorio ch ON eno.id = ch.estagio_id
        """
        
        # Adicionar filtro por professor se n√£o for administrador
        if not is_admin and usuario_id:
            query += " WHERE eno.orientador_id = ?"
            query += " GROUP BY eno.id, est.nome, ori.nome, emp.nome, eno.data_inicio, eno.data_termino, "
            query += "          eno.nome_supervisor, eno.registro_crc, eno.carga_horaria, eno.status"
            query += " ORDER BY eno.data_inicio DESC"
            self.cursor.execute(query, (usuario_id,))
        else:
            query += " GROUP BY eno.id, est.nome, ori.nome, emp.nome, eno.data_inicio, eno.data_termino, "
            query += "          eno.nome_supervisor, eno.registro_crc, eno.carga_horaria, eno.status"
            query += " ORDER BY eno.data_inicio DESC"
            self.cursor.execute(query)
        
        estagios = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for estagio in estagios:
            estagio_id = estagio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Determinar checkboxes dos relat√≥rios
            r1 = "‚úÖ" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r2 = "‚úÖ" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r3 = "‚úÖ" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r4 = "‚úÖ" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r5 = "‚úÖ" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r6 = "‚úÖ" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r7 = "‚úÖ" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r8 = "‚úÖ" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r9 = "‚úÖ" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r10 = "‚úÖ" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            rf = "‚úÖ" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå"
            
            # Inserir dados do est√°gio incluindo CH Parcial e todos os relat√≥rios
            ch_parcial = estagio[10]  # CH Parcial est√° no √≠ndice 10 da query
            # Reorganizar dados: ID, Nome, Orientador, Empresa, Data In√≠cio, Data T√©rmino, Supervisor, CRC, Carga Hor√°ria, CH Parcial, Status, R1-R10, RF
            valores = estagio[:9] + (ch_parcial, estagio[9]) + (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rf)
            self.tree_estagio_nao_obrigatorio.insert('', 'end', values=valores)

    def buscar_estagio_nao_obrigatorio(self):
        """Buscar est√°gios n√£o obrigat√≥rios"""
        termo = self.search_estagio_nao_obrigatorio_entry.get().strip()
        
        if not termo:
            self.carregar_estagio_nao_obrigatorio()
            return
        
        # Limpar tabela
        for item in self.tree_estagio_nao_obrigatorio.get_children():
            self.tree_estagio_nao_obrigatorio.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT eno.id, est.nome, ori.nome, emp.nome, eno.data_inicio, eno.data_termino, 
                   eno.nome_supervisor, eno.registro_crc, eno.carga_horaria, eno.status,
                   COALESCE(SUM(ch.horas_registradas), 0) as ch_parcial
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            LEFT JOIN controle_ch_nao_obrigatorio ch ON eno.id = ch.estagio_id
            WHERE est.nome LIKE ? OR ori.nome LIKE ? OR emp.nome LIKE ? OR eno.nome_supervisor LIKE ?
            GROUP BY eno.id, est.nome, ori.nome, emp.nome, eno.data_inicio, eno.data_termino, 
                     eno.nome_supervisor, eno.registro_crc, eno.carga_horaria, eno.status
            ORDER BY eno.data_inicio DESC
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        estagios = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for estagio in estagios:
            estagio_id = estagio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Determinar checkboxes dos relat√≥rios
            r1 = "‚úÖ" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r2 = "‚úÖ" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r3 = "‚úÖ" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r4 = "‚úÖ" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r5 = "‚úÖ" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r6 = "‚úÖ" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r7 = "‚úÖ" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r8 = "‚úÖ" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r9 = "‚úÖ" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r10 = "‚úÖ" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            rf = "‚úÖ" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå"
            
            # Inserir dados do est√°gio incluindo CH Parcial e todos os relat√≥rios
            ch_parcial = estagio[10]  # CH Parcial est√° no √≠ndice 10 da query
            # Reorganizar dados: ID, Nome, Orientador, Empresa, Data In√≠cio, Data T√©rmino, Supervisor, CRC, Carga Hor√°ria, CH Parcial, Status, R1-R10, RF
            valores = estagio[:9] + (ch_parcial, estagio[9]) + (r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rf)
            self.tree_estagio_nao_obrigatorio.insert('', 'end', values=valores)

    def carregar_certificados_obrigatorio(self):
        """Carregar dados para certificados de est√°gios obrigat√≥rios"""
        # Limpar tabela
        for item in self.tree_cert_obrigatorio.get_children():
            self.tree_cert_obrigatorio.delete(item)
        
        # Buscar est√°gios obrigat√≥rios com dados completos
        # Se for professor, filtrar apenas seus alunos
        if self.usuario_logado and self.usuario_logado.get('perfil') == 'professor':
            self.cursor.execute("""
                SELECT 
                    eo.id,
                    est.nome,
                    est.cpf,
                    emp.nome,
                    ori.nome,
                    eo.data_inicio,
                    eo.data_termino,
                    eo.carga_horaria,
                    COALESCE(SUM(ch.horas_registradas), 0) as ch_cumprida,
                    CASE 
                        WHEN COALESCE(SUM(ch.horas_registradas), 0) >= eo.carga_horaria THEN 'Conclu√≠do'
                        ELSE 'Em Andamento'
                    END as status
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                LEFT JOIN controle_ch_obrigatorio ch ON eo.id = ch.estagio_id
                WHERE eo.status = 'Ativo' AND eo.orientador_id = ?
                GROUP BY eo.id, est.nome, est.cpf, emp.nome, ori.nome, eo.data_inicio, eo.data_termino, eo.carga_horaria
                ORDER BY est.nome
            """, (self.usuario_logado.get('id') if self.usuario_logado else 0,))
        else:
            # Se for administrador, mostrar todos
            self.cursor.execute("""
                SELECT 
                    eo.id,
                    est.nome,
                    est.cpf,
                    emp.nome,
                    ori.nome,
                    eo.data_inicio,
                    eo.data_termino,
                    eo.carga_horaria,
                    COALESCE(SUM(ch.horas_registradas), 0) as ch_cumprida,
                    CASE 
                        WHEN COALESCE(SUM(ch.horas_registradas), 0) >= eo.carga_horaria THEN 'Conclu√≠do'
                        ELSE 'Em Andamento'
                    END as status
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                LEFT JOIN controle_ch_obrigatorio ch ON eo.id = ch.estagio_id
                WHERE eo.status = 'Ativo'
                GROUP BY eo.id, est.nome, est.cpf, emp.nome, ori.nome, eo.data_inicio, eo.data_termino, eo.carga_horaria
                ORDER BY est.nome
            """)
        estagios = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for estagio in estagios:
            # Determinar a√ß√£o baseada no status
            acao = "üèÜ Gerar Certificado" if estagio[9] == "Conclu√≠do" else "‚è≥ Aguardando"
            
            valores = estagio + (acao,)
            self.tree_cert_obrigatorio.insert('', 'end', values=valores)

    def buscar_certificados_obrigatorio(self):
        """Buscar certificados de est√°gios obrigat√≥rios"""
        termo = self.search_cert_obrig_entry.get().strip()
        
        if not termo:
            self.carregar_certificados_obrigatorio()
            return
        
        # Limpar tabela
        for item in self.tree_cert_obrigatorio.get_children():
            self.tree_cert_obrigatorio.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT 
                eo.id,
                est.nome,
                est.cpf,
                emp.nome,
                ori.nome,
                eo.data_inicio,
                eo.data_termino,
                eo.carga_horaria,
                COALESCE(SUM(ch.horas_registradas), 0) as ch_cumprida,
                CASE 
                    WHEN COALESCE(SUM(ch.horas_registradas), 0) >= eo.carga_horaria THEN 'Conclu√≠do'
                    ELSE 'Em Andamento'
                END as status
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN orientadores ori ON eo.orientador_id = ori.id
            JOIN empresas emp ON eo.empresa_id = emp.id
            LEFT JOIN controle_ch_obrigatorio ch ON eo.id = ch.estagio_id
            WHERE eo.status = 'Ativo' AND (est.nome LIKE ? OR emp.nome LIKE ? OR ori.nome LIKE ?)
            GROUP BY eo.id, est.nome, est.cpf, emp.nome, ori.nome, eo.data_inicio, eo.data_termino, eo.carga_horaria
            ORDER BY est.nome
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        estagios = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for estagio in estagios:
            # Determinar a√ß√£o baseada no status
            acao = "üèÜ Gerar Certificado" if estagio[9] == "Conclu√≠do" else "‚è≥ Aguardando"
            
            valores = estagio + (acao,)
            self.tree_cert_obrigatorio.insert('', 'end', values=valores)

    def carregar_certificados_nao_obrigatorio(self):
        """Carregar dados para certificados de est√°gios n√£o obrigat√≥rios"""
        # Limpar tabela
        for item in self.tree_cert_nao_obrigatorio.get_children():
            self.tree_cert_nao_obrigatorio.delete(item)
        
        # Buscar est√°gios n√£o obrigat√≥rios com dados completos
        # Se for professor, filtrar apenas seus alunos
        if self.usuario_logado and self.usuario_logado.get('perfil') == 'professor':
            self.cursor.execute("""
                SELECT 
                    eno.id,
                    est.nome,
                    est.cpf,
                    emp.nome,
                    ori.nome,
                    eno.data_inicio,
                    eno.data_termino,
                    eno.carga_horaria,
                    COALESCE(SUM(ch.horas_registradas), 0) as ch_cumprida,
                    CASE 
                        WHEN COALESCE(SUM(ch.horas_registradas), 0) >= eno.carga_horaria THEN 'Conclu√≠do'
                        ELSE 'Em Andamento'
                    END as status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes est ON eno.estudante_id = est.id
                JOIN orientadores ori ON eno.orientador_id = ori.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                LEFT JOIN controle_ch_nao_obrigatorio ch ON eno.id = ch.estagio_id
                WHERE eno.status = 'Ativo' AND eno.orientador_id = ?
                GROUP BY eno.id, est.nome, est.cpf, emp.nome, ori.nome, eno.data_inicio, eno.data_termino, eno.carga_horaria
                ORDER BY est.nome
            """, (self.usuario_logado.get('id') if self.usuario_logado else 0,))
        else:
            # Se for administrador, mostrar todos
            self.cursor.execute("""
                SELECT 
                    eno.id,
                    est.nome,
                    est.cpf,
                    emp.nome,
                    ori.nome,
                    eno.data_inicio,
                    eno.data_termino,
                    eno.carga_horaria,
                    COALESCE(SUM(ch.horas_registradas), 0) as ch_cumprida,
                    CASE 
                        WHEN COALESCE(SUM(ch.horas_registradas), 0) >= eno.carga_horaria THEN 'Conclu√≠do'
                        ELSE 'Em Andamento'
                    END as status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes est ON eno.estudante_id = est.id
                JOIN orientadores ori ON eno.orientador_id = ori.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                LEFT JOIN controle_ch_nao_obrigatorio ch ON eno.id = ch.estagio_id
                WHERE eno.status = 'Ativo'
                GROUP BY eno.id, est.nome, est.cpf, emp.nome, ori.nome, eno.data_inicio, eno.data_termino, eno.carga_horaria
                ORDER BY est.nome
            """)
        estagios = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for estagio in estagios:
            # Determinar a√ß√£o baseada no status
            acao = "üèÜ Gerar Certificado" if estagio[9] == "Conclu√≠do" else "‚è≥ Aguardando"
            
            valores = estagio + (acao,)
            self.tree_cert_nao_obrigatorio.insert('', 'end', values=valores)

    def buscar_certificados_nao_obrigatorio(self):
        """Buscar certificados de est√°gios n√£o obrigat√≥rios"""
        termo = self.search_cert_nao_obrig_entry.get().strip()
        
        if not termo:
            self.carregar_certificados_nao_obrigatorio()
            return
        
        # Limpar tabela
        for item in self.tree_cert_nao_obrigatorio.get_children():
            self.tree_cert_nao_obrigatorio.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT 
                eno.id,
                est.nome,
                est.cpf,
                emp.nome,
                ori.nome,
                eno.data_inicio,
                eno.data_termino,
                eno.carga_horaria,
                COALESCE(SUM(ch.horas_registradas), 0) as ch_cumprida,
                CASE 
                    WHEN COALESCE(SUM(ch.horas_registradas), 0) >= eno.carga_horaria THEN 'Conclu√≠do'
                    ELSE 'Em Andamento'
                END as status
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            LEFT JOIN controle_ch_nao_obrigatorio ch ON eno.id = ch.estagio_id
            WHERE eno.status = 'Ativo' AND (est.nome LIKE ? OR emp.nome LIKE ? OR ori.nome LIKE ?)
            GROUP BY eno.id, est.nome, est.cpf, emp.nome, ori.nome, eno.data_inicio, eno.data_termino, eno.data_inicio, eno.carga_horaria
            ORDER BY est.nome
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        estagios = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for estagio in estagios:
            # Determinar a√ß√£o baseada no status
            acao = "üèÜ Gerar Certificado" if estagio[9] == "Conclu√≠do" else "‚è≥ Aguardando"
            
            valores = estagio + (acao,)
            self.tree_cert_nao_obrigatorio.insert('', 'end', values=valores)

    def gerar_certificado_obrigatorio(self, event):
        """Gerar certificado para est√°gio obrigat√≥rio"""
        selected = self.tree_cert_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um estudante para gerar o certificado!")
            return
        
        item = self.tree_cert_obrigatorio.item(selected[0])
        values = item['values']
        
        # Verificar se o est√°gio est√° conclu√≠do
        if values[9] != "Conclu√≠do":
            messagebox.showwarning("Aviso", "O certificado s√≥ pode ser gerado para est√°gios conclu√≠dos!")
            return
        
        # Dados do est√°gio
        estagio_id = values[0]
        nome_estudante = values[1]
        cpf_estudante = values[2]
        nome_empresa = values[3]
        nome_orientador = values[4]
        data_inicio = values[5]
        data_termino = values[6]
        ch_total = values[7]
        ch_cumprida = values[8]
        
        try:
            # Criar estrutura de pastas
            import os
            certificados_dir = os.path.join("certificados", "Obrigat√≥rios")
            if not os.path.exists(certificados_dir):
                os.makedirs(certificados_dir)
            
            # Verificar se existe o modelo
            modelo_path = os.path.join("certificados", "modelo.docx")
            if not os.path.exists(modelo_path):
                messagebox.showerror("Erro", f"Arquivo modelo n√£o encontrado em: {os.path.abspath(modelo_path)}")
                return
            
            # Gerar o certificado
            self.processar_certificado(
                modelo_path,
                certificados_dir,
                nome_estudante,
                cpf_estudante,
                nome_empresa,
                nome_orientador,
                data_inicio,
                data_termino,
                ch_total,
                ch_cumprida,
                "Obrigat√≥rio"
            )
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar certificado: {str(e)}")

    def gerar_certificado_nao_obrigatorio(self, event):
        """Gerar certificado para est√°gio n√£o obrigat√≥rio"""
        selected = self.tree_cert_nao_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um estudante para gerar o certificado!")
            return
        
        item = self.tree_cert_nao_obrigatorio.item(selected[0])
        values = item['values']
        
        # Verificar se o est√°gio est√° conclu√≠do
        if values[9] != "Conclu√≠do":
            messagebox.showwarning("Aviso", "O certificado s√≥ pode ser gerado para est√°gios conclu√≠dos!")
            return
        
        # Dados do est√°gio
        estagio_id = values[0]
        nome_estudante = values[1]
        cpf_estudante = values[2]
        nome_empresa = values[3]
        nome_orientador = values[4]
        data_inicio = values[5]
        data_termino = values[6]
        ch_total = values[7]
        ch_cumprida = values[8]
        
        try:
            # Criar estrutura de pastas
            import os
            certificados_dir = os.path.join("certificados", "N√£o Obrigat√≥rios")
            if not os.path.exists(certificados_dir):
                os.makedirs(certificados_dir)
            
            # Verificar se existe o modelo
            modelo_path = os.path.join("certificados", "modelo.docx")
            if not os.path.exists(modelo_path):
                messagebox.showerror("Erro", f"Arquivo modelo n√£o encontrado em: {os.path.abspath(modelo_path)}")
                return
            
            # Gerar o certificado
            self.processar_certificado(
                modelo_path,
                certificados_dir,
                nome_estudante,
                cpf_estudante,
                nome_empresa,
                nome_orientador,
                data_inicio,
                data_termino,
                ch_total,
                ch_cumprida,
                "N√£o Obrigat√≥rio"
            )
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar certificado: {str(e)}")

    def processar_certificado(self, modelo_path, certificados_dir, nome_estudante, cpf_estudante, 
                            nome_empresa, nome_orientador, data_inicio, data_termino, 
                            ch_total, ch_cumprida, tipo_estagio):
        """Processar e gerar o certificado usando o modelo"""
        try:
            try:
                from docx import Document
            except ImportError:
                raise ImportError("python-docx n√£o est√° instalado. Instale com: pip install python-docx")
            import shutil
            from datetime import datetime
            
            # Carregar o documento modelo
            doc = Document(modelo_path)
            
            # Dados para substitui√ß√£o
            substituicoes = {
                '[NOME_ESTUDANTE]': nome_estudante.upper(),
                '[CPF_ESTUDANTE]': cpf_estudante,
                '[NOME_EMPRESA]': nome_empresa.upper(),
                '[NOME_ORIENTADOR]': nome_orientador,
                '[DATA_INICIO]': data_inicio,
                '[DATA_TERMINO]': data_termino,
                '[CARGA_HORARIA]': str(ch_total),
                '[CH_CUMPRIDA]': str(ch_cumprida),
                '[TIPO_ESTAGIO]': tipo_estagio,
                '[DATA_EMISSAO]': datetime.now().strftime("%d/%m/%Y")
            }
            
            # Substituir texto nos par√°grafos
            for paragraph in doc.paragraphs:
                for placeholder, value in substituicoes.items():
                    if placeholder in paragraph.text:
                        paragraph.text = paragraph.text.replace(placeholder, value)
            
            # Substituir texto nas tabelas
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        for placeholder, value in substituicoes.items():
                            if placeholder in cell.text:
                                cell.text = cell.text.replace(placeholder, value)
            
            # Nome do arquivo de sa√≠da
            nome_arquivo = f"{nome_estudante.replace(' ', '_')}_Certificado_{tipo_estagio.replace(' ', '_')}.docx"
            caminho_saida = os.path.join(certificados_dir, nome_arquivo)
            
            # Salvar o documento
            doc.save(caminho_saida)
            
            # Mostrar mensagem de sucesso
            messagebox.showinfo("Sucesso", 
                f"‚úÖ Certificado gerado com sucesso!\n\n"
                f"üë§ Estudante: {nome_estudante}\n"
                f"üè¢ Empresa: {nome_empresa}\n"
                f"‚è∞ Carga Hor√°ria: {ch_cumprida}h de {ch_total}h\n\n"
                f"üìÅ Salvo em: {os.path.abspath(caminho_saida)}")
            
            # Perguntar se deseja abrir o arquivo
            if messagebox.askyesno("Abrir Certificado", "Deseja abrir o certificado gerado?"):
                import subprocess
                import platform
                
                if platform.system() == 'Windows':
                    os.startfile(caminho_saida)
                elif platform.system() == 'Darwin':  # macOS
                    subprocess.call(['open', caminho_saida])
                else:  # Linux
                    subprocess.call(['xdg-open', caminho_saida])
            
        except ImportError:
            messagebox.showerror("Erro", 
                "Biblioteca python-docx n√£o encontrada!\n\n"
                "Execute: pip install python-docx")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao processar certificado: {str(e)}")

    def abrir_detalhes_por_id(self, estagio_id):
        """Abrir detalhes do est√°gio usando o ID diretamente"""
        # Buscar dados completos do est√°gio
        self.cursor.execute("""
            SELECT eno.id, eno.estudante_id, est.nome, est.matricula, est.email, est.telefone, est.cpf,
                   eno.orientador_id, ori.nome, ori.siape, ori.email_institucional,
                   eno.empresa_id, emp.nome, emp.cnpj, emp.telefone, emp.cidade, emp.responsavel,
                   eno.data_inicio, eno.data_termino, eno.nome_supervisor, eno.registro_crc, 
                   eno.carga_horaria, eno.status, eno.data_cadastro
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            WHERE eno.id = ?
        """, (estagio_id,))
        
        estagio_dados = self.cursor.fetchone()
        if not estagio_dados:
            messagebox.showerror("Erro", "Dados do est√°gio n√£o encontrados!")
            return
            
        # Abrir janela de detalhes com os dados
        self.criar_janela_detalhes_nao_obrigatorio(estagio_dados)

    def criar_janela_detalhes_nao_obrigatorio(self, estagio_dados):
        """Criar janela de detalhes do est√°gio n√£o obrigat√≥rio - VERS√ÉO SIMPLES"""
        try:
            # Criar janela
            detalhes_window = ctk.CTkToplevel(self.root)
            detalhes_window.title("üìã Detalhes do Est√°gio N√£o Obrigat√≥rio")
            detalhes_window.geometry("800x600")
            detalhes_window.transient(self.root)
            detalhes_window.grab_set()
            
            # Centralizar
            detalhes_window.update_idletasks()
            x = (detalhes_window.winfo_screenwidth() // 2) - (800 // 2)
            y = (detalhes_window.winfo_screenheight() // 2) - (600 // 2)
            detalhes_window.geometry(f"800x600+{x}+{y}")
            
            # Frame principal
            main_frame = ctk.CTkFrame(detalhes_window)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo
            titulo = ctk.CTkLabel(
                main_frame,
                text="‚úÖ DETALHES DO EST√ÅGIO N√ÉO OBRIGAT√ìRIO",
                font=ctk.CTkFont(size=18, weight="bold"),
                text_color="green"
            )
            titulo.pack(pady=20)
            
            # Informa√ß√µes b√°sicas
            info_frame = ctk.CTkFrame(main_frame)
            info_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # Dados b√°sicos
            ctk.CTkLabel(info_frame, text=f"üÜî ID: {estagio_dados[0]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üë§ Estudante: {estagio_dados[2]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üë®‚Äçüè´ Orientador: {estagio_dados[8]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üè¢ Empresa: {estagio_dados[12]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üìÖ In√≠cio: {estagio_dados[17]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üìÖ T√©rmino: {estagio_dados[18]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üìä Status: {estagio_dados[21]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            
            # Bot√µes
            botoes_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            botoes_frame.pack(fill="x", pady=20)
            
            # Bot√£o Fechar
            btn_fechar = ctk.CTkButton(
                botoes_frame,
                text="‚ùå Fechar",
                command=detalhes_window.destroy,
                width=100,
                height=40,
                fg_color="#F44336",
                hover_color="#DA190B"
            )
            btn_fechar.pack(side="right", padx=10)
            
            # Mensagem de sucesso
            ctk.CTkLabel(
                main_frame,
                text="üéâ DETALHES CARREGADOS COM SUCESSO!",
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color="green"
            ).pack(pady=10)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao criar janela: {str(e)}")
            print(f"Erro: {e}")
            import traceback
            traceback.print_exc()


        

    

    def show_context_menu_nao_obrigatorio(self, event):
        """Mostrar menu de contexto ao clicar com bot√£o direito"""
        try:
            # Identificar item clicado
            item = self.tree_estagio_nao_obrigatorio.identify('item', event.x, event.y)
            if not item:
                return
            
            # Selecionar o item
            self.tree_estagio_nao_obrigatorio.selection_set(item)
            self.tree_estagio_nao_obrigatorio.focus(item)
            
            # Criar menu de contexto
            import tkinter as tk
            context_menu = tk.Menu(self.root, tearoff=0)
            context_menu.add_command(label="üîç Ver Detalhes", command=self.abrir_detalhes_estagio_nao_obrigatorio)
            context_menu.add_separator()
            context_menu.add_command(label="‚úèÔ∏è Editar", command=self.editar_estagio_nao_obrigatorio)
            context_menu.add_command(label="üóëÔ∏è Excluir", command=self.excluir_estagio_nao_obrigatorio)
            
            # Mostrar menu na posi√ß√£o do mouse
            context_menu.post(event.x_root, event.y_root)
            
        except Exception as e:
            print(f"Erro no menu de contexto: {e}")

    def limpar_botoes_detalhes_nao_obrigatorio(self):
        """Limpar todos os bot√µes de detalhes antes de recarregar a tabela"""
        if hasattr(self, 'botoes_detalhes_nao_obrigatorio'):
            for btn in self.botoes_detalhes_nao_obrigatorio:
                btn.destroy()
            self.botoes_detalhes_nao_obrigatorio = []

    def on_double_click_estagio_nao_obrigatorio(self, event):
        """Evento de clique duplo na tabela de est√°gio n√£o obrigat√≥rio"""
        selected = self.tree_estagio_nao_obrigatorio.selection()
        if not selected:
            return
            
        item = self.tree_estagio_nao_obrigatorio.item(selected[0])
        estagio_id = item['values'][0]  # ID est√° na primeira coluna
        
        # Abrir detalhes diretamente pelo ID
        self.abrir_detalhes_por_id(estagio_id)

    def abrir_detalhes_estagio_nao_obrigatorio(self):
        """Abrir janela de detalhes do est√°gio n√£o obrigat√≥rio - VERS√ÉO LIMPA"""
        try:
            selected = self.tree_estagio_nao_obrigatorio.selection()
            if not selected:
                messagebox.showwarning("Aviso", "Selecione um est√°gio para ver os detalhes!")
                return
            
            item = self.tree_estagio_nao_obrigatorio.item(selected[0])
            estagio_id = item['values'][0]  # ID est√° na primeira coluna
            
            # Criar janela simples que funciona
            self.criar_janela_detalhes_simples(estagio_id)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir detalhes: {str(e)}")

    def criar_janela_detalhes_simples(self, estagio_id):
        """Criar janela de detalhes simples que funciona"""
        try:
            # Buscar dados do est√°gio
            self.cursor.execute("""
                SELECT eno.id, est.nome, ori.nome, emp.nome, eno.data_inicio, eno.data_termino, eno.status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes est ON eno.estudante_id = est.id
                JOIN orientadores ori ON eno.orientador_id = ori.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                WHERE eno.id = ?
            """, (estagio_id,))
            
            dados = self.cursor.fetchone()
            if not dados:
                messagebox.showerror("Erro", "Dados n√£o encontrados!")
                return
            
            # Criar janela
            janela = ctk.CTkToplevel(self.root)
            janela.title("üìã Detalhes do Est√°gio N√£o Obrigat√≥rio")
            janela.geometry("600x400")
            janela.transient(self.root)
            janela.grab_set()
            
            # Centralizar
            janela.update_idletasks()
            x = (janela.winfo_screenwidth() // 2) - (600 // 2)
            y = (janela.winfo_screenheight() // 2) - (400 // 2)
            janela.geometry(f"600x400+{x}+{y}")
            
            # Conte√∫do
            frame = ctk.CTkFrame(janela)
            frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo
            ctk.CTkLabel(frame, text="‚úÖ DETALHES DO EST√ÅGIO", 
                        font=ctk.CTkFont(size=18, weight="bold"),
                        text_color="green").pack(pady=20)
            
            # Dados
            info_frame = ctk.CTkFrame(frame)
            info_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            ctk.CTkLabel(info_frame, text=f"üÜî ID: {dados[0]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üë§ Estudante: {dados[1]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üë®‚Äçüè´ Orientador: {dados[2]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üè¢ Empresa: {dados[3]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üìÖ In√≠cio: {dados[4]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üìÖ T√©rmino: {dados[5]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            ctk.CTkLabel(info_frame, text=f"üìä Status: {dados[6]}", 
                        font=ctk.CTkFont(size=14)).pack(pady=5, anchor="w")
            
            # Bot√£o fechar
            ctk.CTkButton(frame, text="‚ùå Fechar", command=janela.destroy,
                         width=100, height=40, fg_color="#F44336").pack(pady=20)
            
            print("‚úÖ Janela de detalhes criada com sucesso!")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao criar janela: {str(e)}")
            print(f"Erro: {e}")
            import traceback
            traceback.print_exc()
        self.cursor.execute("""
            SELECT eno.id, eno.estudante_id, est.nome, est.matricula, est.email, est.telefone, est.cpf,
                   eno.orientador_id, ori.nome, ori.siape, ori.email_institucional,
                   eno.empresa_id, emp.nome, emp.cnpj, emp.telefone, emp.cidade, emp.responsavel,
                   eno.data_inicio, eno.data_termino, eno.nome_supervisor, eno.registro_crc, 
                   eno.carga_horaria, eno.status
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            WHERE eno.id = ?
        """, (estagio_id,))
        
        estagio_dados = self.cursor.fetchone()
        if not estagio_dados:
            messagebox.showerror("Erro", "Dados do est√°gio n√£o encontrados!")
            return
        
        # Criar janela de detalhes
        detalhes_window = ctk.CTkToplevel(self.root)
        detalhes_window.title("üìã Detalhes do Est√°gio N√£o Obrigat√≥rio")
        detalhes_window.geometry("1200x900")
        detalhes_window.transient(self.root)
        detalhes_window.grab_set()
        
        # Centralizar janela
        detalhes_window.update_idletasks()
        x = (detalhes_window.winfo_screenwidth() // 2) - (1200 // 2)
        y = (detalhes_window.winfo_screenheight() // 2) - (900 // 2)
        detalhes_window.geometry(f"1200x900+{x}+{y}")
        
        # Frame principal com scroll
        main_frame = ctk.CTkScrollableFrame(detalhes_window)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # === SE√á√ÉO: DADOS DO ESTUDANTE ===
        estudante_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD")
        estudante_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(estudante_frame, text="üë• DADOS DO ESTUDANTE", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#1565C0").pack(pady=(10, 5))
        
        # Grid para dados do estudante
        estudante_grid = ctk.CTkFrame(estudante_frame, fg_color="transparent")
        estudante_grid.pack(fill="x", padx=20, pady=(0, 10))
        
        # Linha 1
        ctk.CTkLabel(estudante_grid, text="Nome:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", padx=(0, 10))
        ctk.CTkLabel(estudante_grid, text=estagio_dados[2]).grid(row=0, column=1, sticky="w", padx=(0, 30))
        ctk.CTkLabel(estudante_grid, text="Matr√≠cula:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=2, sticky="w", padx=(0, 10))
        ctk.CTkLabel(estudante_grid, text=estagio_dados[3]).grid(row=0, column=3, sticky="w")
        
        # Linha 2
        ctk.CTkLabel(estudante_grid, text="Email:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(estudante_grid, text=estagio_dados[4]).grid(row=1, column=1, sticky="w", padx=(0, 30), pady=(5, 0))
        ctk.CTkLabel(estudante_grid, text="Telefone:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=2, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(estudante_grid, text=estagio_dados[5]).grid(row=1, column=3, sticky="w", pady=(5, 0))
        
        # Linha 3
        ctk.CTkLabel(estudante_grid, text="CPF:", font=ctk.CTkFont(weight="bold")).grid(row=2, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(estudante_grid, text=estagio_dados[6]).grid(row=2, column=1, sticky="w", pady=(5, 0))
        
        # === SE√á√ÉO: DADOS DO ORIENTADOR ===
        orientador_frame = ctk.CTkFrame(main_frame, fg_color="#E8F5E8")
        orientador_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(orientador_frame, text="üë®‚Äçüè´ DADOS DO ORIENTADOR", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#2E7D32").pack(pady=(10, 5))
        
        # Grid para dados do orientador
        orientador_grid = ctk.CTkFrame(orientador_frame, fg_color="transparent")
        orientador_grid.pack(fill="x", padx=20, pady=(0, 10))
        
        # Linha 1
        ctk.CTkLabel(orientador_grid, text="Nome:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", padx=(0, 10))
        ctk.CTkLabel(orientador_grid, text=estagio_dados[8]).grid(row=0, column=1, sticky="w", padx=(0, 30))
        ctk.CTkLabel(orientador_grid, text="SIAPE:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=2, sticky="w", padx=(0, 10))
        ctk.CTkLabel(orientador_grid, text=estagio_dados[9]).grid(row=0, column=3, sticky="w")
        
        # Linha 2
        ctk.CTkLabel(orientador_grid, text="Email Institucional:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(orientador_grid, text=estagio_dados[10]).grid(row=1, column=1, sticky="w", pady=(5, 0))
        
        # === SE√á√ÉO: DADOS DA EMPRESA ===
        empresa_frame = ctk.CTkFrame(main_frame, fg_color="#FFF3E0")
        empresa_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(empresa_frame, text="üè¢ DADOS DA EMPRESA", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#E65100").pack(pady=(10, 5))
        
        # Grid para dados da empresa
        empresa_grid = ctk.CTkFrame(empresa_frame, fg_color="transparent")
        empresa_grid.pack(fill="x", padx=20, pady=(0, 10))
        
        # Linha 1
        ctk.CTkLabel(empresa_grid, text="Nome:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", padx=(0, 10))
        ctk.CTkLabel(empresa_grid, text=estagio_dados[12]).grid(row=0, column=1, sticky="w", padx=(0, 30))
        ctk.CTkLabel(empresa_grid, text="CNPJ:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=2, sticky="w", padx=(0, 10))
        ctk.CTkLabel(empresa_grid, text=estagio_dados[13]).grid(row=0, column=3, sticky="w")
        
        # Linha 2
        ctk.CTkLabel(empresa_grid, text="Telefone:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(empresa_grid, text=estagio_dados[14]).grid(row=1, column=1, sticky="w", padx=(0, 30), pady=(5, 0))
        ctk.CTkLabel(empresa_grid, text="Cidade:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=2, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(empresa_grid, text=estagio_dados[15]).grid(row=1, column=3, sticky="w", pady=(5, 0))
        
        # Linha 3
        ctk.CTkLabel(empresa_grid, text="Respons√°vel:", font=ctk.CTkFont(weight="bold")).grid(row=2, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(empresa_grid, text=estagio_dados[16]).grid(row=2, column=1, sticky="w", pady=(5, 0))
        
        # === SE√á√ÉO: DADOS DO EST√ÅGIO ===
        estagio_frame = ctk.CTkFrame(main_frame, fg_color="#F3E5F5")
        estagio_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(estagio_frame, text="üìã DADOS DO EST√ÅGIO", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#7B1FA2").pack(pady=(10, 5))
        
        # Grid para dados do est√°gio
        estagio_grid = ctk.CTkFrame(estagio_frame, fg_color="transparent")
        estagio_grid.pack(fill="x", padx=20, pady=(0, 10))
        
        # Linha 1
        ctk.CTkLabel(estagio_grid, text="Data In√≠cio:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", padx=(0, 10))
        ctk.CTkLabel(estagio_grid, text=estagio_dados[17]).grid(row=0, column=1, sticky="w", padx=(0, 30))
        ctk.CTkLabel(estagio_grid, text="Data T√©rmino:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=2, sticky="w", padx=(0, 10))
        ctk.CTkLabel(estagio_grid, text=estagio_dados[18]).grid(row=0, column=3, sticky="w")
        
        # Linha 2
        ctk.CTkLabel(estagio_grid, text="Supervisor:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(estagio_grid, text=estagio_dados[19]).grid(row=1, column=1, sticky="w", padx=(0, 30), pady=(5, 0))
        ctk.CTkLabel(estagio_grid, text="Registro CRC:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=2, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(estagio_grid, text=estagio_dados[20]).grid(row=1, column=3, sticky="w", pady=(5, 0))
        
        # Linha 3
        ctk.CTkLabel(estagio_grid, text="Status:", font=ctk.CTkFont(weight="bold")).grid(row=2, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        ctk.CTkLabel(estagio_grid, text=estagio_dados[22]).grid(row=2, column=1, sticky="w", padx=(0, 30), pady=(5, 0))
        
        # Linha 4 - Observa√ß√µes
        if estagio_dados[23]:
            ctk.CTkLabel(estagio_grid, text="Observa√ß√µes:", font=ctk.CTkFont(weight="bold")).grid(row=3, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
            ctk.CTkLabel(estagio_grid, text=estagio_dados[23], wraplength=800).grid(row=3, column=1, columnspan=3, sticky="w", pady=(5, 0))
        
        # === SE√á√ÉO: ANEXAR RELAT√ìRIOS ===
        relatorios_frame = ctk.CTkFrame(main_frame, fg_color="#FFEBEE")
        relatorios_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(relatorios_frame, text="üìÑ ANEXAR RELAT√ìRIOS", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#C62828").pack(pady=(10, 5))
        
        # Frame para controles de relat√≥rio
        controles_frame = ctk.CTkFrame(relatorios_frame, fg_color="transparent")
        controles_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Dropdown para tipo de relat√≥rio
        ctk.CTkLabel(controles_frame, text="Tipo de Relat√≥rio:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))
        
        tipos_relatorio = [
            "1¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
            "2¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio", 
            "3¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
            "Relat√≥rio Final - N√£o Obrigat√≥rio"
        ]
        
        self.relatorio_combo_nao_obrigatorio = ctk.CTkComboBox(
            controles_frame, 
            values=tipos_relatorio,
            width=400
        )
        self.relatorio_combo_nao_obrigatorio.pack(anchor="w", pady=(0, 10))
        
        # Sele√ß√£o de arquivo
        arquivo_frame = ctk.CTkFrame(controles_frame, fg_color="transparent")
        arquivo_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkButton(
            arquivo_frame,
            text="üìé Selecionar Arquivo",
            command=self.selecionar_arquivo_relatorio_nao_obrigatorio,
            width=150,
            height=35
        ).pack(side="left", padx=(0, 10))
        
        self.arquivo_selecionado_label_nao_obrigatorio = ctk.CTkLabel(
            arquivo_frame, 
            text="Nenhum arquivo selecionado",
            text_color="gray"
        )
        self.arquivo_selecionado_label_nao_obrigatorio.pack(side="left")
        
        # Bot√µes de a√ß√£o
        botoes_frame = ctk.CTkFrame(relatorios_frame, fg_color="transparent")
        botoes_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkButton(
            botoes_frame,
            text="üíæ Salvar Relat√≥rio",
            command=lambda: self.salvar_relatorio_detalhes_nao_obrigatorio(estagio_id),
            fg_color="#4CAF50",
            hover_color="#45A049",
            width=150,
            height=40
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkButton(
            botoes_frame,
            text="‚ùå Cancelar",
            command=detalhes_window.destroy,
            fg_color="#F44336",
            hover_color="#DA190B",
            width=150,
            height=40
        ).pack(side="left")


    def salvar_relatorio_detalhes_nao_obrigatorio(self, estagio_id):
        """Salvar relat√≥rio a partir da tela de detalhes n√£o obrigat√≥rio"""
        try:
            tipo_relatorio = self.relatorio_combo_nao_obrigatorio.get()
            
            if not tipo_relatorio:
                messagebox.showerror("Erro", "Selecione o tipo de relat√≥rio!")
                return
            
            if not hasattr(self, 'arquivo_selecionado_nao_obrigatorio') or not self.arquivo_selecionado_nao_obrigatorio:
                messagebox.showerror("Erro", "Selecione um arquivo para anexar!")
                return
            
            # Buscar nome do estudante
            self.cursor.execute("SELECT est.nome FROM estagio_nao_obrigatorio eno JOIN estudantes est ON eno.estudante_id = est.id WHERE eno.id = ?", (estagio_id,))
            resultado = self.cursor.fetchone()
            if not resultado:
                messagebox.showerror("Erro", "Estudante n√£o encontrado!")
                return
            
            nome_estudante = resultado[0].replace(" ", "_")
            
            # Criar estrutura de pastas: Relat√≥rios/N√£o Obrigat√≥rio/Nome_Estudante/
            relatorios_dir = os.path.join("Relat√≥rios", "N√£o Obrigat√≥rio", nome_estudante)
            if not os.path.exists(relatorios_dir):
                os.makedirs(relatorios_dir)
            
            # Copiar arquivo para diret√≥rio de relat√≥rios
            import shutil
            nome_arquivo = f"estagio_{estagio_id}_{tipo_relatorio.replace(' ', '_').replace('¬∫', '').replace('-', '').replace('N√£o_Obrigat√≥rio', 'NaoObrigatorio')}.{self.arquivo_selecionado_nao_obrigatorio.split('.')[-1]}"
            destino = os.path.join(relatorios_dir, nome_arquivo)
            
            shutil.copy2(self.arquivo_selecionado_nao_obrigatorio, destino)
            
            # Registrar relat√≥rio na tabela de controle
            data_anexo = datetime.now().strftime("%d/%m/%Y %H:%M")
            self.cursor.execute("""
                INSERT INTO relatorios_anexados 
                (estagio_id, tipo_relatorio, nome_arquivo, caminho_arquivo, data_anexo)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, tipo_relatorio, nome_arquivo, destino, data_anexo))
            
            self.conn.commit()
            
            # Limpar sele√ß√£o
            self.relatorio_combo_nao_obrigatorio.set("")
            self.arquivo_selecionado_label_nao_obrigatorio.configure(text="üìÑ Nenhum arquivo selecionado")
            self.arquivo_selecionado_nao_obrigatorio = None
            
            # Tentar recarregar tabela se estiver dispon√≠vel
            if hasattr(self, 'tree_estagio_nao_obrigatorio') and self.tree_estagio_nao_obrigatorio:
                try:
                    self.carregar_estagio_nao_obrigatorio()
                except:
                    pass  # Ignora se n√£o conseguir recarregar
            
            # Mostrar mensagem de sucesso
            messagebox.showinfo("Sucesso", 
                f"Relat√≥rio '{tipo_relatorio}' salvo com sucesso!\n\n"
                f"üìÅ Local: {os.path.abspath(destino)}\n"
                f"üë§ Estudante: {nome_estudante.replace('_', ' ')}\n\n"
                f"üí° O status dos relat√≥rios foi atualizado!")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar relat√≥rio: {str(e)}")

    def salvar_ch_nao_obrigatorio(self, estagio_id):
        """Salvar horas de carga hor√°ria para est√°gio n√£o obrigat√≥rio"""
        try:
            data_registro = self.ch_data_entry_nao_obrig.get().strip()
            horas_registradas = self.ch_horas_entry_nao_obrig.get().strip()
            observacoes = self.ch_obs_entry_nao_obrig.get().strip()
            
            if not data_registro:
                messagebox.showerror("Erro", "Informe a data do registro!")
                return
            
            if not horas_registradas:
                messagebox.showerror("Erro", "Informe a quantidade de horas!")
                return
            
            # Validar formato de data
            try:
                datetime.strptime(data_registro, "%d/%m/%Y")
            except ValueError:
                messagebox.showerror("Erro", "Data deve estar no formato DD/MM/AAAA!")
                return
            
            # Validar horas
            try:
                horas_registradas = int(horas_registradas)
                if horas_registradas <= 0:
                    raise ValueError()
            except ValueError:
                messagebox.showerror("Erro", "Horas deve ser um n√∫mero inteiro positivo!")
                return
            
            # Inserir registro
            data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
            self.cursor.execute("""
                INSERT INTO controle_ch_nao_obrigatorio 
                (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro))
            
            self.conn.commit()
            
            # Limpar campos
            self.ch_data_entry_nao_obrig.delete(0, 'end')
            self.ch_horas_entry_nao_obrig.delete(0, 'end')
            self.ch_obs_entry_nao_obrig.delete(0, 'end')
            
            # Tentar recarregar tabela se estiver dispon√≠vel
            if hasattr(self, 'tree_estagio_nao_obrigatorio') and self.tree_estagio_nao_obrigatorio:
                try:
                    self.carregar_estagio_nao_obrigatorio()
                except:
                    pass  # Ignora se n√£o conseguir recarregar
            
            # Mostrar informa√ß√µes atualizadas da carga hor√°ria
            try:
                # Buscar dados atualizados de carga hor√°ria
                self.cursor.execute("""
                    SELECT 
                        eno.carga_horaria,
                        COALESCE(SUM(ch.horas_registradas), 0) as horas_cumpridas
                    FROM estagio_nao_obrigatorio eno
                    LEFT JOIN controle_ch_nao_obrigatorio ch ON eno.id = ch.estagio_id
                    WHERE eno.id = ?
                    GROUP BY eno.id, eno.carga_horaria
                """, (estagio_id,))
                
                ch_data = self.cursor.fetchone()
                if ch_data:
                    ch_total = ch_data[0]
                    ch_cumprida = ch_data[1]
                    ch_restante = max(0, ch_total - ch_cumprida)
                    percentual = (ch_cumprida / ch_total * 100) if ch_total > 0 else 0
                    
                    messagebox.showinfo("Carga Hor√°ria Atualizada", 
                        f"‚úÖ {horas_registradas}h registradas com sucesso!\n\n"
                        f"üìä RESUMO ATUALIZADO:\n"
                        f"‚Ä¢ Total: {ch_total}h\n"
                        f"‚Ä¢ Cumpridas: {ch_cumprida}h (+{horas_registradas}h)\n"
                        f"‚Ä¢ Restantes: {ch_restante}h\n"
                        f"‚Ä¢ Progresso: {percentual:.1f}%")
            except:
                pass  # Ignora se n√£o conseguir mostrar resumo
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar carga hor√°ria: {str(e)}")

    def salvar_ch_obrigatorio(self, estagio_id):
        """Salvar horas de carga hor√°ria para est√°gio obrigat√≥rio"""
        try:
            data_registro = self.ch_data_entry_obrig.get().strip()
            horas_registradas = self.ch_horas_entry_obrig.get().strip()
            observacoes = self.ch_obs_entry_obrig.get().strip()
            
            if not data_registro:
                messagebox.showerror("Erro", "Informe a data do registro!")
                return
            
            if not horas_registradas:
                messagebox.showerror("Erro", "Informe a quantidade de horas!")
                return
            
            # Validar formato de data
            try:
                datetime.strptime(data_registro, "%d/%m/%Y")
            except ValueError:
                messagebox.showerror("Erro", "Data deve estar no formato DD/MM/AAAA!")
                return
            
            # Validar horas
            try:
                horas_registradas = int(horas_registradas)
                if horas_registradas <= 0:
                    raise ValueError()
            except ValueError:
                messagebox.showerror("Erro", "Horas deve ser um n√∫mero inteiro positivo!")
                return
            
            # Inserir registro
            data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
            self.cursor.execute("""
                INSERT INTO controle_ch_obrigatorio 
                (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro))
            
            self.conn.commit()
            
            # Limpar campos
            self.ch_data_entry_obrig.delete(0, 'end')
            self.ch_horas_entry_obrig.delete(0, 'end')
            self.ch_obs_entry_obrig.delete(0, 'end')
            
            # Tentar recarregar tabela se estiver dispon√≠vel
            if hasattr(self, 'tree_relatorio_obrigatorio') and self.tree_relatorio_obrigatorio:
                try:
                    self.carregar_relatorio_obrigatorio()
                except:
                    pass  # Ignora se n√£o conseguir recarregar
            
            # Mostrar informa√ß√µes atualizadas da carga hor√°ria
            try:
                # Buscar dados atualizados de carga hor√°ria
                self.cursor.execute("""
                    SELECT 
                        eo.carga_horaria,
                        COALESCE(SUM(ch.horas_registradas), 0) as horas_cumpridas
                    FROM estagio_obrigatorio eo
                    LEFT JOIN controle_ch_obrigatorio ch ON eo.id = ch.estagio_id
                    WHERE eo.id = ?
                    GROUP BY eo.id, eo.carga_horaria
                """, (estagio_id,))
                
                ch_data = self.cursor.fetchone()
                if ch_data:
                    ch_total = ch_data[0]
                    ch_cumprida = ch_data[1]
                    ch_restante = max(0, ch_total - ch_cumprida)
                    percentual = (ch_cumprida / ch_total * 100) if ch_total > 0 else 0
                    
                    messagebox.showinfo("Carga Hor√°ria Atualizada", 
                        f"‚úÖ {horas_registradas}h registradas com sucesso!\n\n"
                        f"üìä RESUMO ATUALIZADO:\n"
                        f"‚Ä¢ Total: {ch_total}h\n"
                        f"‚Ä¢ Cumpridas: {ch_cumprida}h (+{horas_registradas}h)\n"
                        f"‚Ä¢ Restantes: {ch_restante}h\n"
                        f"‚Ä¢ Progresso: {percentual:.1f}%")
            except:
                pass  # Ignora se n√£o conseguir mostrar resumo
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar carga hor√°ria: {str(e)}")

    def abrir_formulario_estagio_nao_obrigatorio(self, estagio=None):
        """Abrir formul√°rio de cadastro/edi√ß√£o de est√°gio n√£o obrigat√≥rio"""
        # Criar janela modal
        form_window = ctk.CTkToplevel(self.root)
        form_window.title("üìù Cadastro de Est√°gio N√£o Obrigat√≥rio" if not estagio else "‚úèÔ∏è Editar Est√°gio N√£o Obrigat√≥rio")
        form_window.geometry("1000x800")
        form_window.resizable(False, False)
        
        # Centralizar janela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Centralizar na tela
        form_window.update_idletasks()
        x = (form_window.winfo_screenwidth() // 2) - (1000 // 2)
        y = (form_window.winfo_screenheight() // 2) - (800 // 2)
        form_window.geometry(f"1000x800+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(form_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üìù Cadastro de Est√°gio N√£o Obrigat√≥rio" if not estagio else "‚úèÔ∏è Editar Est√°gio N√£o Obrigat√≥rio",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 30))
        
        # Frame do formul√°rio
        form_container = ctk.CTkFrame(main_frame, fg_color="transparent")
        form_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Configurar grid do formul√°rio
        form_container.grid_columnconfigure(1, weight=1)
        
        # Campos do formul√°rio organizados em duas colunas
        campos_esquerda = [
            ("Estudante:", "estudante", True),
            ("Orientador:", "orientador", True),
            ("Empresa:", "empresa", True),
            ("Data de In√≠cio:", "data_inicio", True)
        ]
        
        campos_direita = [
            ("Data de T√©rmino:", "data_termino", True),
            ("Nome do Supervisor:", "nome_supervisor", True),
            ("Registro CRC:", "registro_crc", False),  # N√ÉO OBRIGAT√ìRIO
            ("Carga Hor√°ria:", "carga_horaria", False)  # N√ÉO OBRIGAT√ìRIO
        ]
        
        self.form_estagio_nao_obrigatorio_entries = {}
        
        # Campos da coluna esquerda
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_esquerda):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=0, sticky="ew", pady=8, padx=(0, 15))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry ou bot√£o de busca
            if field_name in ["estudante", "orientador", "empresa"]:
                # Frame para entry + bot√£o
                entry_frame = ctk.CTkFrame(field_frame, fg_color="transparent")
                entry_frame.pack(fill="x")
                
                entry = ctk.CTkEntry(
                    entry_frame,
                    width=300,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text=f"Selecione {label_text.lower().replace(':', '')}..."
                )
                entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
                
                btn_buscar = ctk.CTkButton(
                    entry_frame,
                    text="üîç",
                    width=50,
                    height=45,
                    font=ctk.CTkFont(size=16),
                    fg_color=self.cor_primaria,
                    hover_color=self.cor_secundaria,
                    command=lambda f=field_name, e=entry: self.buscar_para_estagio_nao_obrigatorio(f, e)
                )
                btn_buscar.pack(side="right")
                
                self.form_estagio_nao_obrigatorio_entries[field_name] = entry
            else:
                # Entry normal
                if field_name == "data_inicio" or field_name == "data_termino":
                    entry = ctk.CTkEntry(
                        field_frame,
                        width=400,
                        height=45,
                        font=ctk.CTkFont(size=14),
                        placeholder_text="DD/MM/AAAA"
                    )
                elif field_name == "carga_horaria":
                    entry = ctk.CTkEntry(
                        field_frame,
                        width=400,
                        height=45,
                        font=ctk.CTkFont(size=14),
                        placeholder_text="390"
                    )
                else:
                    entry = ctk.CTkEntry(
                        field_frame,
                        width=400,
                        height=45,
                        font=ctk.CTkFont(size=14),
                        placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
                    )
                entry.pack(fill="x")
                self.form_estagio_nao_obrigatorio_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if estagio:
                self.preencher_campo_estagio_nao_obrigatorio_edicao(entry, field_name, estagio)
        
        # Campos da coluna direita
        for i, (label_text, field_name, obrigatorio) in enumerate(campos_direita):
            # Frame para cada campo
            field_frame = ctk.CTkFrame(form_container, fg_color="transparent")
            field_frame.grid(row=i, column=1, sticky="ew", pady=8, padx=(15, 0))
            
            # Label
            label_text_formatted = f"{label_text} {'*' if obrigatorio else ''}"
            label = ctk.CTkLabel(
                field_frame,
                text=label_text_formatted,
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=self.cor_primaria if obrigatorio else self.cor_texto
            )
            label.pack(anchor="w", pady=(0, 5))
            
            # Entry
            if field_name == "data_termino":
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text="DD/MM/AAAA"
                )
            elif field_name == "carga_horaria":
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text="390 (opcional)"
                )
            else:
                entry = ctk.CTkEntry(
                    field_frame,
                    width=400,
                    height=45,
                    font=ctk.CTkFont(size=14),
                    placeholder_text=f"Digite {label_text.lower().replace(':', '')}..."
                )
            entry.pack(fill="x")
            self.form_estagio_nao_obrigatorio_entries[field_name] = entry
            
            # Preencher campos se estiver editando
            if estagio:
                self.preencher_campo_estagio_nao_obrigatorio_edicao(entry, field_name, estagio)
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_terciaria, corner_radius=10)
        info_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text="‚ÑπÔ∏è Campos marcados com * s√£o obrigat√≥rios. Use os bot√µes de busca para selecionar estudante, orientador e empresa. O registro CRC e carga hor√°ria s√£o opcionais.",
            font=ctk.CTkFont(size=12),
            text_color=self.cor_texto,
            wraplength=900
        )
        info_label.pack(pady=15)
        
        # Frame dos bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(20, 0))
        
        # Bot√µes
        btn_salvar = ctk.CTkButton(
            buttons_frame,
            text="üíæ Salvar",
            width=200,
            height=55,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.salvar_estagio_nao_obrigatorio(form_window, estagio)
        )
        btn_salvar.pack(side="left")
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=200,
            height=55,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=form_window.destroy
        )
        btn_cancelar.pack(side="left")

    def buscar_para_estagio_nao_obrigatorio(self, tipo, entry):
        """Abrir janela de busca para selecionar estudante, orientador ou empresa (est√°gio n√£o obrigat√≥rio)"""
        # Reutilizar a mesma fun√ß√£o de busca do est√°gio obrigat√≥rio
        self.buscar_para_estagio(tipo, entry)

    def preencher_campo_estagio_nao_obrigatorio_edicao(self, entry, field_name, estagio):
        """Preencher campo durante edi√ß√£o de est√°gio n√£o obrigat√≥rio"""
        if field_name == "estudante":
            entry.insert(0, estagio[10])  # Nome do estudante (posi√ß√£o 10 na query com JOIN)
            entry.estudante_id = estagio[1]  # ID do estudante (estudante_id)
        elif field_name == "orientador":
            entry.insert(0, estagio[11])  # Nome do orientador (posi√ß√£o 11 na query com JOIN)
            entry.orientador_id = estagio[2]  # ID do orientador (orientador_id)
        elif field_name == "empresa":
            entry.insert(0, estagio[12])  # Nome da empresa (posi√ß√£o 12 na query com JOIN)
            entry.empresa_id = estagio[3]  # ID da empresa (empresa_id)
        elif field_name == "data_inicio":
            entry.insert(0, estagio[4])
        elif field_name == "data_termino":
            entry.insert(0, estagio[5])
        elif field_name == "nome_supervisor":
            entry.insert(0, estagio[6])
        elif field_name == "registro_crc":
            entry.insert(0, estagio[7] or "")  # Pode ser None
        elif field_name == "carga_horaria":
            entry.insert(0, str(estagio[8]))

    def salvar_estagio_nao_obrigatorio(self, window, estagio=None):
        """Salvar dados do est√°gio n√£o obrigat√≥rio"""
        try:
            # Validar campos obrigat√≥rios (CRC n√£o √© obrigat√≥rio)
            estudante_id = getattr(self.form_estagio_nao_obrigatorio_entries['estudante'], 'estudante_id', None)
            orientador_id = getattr(self.form_estagio_nao_obrigatorio_entries['orientador'], 'orientador_id', None)
            empresa_id = getattr(self.form_estagio_nao_obrigatorio_entries['empresa'], 'empresa_id', None)
            data_inicio = self.form_estagio_nao_obrigatorio_entries['data_inicio'].get().strip()
            data_termino = self.form_estagio_nao_obrigatorio_entries['data_termino'].get().strip()
            nome_supervisor = self.form_estagio_nao_obrigatorio_entries['nome_supervisor'].get().strip()
            registro_crc = self.form_estagio_nao_obrigatorio_entries['registro_crc'].get().strip()
            carga_horaria = self.form_estagio_nao_obrigatorio_entries['carga_horaria'].get().strip()
            
            if not all([estudante_id, orientador_id, empresa_id, data_inicio, data_termino, nome_supervisor]):
                messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios e selecione estudante, orientador e empresa!")
                return
            
            # Validar carga hor√°ria (opcional)
            if carga_horaria:
                try:
                    carga_horaria = int(carga_horaria)
                except ValueError:
                    messagebox.showerror("Erro", "Carga hor√°ria deve ser um n√∫mero!")
                    return
            else:
                carga_horaria = 390  # Valor padr√£o se n√£o informado
            
            # Dados do est√°gio
            dados = {
                'estudante_id': estudante_id,
                'orientador_id': orientador_id,
                'empresa_id': empresa_id,
                'data_inicio': data_inicio,
                'data_termino': data_termino,
                'nome_supervisor': nome_supervisor,
                'registro_crc': registro_crc if registro_crc else None,  # Pode ser None
                'carga_horaria': carga_horaria
            }
            
            if estagio:
                # Atualizar est√°gio existente
                self.cursor.execute("""
                    UPDATE estagio_nao_obrigatorio SET 
                    estudante_id=?, orientador_id=?, empresa_id=?, data_inicio=?, data_termino=?, 
                    nome_supervisor=?, registro_crc=?, carga_horaria=?
                    WHERE id=?
                """, (dados['estudante_id'], dados['orientador_id'], dados['empresa_id'],
                     dados['data_inicio'], dados['data_termino'], dados['nome_supervisor'],
                     dados['registro_crc'], dados['carga_horaria'], estagio[0]))
                message = "Est√°gio atualizado com sucesso!"
            else:
                # Inserir novo est√°gio
                data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
                self.cursor.execute("""
                    INSERT INTO estagio_nao_obrigatorio 
                    (estudante_id, orientador_id, empresa_id, data_inicio, data_termino, 
                     nome_supervisor, registro_crc, carga_horaria, data_cadastro)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (dados['estudante_id'], dados['orientador_id'], dados['empresa_id'],
                     dados['data_inicio'], dados['data_termino'], dados['nome_supervisor'],
                     dados['registro_crc'], dados['carga_horaria'], data_cadastro))
                message = "Est√°gio cadastrado com sucesso!"
            
            self.conn.commit()
            messagebox.showinfo("Sucesso", message)
            window.destroy()
            self.carregar_estagio_nao_obrigatorio()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar est√°gio: {str(e)}")

    def editar_estagio_nao_obrigatorio(self):
        """Editar est√°gio n√£o obrigat√≥rio selecionado"""
        selected = self.tree_estagio_nao_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para editar!")
            return
        
        item = self.tree_estagio_nao_obrigatorio.item(selected[0])
        estagio_id = item['values'][0]  # ID est√° na primeira coluna
        
        # Buscar dados completos do est√°gio
        self.cursor.execute("""
            SELECT eno.id, eno.estudante_id, eno.orientador_id, eno.empresa_id, eno.data_inicio, eno.data_termino,
                   eno.nome_supervisor, eno.registro_crc, eno.carga_horaria, eno.status,
                   est.nome, ori.nome, emp.nome
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            WHERE eno.id = ?
        """, (estagio_id,))
        
        estagio = self.cursor.fetchone()
        if estagio:
            self.abrir_formulario_estagio_nao_obrigatorio(estagio)

    def excluir_estagio_nao_obrigatorio(self):
        """Excluir est√°gio n√£o obrigat√≥rio selecionado"""
        selected = self.tree_estagio_nao_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para excluir!")
            return
        
        item = self.tree_estagio_nao_obrigatorio.item(selected[0])
        estagio_id = item['values'][0]  # ID est√° na primeira coluna
        estudante_nome = item['values'][2]  # Posi√ß√£o 2 porque posi√ß√£o 0 √© "A√ß√£o" e 1 √© "ID"
        
        # Confirmar exclus√£o
        if messagebox.askyesno("Confirmar Exclus√£o", 
                              f"Tem certeza que deseja excluir o est√°gio do estudante {estudante_nome}?\n\nEsta a√ß√£o n√£o pode ser desfeita!"):
            try:
                self.cursor.execute("DELETE FROM estagio_nao_obrigatorio WHERE id = ?", (estagio_id,))
                self.conn.commit()
                messagebox.showinfo("Sucesso", "Est√°gio exclu√≠do com sucesso!")
                self.carregar_estagio_nao_obrigatorio()
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao excluir est√°gio: {str(e)}")

    def abrir_controle_estagio_nao_obrigatorio(self):
        """Abrir janela de controle do est√°gio n√£o obrigat√≥rio"""
        selected = self.tree_estagio_nao_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para controlar!")
            return
        
        item = self.tree_estagio_nao_obrigatorio.item(selected[0])
        estagio_id = item['values'][0]
        
        # Buscar dados completos do est√°gio
        try:
            self.cursor.execute("""
                SELECT eno.id, est.nome, est.cpf, est.matricula, ori.nome, emp.nome, 
                       eno.data_inicio, eno.data_termino, eno.nome_supervisor, eno.registro_crc, 
                       eno.carga_horaria, eno.status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes est ON eno.estudante_id = est.id
                JOIN orientadores ori ON eno.orientador_id = ori.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                WHERE eno.id = ?
            """, (estagio_id,))
            
            estagio_data = self.cursor.fetchone()
            if not estagio_data:
                messagebox.showerror("Erro", "Est√°gio n√£o encontrado!")
                return
            
            # Abrir janela de controle
            self.show_controle_estagio_nao_obrigatorio_window(estagio_data)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao buscar dados do est√°gio: {str(e)}")

    def show_controle_estagio_nao_obrigatorio_window(self, estagio_data):
        """Mostrar janela de controle do est√°gio n√£o obrigat√≥rio"""
        # Criar janela modal
        control_window = ctk.CTkToplevel(self.root)
        control_window.title("Controle do Est√°gio N√£o Obrigat√≥rio")
        control_window.geometry("1000x800")
        control_window.resizable(True, True)
        
        # Centralizar janela na tela
        control_window.transient(self.root)
        control_window.grab_set()
        
        # Centralizar janela na tela principal
        control_window.update_idletasks()
        screen_width = control_window.winfo_screenwidth()
        screen_height = control_window.winfo_screenheight()
        window_width = 1000
        window_height = 800
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        control_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # Garantir que a janela apare√ßa no topo
        control_window.lift()
        control_window.attributes('-topmost', True)
        control_window.after_idle(lambda: control_window.attributes('-topmost', False))
        
        # Frame principal
        main_frame = ctk.CTkFrame(control_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="üìä Controle do Est√°gio N√£o Obrigat√≥rio",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(20, 25))
        
        # Frame principal com scroll
        scroll_frame = ctk.CTkScrollableFrame(main_frame)
        scroll_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Extrair dados do est√°gio
        estagio_id, estudante_nome, estudante_cpf, estudante_matricula, orientador_nome, empresa_nome, data_inicio, data_termino, supervisor_nome, supervisor_crc, carga_horaria, status = estagio_data
        
        # === SE√á√ÉO: INFORMA√á√ïES DO EST√ÅGIO ===
        info_frame = ctk.CTkFrame(scroll_frame, fg_color="#e3f2fd")
        info_frame.pack(fill="x", pady=(0, 20))
        
        info_title = ctk.CTkLabel(
            info_frame,
            text="üìã Informa√ß√µes do Est√°gio",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#1976d2"
        )
        info_title.pack(pady=(15, 10))
        
        # Grid de informa√ß√µes
        info_grid = ctk.CTkFrame(info_frame, fg_color="transparent")
        info_grid.pack(fill="x", padx=20, pady=(0, 15))
        info_grid.grid_columnconfigure(1, weight=1)
        info_grid.grid_columnconfigure(3, weight=1)
        
        # Informa√ß√µes do estudante
        ctk.CTkLabel(info_grid, text="üë§ Estudante:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=0, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=estudante_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=0, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìß Matr√≠cula:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=0, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=estudante_matricula, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=0, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üÜî CPF:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=1, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=estudante_cpf, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=1, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üë®‚Äçüè´ Orientador:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=1, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=orientador_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=1, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üè¢ Empresa:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=2, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=empresa_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=2, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üë®‚Äçüíº Supervisor:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=2, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=supervisor_nome, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=2, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìÖ In√≠cio:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=3, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=data_inicio, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=3, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìÖ T√©rmino:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=3, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(info_grid, text=data_termino, font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=3, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="‚è∞ CH Total:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=4, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(info_grid, text=f"{carga_horaria} horas", font=ctk.CTkFont(size=12), text_color="#1976d2").grid(row=4, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(info_grid, text="üìä Status:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#1976d2").grid(row=4, column=2, sticky="w", padx=(20, 10), pady=5)
        status_color = "#10b981" if status == "Completo" else "#f59e0b" if status == "Ativo" else "#ef4444"
        ctk.CTkLabel(info_grid, text=status, font=ctk.CTkFont(size=12, weight="bold"), text_color=status_color).grid(row=4, column=3, sticky="w", pady=5)
        
        # === SE√á√ÉO: CONTROLE DE CARGA HOR√ÅRIA ===
        ch_frame = ctk.CTkFrame(scroll_frame, fg_color="#f0fdf4")
        ch_frame.pack(fill="x", pady=(0, 20))
        
        ch_title = ctk.CTkLabel(
            ch_frame,
            text="‚è∞ Controle de Carga Hor√°ria",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#16a34a"
        )
        ch_title.pack(pady=(15, 10))
        
        # Buscar CH parcial atual
        self.cursor.execute("""
            SELECT COALESCE(SUM(horas_registradas), 0) as ch_parcial
            FROM controle_ch_nao_obrigatorio 
            WHERE estagio_id = ?
        """, (estagio_id,))
        
        ch_parcial_result = self.cursor.fetchone()
        ch_parcial = ch_parcial_result[0] if ch_parcial_result else 0
        ch_restante = carga_horaria - ch_parcial
        percentual = (ch_parcial / carga_horaria * 100) if carga_horaria > 0 else 0
        
        # Grid de CH
        ch_grid = ctk.CTkFrame(ch_frame, fg_color="transparent")
        ch_grid.pack(fill="x", padx=20, pady=(0, 15))
        ch_grid.grid_columnconfigure(1, weight=1)
        ch_grid.grid_columnconfigure(3, weight=1)
        
        ctk.CTkLabel(ch_grid, text="üìä CH Total:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=0, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{carga_horaria} horas", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=0, column=1, sticky="w", pady=5)
        
        ctk.CTkLabel(ch_grid, text="‚úÖ CH Cumprida:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=0, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{ch_parcial} horas", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=0, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(ch_grid, text="‚è≥ CH Restante:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=1, column=0, sticky="w", padx=(0, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{ch_restante} horas", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=1, column=3, sticky="w", pady=5)
        
        ctk.CTkLabel(ch_grid, text="üìà Progresso:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").grid(row=1, column=2, sticky="w", padx=(20, 10), pady=5)
        ctk.CTkLabel(ch_grid, text=f"{percentual:.1f}%", font=ctk.CTkFont(size=12), text_color="#16a34a").grid(row=1, column=3, sticky="w", pady=5)
        
        # Barra de progresso
        progress_frame = ctk.CTkFrame(ch_frame, fg_color="transparent")
        progress_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(progress_frame, text="Barra de Integraliza√ß√£o:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#16a34a").pack(anchor="w", pady=(0, 5))
        
        progress_bar = ctk.CTkProgressBar(progress_frame, width=400, height=20)
        progress_bar.pack(anchor="w")
        progress_bar.set(percentual / 100)
        
        # === SE√á√ÉO: ANEXO DE RELAT√ìRIOS ===
        relatorios_frame = ctk.CTkFrame(scroll_frame, fg_color="#fef3c7")
        relatorios_frame.pack(fill="x", pady=(0, 20))
        
        relatorios_title = ctk.CTkLabel(
            relatorios_frame,
            text="üìÑ Anexo de Relat√≥rios",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#d97706"
        )
        relatorios_title.pack(pady=(15, 10))
        
        # Formul√°rio de anexo
        form_frame = ctk.CTkFrame(relatorios_frame, fg_color="transparent")
        form_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Tipo de relat√≥rio
        ctk.CTkLabel(form_frame, text="Tipo de Relat√≥rio:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#d97706").pack(anchor="w", pady=(0, 5))
        tipo_relatorio = ctk.CTkComboBox(
            form_frame,
            values=[
                "1¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "2¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio", 
                "3¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "4¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "5¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "6¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "7¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "8¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "9¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "10¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "Relat√≥rio Final - N√£o Obrigat√≥rio"
            ],
            width=300,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        tipo_relatorio.pack(anchor="w", pady=(0, 10))
        
        # CH do relat√≥rio
        ch_frame_rel = ctk.CTkFrame(form_frame, fg_color="transparent")
        ch_frame_rel.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(ch_frame_rel, text="CH do Relat√≥rio:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#d97706").pack(side="left", padx=(0, 10))
        ch_relatorio_entry = ctk.CTkEntry(
            ch_frame_rel,
            placeholder_text="Digite a carga hor√°ria do relat√≥rio",
            width=200,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        ch_relatorio_entry.pack(side="left", padx=(0, 20))
        
        # Arquivo PDF
        ctk.CTkLabel(form_frame, text="Arquivo PDF:", font=ctk.CTkFont(size=12, weight="bold"), text_color="#d97706").pack(anchor="w", pady=(0, 5))
        file_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        file_frame.pack(fill="x", pady=(0, 10))
        
        file_path_var = ctk.StringVar()
        file_entry = ctk.CTkEntry(
            file_frame,
            textvariable=file_path_var,
            placeholder_text="Selecione o arquivo PDF do relat√≥rio",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        file_entry.pack(side="left", padx=(0, 10))
        
        def selecionar_arquivo():
            from tkinter import filedialog
            file_path = filedialog.askopenfilename(
                title="Selecionar Relat√≥rio PDF",
                filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
            )
            if file_path:
                file_path_var.set(file_path)
        
        btn_selecionar = ctk.CTkButton(
            file_frame,
            text="üìÅ Selecionar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#d97706",
            hover_color="#b45309",
            command=selecionar_arquivo
        )
        btn_selecionar.pack(side="left")
        
        # Bot√£o anexar
        def anexar_relatorio():
            tipo = tipo_relatorio.get()
            ch_text = ch_relatorio_entry.get().strip()
            arquivo = file_path_var.get()
            
            if not tipo or not ch_text or not arquivo:
                messagebox.showwarning("Aviso", "Preencha todos os campos!")
                return
            
            try:
                ch_horas = int(ch_text)
                if ch_horas <= 0:
                    messagebox.showwarning("Aviso", "A carga hor√°ria deve ser maior que zero!")
                    return
                
                # Salvar relat√≥rio
                self.salvar_relatorio_estagio_nao_obrigatorio(estagio_id, tipo, ch_horas, arquivo)
                
                # Limpar campos
                ch_relatorio_entry.delete(0, 'end')
                file_path_var.set("")
                
                # Atualizar dados na janela
                self.atualizar_dados_controle_estagio_nao_obrigatorio(control_window, estagio_id, ch_frame, progress_bar)
                
                messagebox.showinfo("Sucesso", "Relat√≥rio anexado com sucesso!")
                
            except ValueError:
                messagebox.showerror("Erro", "A carga hor√°ria deve ser um n√∫mero v√°lido!")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao anexar relat√≥rio: {str(e)}")
        
        btn_anexar = ctk.CTkButton(
            form_frame,
            text="üìé Anexar Relat√≥rio",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#d97706",
            hover_color="#b45309",
            command=anexar_relatorio
        )
        btn_anexar.pack(anchor="w", pady=(10, 0))
        
        # === SE√á√ÉO: RELAT√ìRIOS ANEXADOS ===
        anexados_frame = ctk.CTkFrame(scroll_frame, fg_color="#f3f4f6")
        anexados_frame.pack(fill="x", pady=(0, 20))
        
        anexados_title = ctk.CTkLabel(
            anexados_frame,
            text="üìã Relat√≥rios Anexados",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#374151"
        )
        anexados_title.pack(pady=(15, 10))
        
        # Tabela de relat√≥rios anexados
        self.carregar_relatorios_anexados_nao_obrigatorio(anexados_frame, estagio_id)
        
        # Bot√µes de a√ß√£o
        btn_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        btn_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Bot√£o Salvar Altera√ß√µes
        btn_salvar = ctk.CTkButton(
            btn_frame,
            text="üíæ Salvar Altera√ß√µes",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#28a745",
            hover_color="#218838",
            command=lambda: self.salvar_alteracoes_controle_estagio_nao_obrigatorio(control_window, estagio_id)
        )
        btn_salvar.pack(side="left", padx=(0, 10))
        
        btn_fechar = ctk.CTkButton(
            btn_frame,
            text="‚ùå Fechar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#6c757d",
            hover_color="#5a6268",
            command=control_window.destroy
        )
        btn_fechar.pack(side="right")

    def salvar_alteracoes_controle_estagio_nao_obrigatorio(self, window, estagio_id):
        """Salvar altera√ß√µes realizadas no controle de est√°gio n√£o obrigat√≥rio"""
        try:
            # Aqui voc√™ pode adicionar l√≥gica para salvar altera√ß√µes espec√≠ficas
            # Por exemplo, atualizar status, observa√ß√µes, etc.
            
            # Por enquanto, vamos apenas mostrar uma mensagem de sucesso
            messagebox.showinfo("Sucesso", "Altera√ß√µes salvas com sucesso!")
            
            # Atualizar dados na janela se necess√°rio
            # self.atualizar_dados_controle_estagio_nao_obrigatorio(window, estagio_id, ch_frame, progress_bar)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar altera√ß√µes: {str(e)}")

    def salvar_relatorio_estagio_nao_obrigatorio(self, estagio_id, tipo_relatorio, ch_horas, arquivo_path):
        """Salvar relat√≥rio anexado ao est√°gio n√£o obrigat√≥rio"""
        try:
            import os
            import shutil
            from datetime import datetime
            
            # Criar diret√≥rio de relat√≥rios se n√£o existir
            relatorios_dir = "relatorios_anexados"
            if not os.path.exists(relatorios_dir):
                os.makedirs(relatorios_dir)
            
            # Gerar nome √∫nico para o arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_arquivo = f"estagio_nao_obrig_{estagio_id}_{tipo_relatorio.replace(' ', '_')}_{timestamp}.pdf"
            caminho_destino = os.path.join(relatorios_dir, nome_arquivo)
            
            # Copiar arquivo
            shutil.copy2(arquivo_path, caminho_destino)
            
            # Salvar no banco de dados
            self.cursor.execute("""
                INSERT INTO relatorios_anexados 
                (estagio_id, tipo_relatorio, arquivo_path, data_anexo, horas_registradas)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, tipo_relatorio, caminho_destino, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ch_horas))
            
            # Salvar no controle de CH
            self.cursor.execute("""
                INSERT INTO controle_ch_nao_obrigatorio 
                (estagio_id, horas_registradas, data_registro, observacoes)
                VALUES (?, ?, ?, ?)
            """, (estagio_id, ch_horas, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), f"Relat√≥rio: {tipo_relatorio}"))
            
            self.conn.commit()
            
        except Exception as e:
            raise Exception(f"Erro ao salvar relat√≥rio: {str(e)}")

    def carregar_relatorios_anexados_nao_obrigatorio(self, parent, estagio_id):
        """Carregar tabela de relat√≥rios anexados para est√°gio n√£o obrigat√≥rio"""
        try:
            # Buscar relat√≥rios anexados
            self.cursor.execute("""
                SELECT tipo_relatorio, data_anexo, horas_registradas, arquivo_path
                FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio LIKE '%N√£o Obrigat√≥rio%'
                ORDER BY data_anexo DESC
            """, (estagio_id,))
            
            relatorios = self.cursor.fetchall()
            
            if not relatorios:
                # Mostrar mensagem se n√£o h√° relat√≥rios
                no_data_label = ctk.CTkLabel(
                    parent,
                    text="Nenhum relat√≥rio anexado ainda.",
                    font=ctk.CTkFont(size=12),
                    text_color="#6b7280"
                )
                no_data_label.pack(pady=20)
                return
            
            # Criar tabela
            table_frame = ctk.CTkFrame(parent, fg_color="transparent")
            table_frame.pack(fill="x", padx=20, pady=(0, 15))
            
            # Headers
            headers = ["Tipo", "Data", "CH", "Arquivo"]
            for i, header in enumerate(headers):
                header_label = ctk.CTkLabel(
                    table_frame,
                    text=header,
                    font=ctk.CTkFont(size=12, weight="bold"),
                    text_color="#374151"
                )
                header_label.grid(row=0, column=i, padx=10, pady=5, sticky="w")
            
            # Dados
            for row_idx, relatorio in enumerate(relatorios, 1):
                tipo, data, horas, arquivo = relatorio
                
                # Tipo
                tipo_label = ctk.CTkLabel(
                    table_frame,
                    text=tipo,
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                tipo_label.grid(row=row_idx, column=0, padx=10, pady=2, sticky="w")
                
                # Data
                data_label = ctk.CTkLabel(
                    table_frame,
                    text=data.split()[0] if data else "N/A",
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                data_label.grid(row=row_idx, column=1, padx=10, pady=2, sticky="w")
                
                # CH
                ch_label = ctk.CTkLabel(
                    table_frame,
                    text=f"{horas} horas",
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                ch_label.grid(row=row_idx, column=2, padx=10, pady=2, sticky="w")
                
                # Arquivo
                arquivo_nome = os.path.basename(arquivo) if arquivo else "N/A"
                arquivo_label = ctk.CTkLabel(
                    table_frame,
                    text=arquivo_nome,
                    font=ctk.CTkFont(size=11),
                    text_color="#374151"
                )
                arquivo_label.grid(row=row_idx, column=3, padx=10, pady=2, sticky="w")
                
        except Exception as e:
            error_label = ctk.CTkLabel(
                parent,
                text=f"Erro ao carregar relat√≥rios: {str(e)}",
                font=ctk.CTkFont(size=12),
                text_color="#ef4444"
            )
            error_label.pack(pady=20)

    def atualizar_dados_controle_estagio_nao_obrigatorio(self, window, estagio_id, ch_frame, progress_bar):
        """Atualizar dados de controle do est√°gio n√£o obrigat√≥rio ap√≥s anexar relat√≥rio"""
        try:
            # Buscar CH atualizada
            self.cursor.execute("""
                SELECT COALESCE(SUM(horas_registradas), 0) as ch_parcial
                FROM controle_ch_nao_obrigatorio 
                WHERE estagio_id = ?
            """, (estagio_id,))
            
            ch_parcial_result = self.cursor.fetchone()
            ch_parcial = ch_parcial_result[0] if ch_parcial_result else 0
            
            # Buscar CH total
            self.cursor.execute("SELECT carga_horaria FROM estagio_nao_obrigatorio WHERE id = ?", (estagio_id,))
            carga_horaria = self.cursor.fetchone()[0]
            
            ch_restante = carga_horaria - ch_parcial
            percentual = (ch_parcial / carga_horaria * 100) if carga_horaria > 0 else 0
            
            # Atualizar barra de progresso
            progress_bar.set(percentual / 100)
            
        except Exception as e:
            print(f"Erro ao atualizar dados: {e}")

    def show_relatorio_estagio_obrigatorio(self):
        """Mostrar relat√≥rio de est√°gio obrigat√≥rio"""
        self.clear_content()
        self.page_title.configure(text="Relat√≥rio Est√°gio Obrigat√≥rio")
        
        # Frame principal do relat√≥rio
        relatorio_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        relatorio_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            relatorio_frame,
            text="üìã Relat√≥rio de Est√°gio Obrigat√≥rio",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 10))
        
        # Informa√ß√µes do orientador logado
        orientador_nome = self.obter_nome_orientador_logado()
        orientador_label = ctk.CTkLabel(
            relatorio_frame,
            text=f"üë®‚Äçüè´ Orientador: {orientador_nome}",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_secundaria
        )
        orientador_label.pack(pady=(0, 20))
        
        # Criar bot√µes de a√ß√£o
        self.create_relatorio_obrigatorio_buttons(relatorio_frame)
        
        # Criar tabela
        self.create_relatorio_obrigatorio_table(relatorio_frame)
        
        # Carregar dados
        self.carregar_relatorio_obrigatorio()

    def create_relatorio_obrigatorio_buttons(self, parent):
        """Criar bot√µes de a√ß√£o para relat√≥rio obrigat√≥rio"""
        # Frame para bot√µes
        buttons_frame = ctk.CTkFrame(parent, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=(0, 20))
        
        # Frame para busca √† direita
        right_frame = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        right_frame.pack(side="right")
        
        # Campo de busca
        self.search_relatorio_entry = ctk.CTkEntry(
            right_frame,
            placeholder_text="Buscar por estudante ou empresa...",
            width=300,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        self.search_relatorio_entry.pack(side="left", padx=(0, 10))
        
        btn_buscar = ctk.CTkButton(
            right_frame,
            text="üîç Localizar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.buscar_relatorio_obrigatorio
        )
        btn_buscar.pack(side="left")
        
        # Bind Enter para busca
        self.search_relatorio_entry.bind('<Return>', lambda e: self.buscar_relatorio_obrigatorio())

    def create_relatorio_obrigatorio_table(self, parent):
        """Criar tabela de relat√≥rio obrigat√≥rio"""
        # Frame para a tabela
        table_frame = ctk.CTkFrame(parent, fg_color="transparent")
        table_frame.pack(fill="both", expand=True)
        
        # Configurar estilo da tabela
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       fieldbackground=self.cor_branco,
                       font=('Arial', 11))
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('A√ß√£o', 'ID', 'Nome do Aluno', 'Empresa', 'CH Total', 'CH Parcial', 'CH Restante', 'Status', 'R1', 'R2', 'R3', 'RF')
        self.tree_relatorio_obrigatorio = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.tree_relatorio_obrigatorio.heading('A√ß√£o', text='A√ß√£o')
        self.tree_relatorio_obrigatorio.heading('ID', text='ID')
        self.tree_relatorio_obrigatorio.heading('Nome do Aluno', text='Nome do Aluno')
        self.tree_relatorio_obrigatorio.heading('Empresa', text='Empresa')
        self.tree_relatorio_obrigatorio.heading('CH Total', text='CH Total')
        self.tree_relatorio_obrigatorio.heading('CH Parcial', text='CH Parcial')
        self.tree_relatorio_obrigatorio.heading('CH Restante', text='CH Restante')
        self.tree_relatorio_obrigatorio.heading('Status', text='Status')
        self.tree_relatorio_obrigatorio.heading('R1', text='1¬∫ Rel.')
        self.tree_relatorio_obrigatorio.heading('R2', text='2¬∫ Rel.')
        self.tree_relatorio_obrigatorio.heading('R3', text='3¬∫ Rel.')
        self.tree_relatorio_obrigatorio.heading('RF', text='Rel. Final')
        
        # Configurar larguras das colunas
        self.tree_relatorio_obrigatorio.column('A√ß√£o', width=50, anchor='center')
        self.tree_relatorio_obrigatorio.column('ID', width=50, anchor='center')
        self.tree_relatorio_obrigatorio.column('Nome do Aluno', width=180, anchor='center')
        self.tree_relatorio_obrigatorio.column('Empresa', width=180, anchor='center')
        self.tree_relatorio_obrigatorio.column('CH Total', width=80, anchor='center')
        self.tree_relatorio_obrigatorio.column('CH Parcial', width=80, anchor='center')
        self.tree_relatorio_obrigatorio.column('CH Restante', width=80, anchor='center')
        self.tree_relatorio_obrigatorio.column('Status', width=100, anchor='center')
        self.tree_relatorio_obrigatorio.column('R1', width=60, anchor='center')
        self.tree_relatorio_obrigatorio.column('R2', width=60, anchor='center')
        self.tree_relatorio_obrigatorio.column('R3', width=60, anchor='center')
        self.tree_relatorio_obrigatorio.column('RF', width=70, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_relatorio_obrigatorio.yview)
        self.tree_relatorio_obrigatorio.configure(yscrollcommand=scrollbar.set)
        
        # Posicionar tabela e scrollbar
        self.tree_relatorio_obrigatorio.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind evento de clique duplo na coluna de a√ß√£o
        self.tree_relatorio_obrigatorio.bind('<Double-1>', self.on_double_click_relatorio)

    def carregar_relatorio_obrigatorio(self):
        """Carregar dados do relat√≥rio obrigat√≥rio"""
        # Limpar tabela
        for item in self.tree_relatorio_obrigatorio.get_children():
            self.tree_relatorio_obrigatorio.delete(item)
        
        # Buscar est√°gios com carga hor√°ria calculada (apenas do orientador logado)
        self.cursor.execute("""
            SELECT 
                eo.id,
                est.nome,
                emp.nome,
                eo.carga_horaria,
                COALESCE(SUM(cho.horas_registradas), 0) as ch_parcial,
                (eo.carga_horaria - COALESCE(SUM(cho.horas_registradas), 0)) as ch_restante,
                CASE 
                    WHEN (eo.carga_horaria - COALESCE(SUM(cho.horas_registradas), 0)) <= 0 THEN 'Conclu√≠do'
                    ELSE 'Em Andamento'
                END as status
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN empresas emp ON eo.empresa_id = emp.id
            LEFT JOIN controle_ch_obrigatorio cho ON eo.id = cho.estagio_id
            WHERE eo.status = 'Ativo' AND eo.orientador_id = ?
            GROUP BY eo.id, est.nome, emp.nome, eo.carga_horaria
            ORDER BY est.nome
        """, (self.orientador_logado_id,))
        relatorios = self.cursor.fetchall()
        
        # Inserir dados na tabela
        for relatorio in relatorios:
            estagio_id = relatorio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ?
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Definir s√≠mbolos para relat√≥rios anexados
            r1 = "‚úÖ" if "1¬∫ Relat√≥rio Parcial" in relatorios_anexados else "‚ùå"
            r2 = "‚úÖ" if "2¬∫ Relat√≥rio Parcial" in relatorios_anexados else "‚ùå"
            r3 = "‚úÖ" if "3¬∫ Relat√≥rio Parcial" in relatorios_anexados else "‚ùå"
            rf = "‚úÖ" if "Relat√≥rio Final" in relatorios_anexados else "‚ùå"
            
            # Formatar dados
            ch_total = f"{relatorio[3]}h"
            ch_parcial = f"{relatorio[4]}h"
            ch_restante = f"{relatorio[5]}h"
            
            # Colorir status
            status = relatorio[6]
            if status == "Conclu√≠do":
                status = "‚úÖ Conclu√≠do"
            else:
                status = "üîÑ Em Andamento"
            
            self.tree_relatorio_obrigatorio.insert('', 'end', values=(
                'üîç', relatorio[0], relatorio[1], relatorio[2], 
                ch_total, ch_parcial, ch_restante, status, r1, r2, r3, rf
            ))

    def buscar_relatorio_obrigatorio(self):
        """Buscar no relat√≥rio obrigat√≥rio"""
        termo = self.search_relatorio_entry.get().strip()
        
        if not termo:
            self.carregar_relatorio_obrigatorio()
            return
        
        # Limpar tabela
        for item in self.tree_relatorio_obrigatorio.get_children():
            self.tree_relatorio_obrigatorio.delete(item)
        
        # Buscar no banco (apenas do orientador logado)
        self.cursor.execute("""
            SELECT 
                eo.id,
                est.nome,
                emp.nome,
                eo.carga_horaria,
                COALESCE(SUM(cho.horas_registradas), 0) as ch_parcial,
                (eo.carga_horaria - COALESCE(SUM(cho.horas_registradas), 0)) as ch_restante,
                CASE 
                    WHEN (eo.carga_horaria - COALESCE(SUM(cho.horas_registradas), 0)) <= 0 THEN 'Conclu√≠do'
                    ELSE 'Em Andamento'
                END as status
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN empresas emp ON eo.empresa_id = emp.id
            LEFT JOIN controle_ch_obrigatorio cho ON eo.id = cho.estagio_id
            WHERE eo.status = 'Ativo' AND eo.orientador_id = ? AND (est.nome LIKE ? OR emp.nome LIKE ?)
            GROUP BY eo.id, est.nome, emp.nome, eo.carga_horaria
            ORDER BY est.nome
        """, (self.orientador_logado_id, f'%{termo}%', f'%{termo}%'))
        
        relatorios = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for relatorio in relatorios:
            estagio_id = relatorio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ?
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Definir s√≠mbolos para relat√≥rios anexados
            r1 = "‚úÖ" if "1¬∫ Relat√≥rio Parcial" in relatorios_anexados else "‚ùå"
            r2 = "‚úÖ" if "2¬∫ Relat√≥rio Parcial" in relatorios_anexados else "‚ùå"
            r3 = "‚úÖ" if "3¬∫ Relat√≥rio Parcial" in relatorios_anexados else "‚ùå"
            rf = "‚úÖ" if "Relat√≥rio Final" in relatorios_anexados else "‚ùå"
            
            ch_total = f"{relatorio[3]}h"
            ch_parcial = f"{relatorio[4]}h"
            ch_restante = f"{relatorio[5]}h"
            
            status = relatorio[6]
            if status == "Conclu√≠do":
                status = "‚úÖ Conclu√≠do"
            else:
                status = "üîÑ Em Andamento"
            
            self.tree_relatorio_obrigatorio.insert('', 'end', values=(
                'üîç', relatorio[0], relatorio[1], relatorio[2], 
                ch_total, ch_parcial, ch_restante, status, r1, r2, r3, rf
            ))

    def on_double_click_relatorio(self, event):
        """Evento de clique duplo na tabela de relat√≥rio"""
        selected = self.tree_relatorio_obrigatorio.selection()
        if not selected:
            return
            
        item = self.tree_relatorio_obrigatorio.item(selected[0])
        column = self.tree_relatorio_obrigatorio.identify_column(event.x)
        
        # Verificar se clicou na coluna de a√ß√£o (coluna 1)
        if column == '#1':  # Coluna de a√ß√£o
            self.abrir_detalhes_estagio()

    def abrir_detalhes_estagio(self):
        """Abrir janela de detalhes do est√°gio obrigat√≥rio - Layout Padronizado"""
        selected = self.tree_relatorio_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para ver os detalhes!")
            return
        
        item = self.tree_relatorio_obrigatorio.item(selected[0])
        estagio_id = item['values'][1]  # ID est√° na segunda coluna
        
        # Chamar a nova fun√ß√£o padronizada
        self.abrir_janela_detalhes_centralizada_obrigatorio(estagio_id)

    def abrir_janela_detalhes_centralizada_obrigatorio(self, estagio_id):
        """Abrir janela centralizada com detalhes do est√°gio obrigat√≥rio - Layout Padronizado"""
        try:
            # Buscar dados completos do est√°gio
            self.cursor.execute("""
                SELECT 
                    eo.id, 
                    est.nome,
                    est.cpf,
                    est.email,
                    est.telefone,
                    ori.nome,
                    ori.email_institucional,
                    emp.nome,
                    COALESCE(emp.endereco, 'N√£o informado') as endereco_empresa,
                    emp.telefone,
                    eo.data_inicio,
                    eo.data_termino,
                    eo.nome_supervisor,
                    COALESCE(eo.registro_crc, 'N√£o informado') as registro_crc,
                    eo.carga_horaria,
                    eo.status
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN orientadores ori ON eo.orientador_id = ori.id
            JOIN empresas emp ON eo.empresa_id = emp.id
            WHERE eo.id = ?
            """, (estagio_id,))
            
            estagio_data = self.cursor.fetchone()
            
            if not estagio_data:
                messagebox.showerror("Erro", "Est√°gio n√£o encontrado!")
                return
        
            # Criar janela modal centralizada
            detalhes_window = ctk.CTkToplevel(self.root)
            detalhes_window.title(f"üìã Detalhes do Est√°gio Obrigat√≥rio - ID: {estagio_id}")
            detalhes_window.geometry("800x700")
            detalhes_window.resizable(True, True)
        
        # Centralizar janela
            detalhes_window.transient(self.root)
            detalhes_window.grab_set()
        
        # Centralizar na tela
            detalhes_window.update_idletasks()
            width = detalhes_window.winfo_width()
            height = detalhes_window.winfo_height()
            x = (detalhes_window.winfo_screenwidth() // 2) - (width // 2)
            y = (detalhes_window.winfo_screenheight() // 2) - (height // 2)
            detalhes_window.geometry(f"{width}x{height}+{x}+{y}")
            
            # Frame principal com scroll
            main_frame = ctk.CTkScrollableFrame(detalhes_window, fg_color=self.cor_branco)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo principal
            titulo_frame = ctk.CTkFrame(main_frame, fg_color="#E8F5E8", corner_radius=10)
            titulo_frame.pack(fill="x", pady=(0, 20))
            
            ctk.CTkLabel(
                titulo_frame,
                text="üìã DETALHES DO EST√ÅGIO OBRIGAT√ìRIO",
            font=ctk.CTkFont(size=24, weight="bold"),
                text_color="#2E7D32"
            ).pack(pady=20)
        
        # Se√ß√£o 1: Dados do Estudante
            self.criar_secao_detalhes(main_frame, "üë§ DADOS DO ESTUDANTE", [
                ("Nome:", estagio_data[1]),
                ("CPF:", estagio_data[2]),
                ("Email:", estagio_data[3]),
                ("Telefone:", estagio_data[4])
            ], "#E3F2FD", "#1976D2")
        
        # Se√ß√£o 2: Dados do Orientador
            self.criar_secao_detalhes(main_frame, "üéì ORIENTADOR", [
                ("Nome:", estagio_data[5]),
                ("Email:", estagio_data[6])
            ], "#FFF3E0", "#F57C00")
        
        # Se√ß√£o 3: Dados da Empresa
            self.criar_secao_detalhes(main_frame, "üè¢ EMPRESA", [
                ("Nome:", estagio_data[7]),
                ("Endere√ßo:", estagio_data[8]),
                ("Telefone:", estagio_data[9]),
                ("Supervisor:", estagio_data[12]),
                ("CRC:", estagio_data[13])
            ], "#F3E5F5", "#7B1FA2")
        
        # Se√ß√£o 4: Dados do Est√°gio
            status_color = "‚úÖ Conclu√≠do" if estagio_data[15] == "Conclu√≠do" else "üîÑ Em Andamento"
            
            # Buscar CH Parcial (horas cumpridas)
            self.cursor.execute("""
                SELECT COALESCE(SUM(horas_registradas), 0) as horas_cumpridas
                FROM controle_ch_obrigatorio 
                WHERE estagio_id = ?
            """, (estagio_id,))
            ch_parcial_result = self.cursor.fetchone()
            ch_parcial = ch_parcial_result[0] if ch_parcial_result else 0
            
            self.criar_secao_detalhes(main_frame, "üìä INFORMA√á√ïES DO EST√ÅGIO", [
                ("ID:", str(estagio_data[0])),
                ("Data In√≠cio:", estagio_data[10]),
                ("Data T√©rmino:", estagio_data[11]),
                ("Carga Hor√°ria:", f"{estagio_data[14]} horas"),
                ("CH Parcial:", f"{ch_parcial} horas"),
                ("Status:", status_color)
            ], "#E8F5E8", "#2E7D32")
            
            # Se√ß√£o 5: Status dos Relat√≥rios
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio NOT LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Status para todos os 10 relat√≥rios parciais
            r1_status = "‚úÖ Anexado" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r2_status = "‚úÖ Anexado" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r3_status = "‚úÖ Anexado" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r4_status = "‚úÖ Anexado" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r5_status = "‚úÖ Anexado" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r6_status = "‚úÖ Anexado" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r7_status = "‚úÖ Anexado" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r8_status = "‚úÖ Anexado" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r9_status = "‚úÖ Anexado" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r10_status = "‚úÖ Anexado" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            rf_status = "‚úÖ Anexado" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå Pendente"
            
            self.criar_secao_detalhes(main_frame, "üìÑ STATUS DOS RELAT√ìRIOS", [
                ("1¬∫ Relat√≥rio Parcial:", r1_status),
                ("2¬∫ Relat√≥rio Parcial:", r2_status),
                ("3¬∫ Relat√≥rio Parcial:", r3_status),
                ("4¬∫ Relat√≥rio Parcial:", r4_status),
                ("5¬∫ Relat√≥rio Parcial:", r5_status),
                ("6¬∫ Relat√≥rio Parcial:", r6_status),
                ("7¬∫ Relat√≥rio Parcial:", r7_status),
                ("8¬∫ Relat√≥rio Parcial:", r8_status),
                ("9¬∫ Relat√≥rio Parcial:", r9_status),
                ("10¬∫ Relat√≥rio Parcial:", r10_status),
                ("Relat√≥rio Final:", rf_status)
            ], "#FFEBEE", "#C62828")
            
            # Se√ß√£o 6: Anexar Relat√≥rios
            self.criar_secao_anexar_relatorios_obrigatorio(main_frame, estagio_id, estagio_data[1])
            
            # Se√ß√£o 7: Controle de Carga Hor√°ria
            self.criar_secao_controle_ch_obrigatorio(main_frame, estagio_id)
            
            # Bot√µes de a√ß√£o
            botoes_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            botoes_frame.pack(fill="x", pady=(20, 0))
            
            ctk.CTkButton(
                botoes_frame,
                text="‚úèÔ∏è Editar Est√°gio",
                width=150,
                height=40,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#1976D2",
                hover_color="#1565C0",
                command=lambda: self.editar_estagio_desde_detalhes_obrigatorio(estagio_id, detalhes_window)
            ).pack(side="left", padx=(0, 10))
            
            ctk.CTkButton(
                botoes_frame,
                text="üìÑ Gerenciar Relat√≥rios",
                width=150,
                height=40,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#2E7D32",
                hover_color="#1B5E20",
                command=lambda: self.gerenciar_relatorios_desde_detalhes_obrigatorio(estagio_id, detalhes_window)
            ).pack(side="left", padx=(0, 10))
            
            ctk.CTkButton(
                botoes_frame,
            text="‚ùå Fechar",
                width=100,
                height=40,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#757575",
                hover_color="#616161",
                command=detalhes_window.destroy
            ).pack(side="right")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir detalhes: {str(e)}")

    def criar_secao_anexar_relatorios_obrigatorio(self, parent, estagio_id, nome_estudante):
        """Criar se√ß√£o para anexar relat√≥rios do est√°gio obrigat√≥rio"""
        secao_frame = ctk.CTkFrame(parent, fg_color="#F5F5F5", corner_radius=10)
        secao_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        ctk.CTkLabel(
            secao_frame,
            text="üìé ANEXAR RELAT√ìRIOS",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#424242"
        ).pack(pady=(15, 10))
        
        # Frame para controles
        controles_frame = ctk.CTkFrame(secao_frame, fg_color="transparent")
        controles_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Linha 1: Tipo de relat√≥rio
        tipo_frame = ctk.CTkFrame(controles_frame, fg_color="transparent")
        tipo_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(
            tipo_frame,
            text="Tipo de Relat√≥rio:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="#424242"
        ).pack(side="left")
        
        # Combo para tipo de relat√≥rio
        self.relatorio_combo_obrigatorio = ctk.CTkComboBox(
            tipo_frame,
            values=[
                "1¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "2¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "3¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "4¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "5¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "6¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "7¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "8¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "9¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "10¬∫ Relat√≥rio Parcial - Obrigat√≥rio",
                "Relat√≥rio Final - Obrigat√≥rio"
            ],
            width=300,
            height=35
        )
        self.relatorio_combo_obrigatorio.pack(side="right")
        
        # Linha 2: Sele√ß√£o do arquivo
        arquivo_frame = ctk.CTkFrame(controles_frame, fg_color="transparent")
        arquivo_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(
            arquivo_frame,
            text="Arquivo:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="#424242"
        ).pack(side="left")
        
        btn_selecionar = ctk.CTkButton(
            arquivo_frame,
            text="üìÅ Selecionar Arquivo",
            width=150,
            height=35,
            command=lambda: self.selecionar_arquivo_relatorio_obrigatorio()
        )
        btn_selecionar.pack(side="right", padx=(0, 10))
        
        # Linha 3: Arquivo selecionado
        self.arquivo_selecionado_label_obrigatorio = ctk.CTkLabel(
            controles_frame,
            text="üìÑ Nenhum arquivo selecionado",
            font=ctk.CTkFont(size=11),
            text_color="#666666"
        )
        self.arquivo_selecionado_label_obrigatorio.pack(pady=(0, 10))
        
        # Bot√£o salvar
        btn_salvar = ctk.CTkButton(
            controles_frame,
            text="üíæ Salvar Relat√≥rio",
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#2E7D32",
            hover_color="#1B5E20",
            command=lambda: self.salvar_relatorio_detalhes_obrigatorio(estagio_id, nome_estudante)
        )
        btn_salvar.pack(pady=(10, 0))
        
        # Inicializar vari√°vel para arquivo selecionado
        self.arquivo_selecionado_obrigatorio = None

    def criar_secao_controle_ch_obrigatorio(self, parent, estagio_id):
        """Criar se√ß√£o para controle de carga hor√°ria do est√°gio obrigat√≥rio"""
        secao_frame = ctk.CTkFrame(parent, fg_color="#FFF8E1", corner_radius=10)
        secao_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        ctk.CTkLabel(
            secao_frame,
            text="‚è∞ CONTROLE DE CARGA HOR√ÅRIA",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(15, 10))
        
        # Buscar dados de carga hor√°ria
        self.cursor.execute("""
            SELECT 
                eo.carga_horaria,
                COALESCE(SUM(ch.horas_registradas), 0) as horas_cumpridas
            FROM estagio_obrigatorio eo
            LEFT JOIN controle_ch_obrigatorio ch ON eo.id = ch.estagio_id
            WHERE eo.id = ?
            GROUP BY eo.id, eo.carga_horaria
        """, (estagio_id,))
        
        ch_data = self.cursor.fetchone()
        if ch_data:
            ch_total = ch_data[0]
            ch_cumprida = ch_data[1]
            ch_restante = max(0, ch_total - ch_cumprida)
            percentual = (ch_cumprida / ch_total * 100) if ch_total > 0 else 0
        else:
            ch_total = ch_cumprida = ch_restante = 0
            percentual = 0
        
        # Frame para dados de CH
        dados_frame = ctk.CTkFrame(secao_frame, fg_color="transparent")
        dados_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Grid de informa√ß√µes
        info_grid = ctk.CTkFrame(dados_frame, fg_color="transparent")
        info_grid.pack(fill="x")
        
        # Linha 1
        ctk.CTkLabel(info_grid, text="Carga Hor√°ria Total:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", padx=(0, 20))
        ctk.CTkLabel(info_grid, text=f"{ch_total}h").grid(row=0, column=1, sticky="w")
        
        # Linha 2
        ctk.CTkLabel(info_grid, text="Horas Cumpridas:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=0, sticky="w", padx=(0, 20), pady=(5, 0))
        ctk.CTkLabel(info_grid, text=f"{ch_cumprida}h").grid(row=1, column=1, sticky="w", pady=(5, 0))
        
        # Linha 3
        ctk.CTkLabel(info_grid, text="Horas Restantes:", font=ctk.CTkFont(weight="bold")).grid(row=2, column=0, sticky="w", padx=(0, 20), pady=(5, 0))
        ctk.CTkLabel(info_grid, text=f"{ch_restante}h").grid(row=2, column=1, sticky="w", pady=(5, 0))
        
        # Linha 4
        ctk.CTkLabel(info_grid, text="Percentual:", font=ctk.CTkFont(weight="bold")).grid(row=3, column=0, sticky="w", padx=(0, 20), pady=(5, 0))
        ctk.CTkLabel(info_grid, text=f"{percentual:.1f}%").grid(row=3, column=1, sticky="w", pady=(5, 0))
        
        # Barra de progresso
        progress_frame = ctk.CTkFrame(dados_frame, fg_color="transparent")
        progress_frame.pack(fill="x", pady=(10, 0))
        
        ctk.CTkLabel(progress_frame, text="Progresso:", font=ctk.CTkFont(weight="bold")).pack(anchor="w")
        
        progress_bar = ctk.CTkProgressBar(progress_frame, width=400, height=20)
        progress_bar.pack(fill="x", pady=(5, 0))
        progress_bar.set(percentual / 100)
        
        # Se√ß√£o para registrar novas horas
        registro_frame = ctk.CTkFrame(dados_frame, fg_color="transparent")
        registro_frame.pack(fill="x", pady=(15, 0))
        
        ctk.CTkLabel(registro_frame, text="Registrar Horas:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 10))
        
        # Frame para entrada de dados
        entrada_frame = ctk.CTkFrame(registro_frame, fg_color="transparent")
        entrada_frame.pack(fill="x")
        
        # Data
        data_frame = ctk.CTkFrame(entrada_frame, fg_color="transparent")
        data_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(data_frame, text="Data:", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left")
        self.ch_data_entry_obrig = ctk.CTkEntry(data_frame, width=120, placeholder_text="DD/MM/AAAA")
        self.ch_data_entry_obrig.pack(side="left", padx=(10, 20))
        
        # Horas
        ctk.CTkLabel(data_frame, text="Horas:", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left")
        self.ch_horas_entry_obrig = ctk.CTkEntry(data_frame, width=80, placeholder_text="8")
        self.ch_horas_entry_obrig.pack(side="left", padx=(10, 0))
        
        # Observa√ß√µes
        obs_frame = ctk.CTkFrame(entrada_frame, fg_color="transparent")
        obs_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(obs_frame, text="Observa√ß√µes:", font=ctk.CTkFont(size=12, weight="bold")).pack(anchor="w")
        self.ch_obs_entry_obrig = ctk.CTkEntry(obs_frame, width=400, placeholder_text="Descri√ß√£o das atividades realizadas...")
        self.ch_obs_entry_obrig.pack(fill="x", pady=(5, 0))
        
        # Bot√£o salvar
        ctk.CTkButton(
            entrada_frame,
            text="üíæ Salvar Horas",
            width=150,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#4CAF50",
            hover_color="#45A049",
            command=lambda: self.salvar_ch_obrigatorio(estagio_id)
        ).pack(pady=(10, 0))

    def criar_secao_controle_ch_nao_obrigatorio(self, parent, estagio_id):
        """Criar se√ß√£o para controle de carga hor√°ria do est√°gio n√£o obrigat√≥rio"""
        secao_frame = ctk.CTkFrame(parent, fg_color="#FFF8E1", corner_radius=10)
        secao_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        ctk.CTkLabel(
            secao_frame,
            text="‚è∞ CONTROLE DE CARGA HOR√ÅRIA",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#F57C00"
        ).pack(pady=(15, 10))
        
        # Buscar dados de carga hor√°ria
        self.cursor.execute("""
            SELECT 
                eno.carga_horaria,
                COALESCE(SUM(ch.horas_registradas), 0) as horas_cumpridas
            FROM estagio_nao_obrigatorio eno
            LEFT JOIN controle_ch_nao_obrigatorio ch ON eno.id = ch.estagio_id
            WHERE eno.id = ?
            GROUP BY eno.id, eno.carga_horaria
        """, (estagio_id,))
        
        ch_data = self.cursor.fetchone()
        if ch_data:
            ch_total = ch_data[0]
            ch_cumprida = ch_data[1]
            ch_restante = max(0, ch_total - ch_cumprida)
            percentual = (ch_cumprida / ch_total * 100) if ch_total > 0 else 0
        else:
            ch_total = ch_cumprida = ch_restante = 0
            percentual = 0
        
        # Frame para dados de CH
        dados_frame = ctk.CTkFrame(secao_frame, fg_color="transparent")
        dados_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Grid de informa√ß√µes
        info_grid = ctk.CTkFrame(dados_frame, fg_color="transparent")
        info_grid.pack(fill="x")
        
        # Linha 1
        ctk.CTkLabel(info_grid, text="Carga Hor√°ria Total:", font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", padx=(0, 20))
        ctk.CTkLabel(info_grid, text=f"{ch_total}h").grid(row=0, column=1, sticky="w")
        
        # Linha 2
        ctk.CTkLabel(info_grid, text="Horas Cumpridas:", font=ctk.CTkFont(weight="bold")).grid(row=1, column=0, sticky="w", padx=(0, 20), pady=(5, 0))
        ctk.CTkLabel(info_grid, text=f"{ch_cumprida}h").grid(row=1, column=1, sticky="w", pady=(5, 0))
        
        # Linha 3
        ctk.CTkLabel(info_grid, text="Horas Restantes:", font=ctk.CTkFont(weight="bold")).grid(row=2, column=0, sticky="w", padx=(0, 20), pady=(5, 0))
        ctk.CTkLabel(info_grid, text=f"{ch_restante}h").grid(row=2, column=1, sticky="w", pady=(5, 0))
        
        # Linha 4
        ctk.CTkLabel(info_grid, text="Percentual:", font=ctk.CTkFont(weight="bold")).grid(row=3, column=0, sticky="w", padx=(0, 20), pady=(5, 0))
        ctk.CTkLabel(info_grid, text=f"{percentual:.1f}%").grid(row=3, column=1, sticky="w", pady=(5, 0))
        
        # Barra de progresso
        progress_frame = ctk.CTkFrame(dados_frame, fg_color="transparent")
        progress_frame.pack(fill="x", pady=(10, 0))
        
        ctk.CTkLabel(progress_frame, text="Progresso:", font=ctk.CTkFont(weight="bold")).pack(anchor="w")
        
        progress_bar = ctk.CTkProgressBar(progress_frame, width=400, height=20)
        progress_bar.pack(fill="x", pady=(5, 0))
        progress_bar.set(percentual / 100)
        
        # Se√ß√£o para registrar novas horas
        registro_frame = ctk.CTkFrame(dados_frame, fg_color="transparent")
        registro_frame.pack(fill="x", pady=(15, 0))
        
        ctk.CTkLabel(registro_frame, text="Registrar Horas:", font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 10))
        
        # Frame para entrada de dados
        entrada_frame = ctk.CTkFrame(registro_frame, fg_color="transparent")
        entrada_frame.pack(fill="x")
        
        # Data
        data_frame = ctk.CTkFrame(entrada_frame, fg_color="transparent")
        data_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(data_frame, text="Data:", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left")
        self.ch_data_entry_nao_obrig = ctk.CTkEntry(data_frame, width=120, placeholder_text="DD/MM/AAAA")
        self.ch_data_entry_nao_obrig.pack(side="left", padx=(10, 20))
        
        # Horas
        ctk.CTkLabel(data_frame, text="Horas:", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left")
        self.ch_horas_entry_nao_obrig = ctk.CTkEntry(data_frame, width=80, placeholder_text="8")
        self.ch_horas_entry_nao_obrig.pack(side="left", padx=(10, 0))
        
        # Observa√ß√µes
        obs_frame = ctk.CTkFrame(entrada_frame, fg_color="transparent")
        obs_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(obs_frame, text="Observa√ß√µes:", font=ctk.CTkFont(size=12, weight="bold")).pack(anchor="w")
        self.ch_obs_entry_nao_obrig = ctk.CTkEntry(obs_frame, width=400, placeholder_text="Descri√ß√£o das atividades realizadas...")
        self.ch_obs_entry_nao_obrig.pack(fill="x", pady=(5, 0))
        
        # Bot√£o salvar
        ctk.CTkButton(
            entrada_frame,
            text="üíæ Salvar Horas",
            width=150,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#4CAF50",
            hover_color="#45A049",
            command=lambda: self.salvar_ch_nao_obrigatorio(estagio_id)
        ).pack(pady=(10, 0))

    def selecionar_arquivo_relatorio_obrigatorio(self):
        """Selecionar arquivo para anexar como relat√≥rio obrigat√≥rio"""
        try:
            from tkinter import filedialog
            arquivo = filedialog.askopenfilename(
                title="Selecionar Relat√≥rio",
                filetypes=[
                    ("Arquivos PDF", "*.pdf"),
                    ("Arquivos Word", "*.docx;*.doc"),
                    ("Todos os arquivos", "*.*")
                ]
            )
            
            if arquivo:
                self.arquivo_selecionado_obrigatorio = arquivo
                nome_arquivo = os.path.basename(arquivo)
                self.arquivo_selecionado_label_obrigatorio.configure(text=f"üìÑ {nome_arquivo}")
            else:
                self.arquivo_selecionado_obrigatorio = None
                self.arquivo_selecionado_label_obrigatorio.configure(text="üìÑ Nenhum arquivo selecionado")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao selecionar arquivo: {str(e)}")
            self.arquivo_selecionado_obrigatorio = None
            self.arquivo_selecionado_label_obrigatorio.configure(text="üìÑ Nenhum arquivo selecionado")

    def salvar_relatorio_detalhes_obrigatorio(self, estagio_id, nome_estudante):
        """Salvar relat√≥rio a partir da tela de detalhes obrigat√≥rio"""
        try:
            tipo_relatorio = self.relatorio_combo_obrigatorio.get()
            
            if not tipo_relatorio:
                messagebox.showerror("Erro", "Selecione o tipo de relat√≥rio!")
                return
            
            if not hasattr(self, 'arquivo_selecionado_obrigatorio') or not self.arquivo_selecionado_obrigatorio:
                messagebox.showerror("Erro", "Selecione um arquivo para anexar!")
                return
            
            # Verificar se o arquivo existe
            if not os.path.exists(self.arquivo_selecionado_obrigatorio):
                messagebox.showerror("Erro", "Arquivo selecionado n√£o existe!")
                return
            
            # Criar diret√≥rio se n√£o existir
            pasta_base = "Relat√≥rios/Obrigat√≥rio"
            nome_estudante_limpo = nome_estudante.replace(" ", "_").replace("/", "_").replace("\\", "_")
            pasta_estudante = os.path.join(pasta_base, nome_estudante_limpo)
            
            os.makedirs(pasta_estudante, exist_ok=True)
            
            # Definir nome do arquivo de destino
            extensao = os.path.splitext(self.arquivo_selecionado_obrigatorio)[1]
            nome_arquivo = f"{tipo_relatorio.replace(' ', '_').replace('-', '_')}{extensao}"
            destino = os.path.join(pasta_estudante, nome_arquivo)
            
            # Copiar arquivo
            shutil.copy2(self.arquivo_selecionado_obrigatorio, destino)
            
            # Registrar no banco
            data_anexo = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.cursor.execute("""
                INSERT INTO relatorios_anexados (estagio_id, tipo_relatorio, nome_arquivo, caminho_arquivo, data_anexo)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, tipo_relatorio, nome_arquivo, destino, data_anexo))
            
            self.conn.commit()
            
            # Limpar sele√ß√£o
            self.relatorio_combo_obrigatorio.set("")
            self.arquivo_selecionado_label_obrigatorio.configure(text="üìÑ Nenhum arquivo selecionado")
            self.arquivo_selecionado_obrigatorio = None
            
            # Tentar recarregar tabela se estiver dispon√≠vel
            if hasattr(self, 'tree_relatorio_obrigatorio') and self.tree_relatorio_obrigatorio:
                try:
                    self.carregar_relatorio_obrigatorio()
                except:
                    pass  # Ignora se n√£o conseguir recarregar
            
            # Mostrar mensagem de sucesso
            messagebox.showinfo("Sucesso", 
                f"Relat√≥rio '{tipo_relatorio}' salvo com sucesso!\n\n"
                f"üìÅ Local: {os.path.abspath(destino)}\n"
                f"üë§ Estudante: {nome_estudante.replace('_', ' ')}\n\n"
                f"üí° O status dos relat√≥rios foi atualizado!")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar relat√≥rio: {str(e)}")

    def editar_estagio_desde_detalhes_obrigatorio(self, estagio_id, janela_detalhes):
        """Editar est√°gio a partir da janela de detalhes"""
        try:
            janela_detalhes.destroy()
            # Aqui voc√™ pode implementar a l√≥gica de edi√ß√£o
            messagebox.showinfo("Info", f"Funcionalidade de edi√ß√£o para est√°gio ID {estagio_id} ser√° implementada em breve.")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao editar est√°gio: {str(e)}")

    def gerenciar_relatorios_desde_detalhes_obrigatorio(self, estagio_id, janela_detalhes):
        """Gerenciar relat√≥rios a partir da janela de detalhes"""
        try:
            janela_detalhes.destroy()
            # Aqui voc√™ pode implementar a l√≥gica de gerenciamento de relat√≥rios
            messagebox.showinfo("Info", f"Funcionalidade de gerenciamento de relat√≥rios para est√°gio ID {estagio_id} ser√° implementada em breve.")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerenciar relat√≥rios: {str(e)}")

    def create_section_estudante_detalhes(self, parent, dados):
        """Criar se√ß√£o com dados do estudante"""
        section_frame = ctk.CTkFrame(parent, fg_color=self.cor_terciaria, corner_radius=10)
        section_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        title = ctk.CTkLabel(
            section_frame,
            text="üë• DADOS DO ESTUDANTE",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_branco
        )
        title.pack(pady=(15, 10))
        
        # Grid para os dados
        info_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        info_frame.pack(fill="x", padx=20, pady=(0, 15))
        info_frame.grid_columnconfigure((0, 1), weight=1)
        
        # Dados do estudante (√≠ndices 11-16)
        dados_estudante = [
            ("Nome:", dados[11]),
            ("Matr√≠cula:", dados[12]),
            ("Email:", dados[13]),
            ("Telefone:", dados[14]),
            ("CPF:", dados[15])
        ]
        
        for i, (label, valor) in enumerate(dados_estudante):
            row = i // 2
            col = i % 2
            
            field_frame = ctk.CTkFrame(info_frame, fg_color="transparent")
            field_frame.grid(row=row, column=col, sticky="ew", padx=10, pady=5)
            
            label_widget = ctk.CTkLabel(
                field_frame,
                text=label,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color=self.cor_texto
            )
            label_widget.pack(anchor="w")
            
            value_widget = ctk.CTkLabel(
                field_frame,
                text=str(valor) if valor else "N√£o informado",
                font=ctk.CTkFont(size=12),
                text_color=self.cor_texto
            )
            value_widget.pack(anchor="w")

    def create_section_orientador_detalhes(self, parent, dados):
        """Criar se√ß√£o com dados do orientador"""
        section_frame = ctk.CTkFrame(parent, fg_color=self.cor_secundaria, corner_radius=10)
        section_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        title = ctk.CTkLabel(
            section_frame,
            text="üë®‚Äçüè´ DADOS DO ORIENTADOR",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_branco
        )
        title.pack(pady=(15, 10))
        
        # Grid para os dados
        info_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        info_frame.pack(fill="x", padx=20, pady=(0, 15))
        info_frame.grid_columnconfigure((0, 1), weight=1)
        
        # Dados do orientador (√≠ndices 16-18)
        dados_orientador = [
            ("Nome:", dados[16]),
            ("SIAPE:", dados[17]),
            ("Email Institucional:", dados[18])
        ]
        
        for i, (label, valor) in enumerate(dados_orientador):
            row = i // 2
            col = i % 2
            
            field_frame = ctk.CTkFrame(info_frame, fg_color="transparent")
            field_frame.grid(row=row, column=col, sticky="ew", padx=10, pady=5)
            
            label_widget = ctk.CTkLabel(
                field_frame,
                text=label,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color=self.cor_texto
            )
            label_widget.pack(anchor="w")
            
            value_widget = ctk.CTkLabel(
                field_frame,
                text=str(valor) if valor else "N√£o informado",
                font=ctk.CTkFont(size=12),
                text_color=self.cor_texto
            )
            value_widget.pack(anchor="w")

    def create_section_empresa_detalhes(self, parent, dados):
        """Criar se√ß√£o com dados da empresa"""
        section_frame = ctk.CTkFrame(parent, fg_color="#10b981", corner_radius=10)
        section_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        title = ctk.CTkLabel(
            section_frame,
            text="üè¢ DADOS DA EMPRESA",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_branco
        )
        title.pack(pady=(15, 10))
        
        # Grid para os dados
        info_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        info_frame.pack(fill="x", padx=20, pady=(0, 15))
        info_frame.grid_columnconfigure((0, 1), weight=1)
        
        # Dados da empresa (√≠ndices 19-23)
        dados_empresa = [
            ("Nome:", dados[19]),
            ("CNPJ:", dados[20]),
            ("Telefone:", dados[21]),
            ("Cidade:", dados[22]),
            ("Respons√°vel:", dados[23])
        ]
        
        for i, (label, valor) in enumerate(dados_empresa):
            row = i // 2
            col = i % 2
            
            field_frame = ctk.CTkFrame(info_frame, fg_color="transparent")
            field_frame.grid(row=row, column=col, sticky="ew", padx=10, pady=5)
            
            label_widget = ctk.CTkLabel(
                field_frame,
                text=label,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color=self.cor_texto
            )
            label_widget.pack(anchor="w")
            
            value_widget = ctk.CTkLabel(
                field_frame,
                text=str(valor) if valor else "N√£o informado",
                font=ctk.CTkFont(size=12),
                text_color=self.cor_texto
            )
            value_widget.pack(anchor="w")

    def create_section_estagio_detalhes(self, parent, dados):
        """Criar se√ß√£o com dados do est√°gio"""
        section_frame = ctk.CTkFrame(parent, fg_color="#f59e0b", corner_radius=10)
        section_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        title = ctk.CTkLabel(
            section_frame,
            text="üìã DADOS DO EST√ÅGIO",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_branco
        )
        title.pack(pady=(15, 10))
        
        # Grid para os dados
        info_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        info_frame.pack(fill="x", padx=20, pady=(0, 15))
        info_frame.grid_columnconfigure((0, 1), weight=1)
        
        # Dados do est√°gio (√≠ndices 4-10)
        dados_estagio = [
            ("Data de In√≠cio:", dados[4]),
            ("Data de T√©rmino:", dados[5]),
            ("Nome do Supervisor:", dados[6]),
            ("Registro CRC:", dados[7]),
            ("Carga Hor√°ria Total:", f"{dados[8]}h"),
            ("Status:", dados[9]),
            ("Data de Cadastro:", dados[10])
        ]
        
        for i, (label, valor) in enumerate(dados_estagio):
            row = i // 2
            col = i % 2
            
            field_frame = ctk.CTkFrame(info_frame, fg_color="transparent")
            field_frame.grid(row=row, column=col, sticky="ew", padx=10, pady=5)
            
            label_widget = ctk.CTkLabel(
                field_frame,
                text=label,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color=self.cor_texto
            )
            label_widget.pack(anchor="w")
            
            value_widget = ctk.CTkLabel(
                field_frame,
                text=str(valor) if valor else "N√£o informado",
                font=ctk.CTkFont(size=12),
                text_color=self.cor_texto
            )
            value_widget.pack(anchor="w")

    def create_section_ch_control(self, parent, estagio_id):
        """Criar se√ß√£o de controle de carga hor√°ria"""
        section_frame = ctk.CTkFrame(parent, fg_color=self.cor_primaria, corner_radius=10)
        section_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        title = ctk.CTkLabel(
            section_frame,
            text="‚è∞ CONTROLE DE CARGA HOR√ÅRIA",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_branco
        )
        title.pack(pady=(15, 10))
        
        # Frame para os campos
        ch_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        ch_frame.pack(fill="x", padx=20, pady=(0, 15))
        ch_frame.grid_columnconfigure((0, 1, 2), weight=1)
        
        # Data do registro
        data_frame = ctk.CTkFrame(ch_frame, fg_color="transparent")
        data_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=5)
        
        data_label = ctk.CTkLabel(
            data_frame,
            text="Data do Registro: *",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_branco
        )
        data_label.pack(anchor="w")
        
        self.ch_data_entry = ctk.CTkEntry(
            data_frame,
            width=200,
            height=35,
            font=ctk.CTkFont(size=12),
            placeholder_text="DD/MM/AAAA"
        )
        self.ch_data_entry.pack(fill="x")
        
        # Horas registradas
        horas_frame = ctk.CTkFrame(ch_frame, fg_color="transparent")
        horas_frame.grid(row=0, column=1, sticky="ew", padx=10, pady=5)
        
        horas_label = ctk.CTkLabel(
            horas_frame,
            text="Horas Registradas: *",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_branco
        )
        horas_label.pack(anchor="w")
        
        self.ch_horas_entry = ctk.CTkEntry(
            horas_frame,
            width=150,
            height=35,
            font=ctk.CTkFont(size=12),
            placeholder_text="Ex: 8"
        )
        self.ch_horas_entry.pack(fill="x")
        
        # Bot√£o salvar CH
        btn_frame = ctk.CTkFrame(ch_frame, fg_color="transparent")
        btn_frame.grid(row=0, column=2, sticky="ew", padx=10, pady=5)
        
        btn_label = ctk.CTkLabel(
            btn_frame,
            text="A√ß√£o:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_branco
        )
        btn_label.pack(anchor="w")
        
        btn_salvar_ch = ctk.CTkButton(
            btn_frame,
            text="üíæ Salvar CH",
            width=120,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#10b981",
            hover_color="#059669",
            command=lambda: self.salvar_ch_detalhes(estagio_id)
        )
        btn_salvar_ch.pack(fill="x")
        
        # Observa√ß√µes
        obs_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        obs_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        obs_label = ctk.CTkLabel(
            obs_frame,
            text="Observa√ß√µes:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_branco
        )
        obs_label.pack(anchor="w")
        
        self.ch_obs_entry = ctk.CTkTextbox(
            obs_frame,
            width=1000,
            height=80,
            font=ctk.CTkFont(size=12)
        )
        self.ch_obs_entry.pack(fill="x")

    def create_section_relatorios(self, parent, estagio_id):
        """Criar se√ß√£o de relat√≥rios"""
        section_frame = ctk.CTkFrame(parent, fg_color="#8b5cf6", corner_radius=10)
        section_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        title = ctk.CTkLabel(
            section_frame,
            text="üìÑ RELAT√ìRIOS PARCIAIS E FINAL",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_branco
        )
        title.pack(pady=(15, 10))
        
        # Frame para os campos
        rel_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        rel_frame.pack(fill="x", padx=20, pady=(0, 15))
        rel_frame.grid_columnconfigure((0, 1, 2), weight=1)
        
        # Dropdown para tipo de relat√≥rio
        tipo_frame = ctk.CTkFrame(rel_frame, fg_color="transparent")
        tipo_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=5)
        
        tipo_label = ctk.CTkLabel(
            tipo_frame,
            text="Tipo de Relat√≥rio: *",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_branco
        )
        tipo_label.pack(anchor="w")
        
        # Lista de relat√≥rios
        relatorios_opcoes = [
            "1¬∫ Relat√≥rio Parcial",
            "2¬∫ Relat√≥rio Parcial", 
            "3¬∫ Relat√≥rio Parcial",
            "4¬∫ Relat√≥rio Parcial",
            "5¬∫ Relat√≥rio Parcial",
            "6¬∫ Relat√≥rio Parcial",
            "7¬∫ Relat√≥rio Parcial",
            "8¬∫ Relat√≥rio Parcial",
            "9¬∫ Relat√≥rio Parcial",
            "10¬∫ Relat√≥rio Parcial",
            "Relat√≥rio Final"
        ]
        
        self.relatorio_combo = ctk.CTkComboBox(
            tipo_frame,
            values=relatorios_opcoes,
            width=200,
            height=35,
            font=ctk.CTkFont(size=12),
            state="readonly"
        )
        self.relatorio_combo.pack(fill="x")
        
        # Bot√£o para anexar arquivo
        anexo_frame = ctk.CTkFrame(rel_frame, fg_color="transparent")
        anexo_frame.grid(row=0, column=1, sticky="ew", padx=10, pady=5)
        
        anexo_label = ctk.CTkLabel(
            anexo_frame,
            text="Arquivo:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_branco
        )
        anexo_label.pack(anchor="w")
        
        btn_anexar = ctk.CTkButton(
            anexo_frame,
            text="üìé Anexar Arquivo",
            width=150,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#f59e0b",
            hover_color="#d97706",
            command=self.anexar_relatorio
        )
        btn_anexar.pack(fill="x")
        
        # Bot√£o salvar relat√≥rio
        btn_rel_frame = ctk.CTkFrame(rel_frame, fg_color="transparent")
        btn_rel_frame.grid(row=0, column=2, sticky="ew", padx=10, pady=5)
        
        btn_rel_label = ctk.CTkLabel(
            btn_rel_frame,
            text="A√ß√£o:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color=self.cor_branco
        )
        btn_rel_label.pack(anchor="w")
        
        btn_salvar_rel = ctk.CTkButton(
            btn_rel_frame,
            text="üíæ Salvar Relat√≥rio",
            width=150,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#10b981",
            hover_color="#059669",
            command=lambda: self.salvar_relatorio_detalhes(estagio_id)
        )
        btn_salvar_rel.pack(fill="x")
        
        # Campo para mostrar arquivo selecionado
        self.arquivo_selecionado_label = ctk.CTkLabel(
            section_frame,
            text="Nenhum arquivo selecionado",
            font=ctk.CTkFont(size=11),
            text_color=self.cor_branco
        )
        self.arquivo_selecionado_label.pack(pady=(0, 15))

    def anexar_relatorio(self):
        """Abrir dialog para anexar relat√≥rio"""
        from tkinter import filedialog
        
        arquivo = filedialog.askopenfilename(
            title="Selecionar Relat√≥rio",
            filetypes=[
                ("Arquivos PDF", "*.pdf"),
                ("Documentos Word", "*.docx *.doc"),
                ("Todos os arquivos", "*.*")
            ]
        )
        
        if arquivo:
            import os
            nome_arquivo = os.path.basename(arquivo)
            self.arquivo_selecionado_label.configure(text=f"üìé Arquivo: {nome_arquivo}")
            self.arquivo_selecionado = arquivo
        else:
            self.arquivo_selecionado_label.configure(text="Nenhum arquivo selecionado")
            self.arquivo_selecionado = None

    def salvar_ch_detalhes(self, estagio_id):
        """Salvar carga hor√°ria a partir da tela de detalhes"""
        try:
            data_registro = self.ch_data_entry.get().strip()
            horas_registradas = self.ch_horas_entry.get().strip()
            observacoes = self.ch_obs_entry.get("1.0", "end-1c").strip()
            
            if not all([data_registro, horas_registradas]):
                messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios!")
                return
            
            # Validar horas
            try:
                horas_registradas = int(horas_registradas)
                if horas_registradas <= 0:
                    messagebox.showerror("Erro", "As horas registradas devem ser um n√∫mero positivo!")
                    return
            except ValueError:
                messagebox.showerror("Erro", "As horas registradas devem ser um n√∫mero!")
                return
            
            # Inserir registro
            data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
            self.cursor.execute("""
                INSERT INTO controle_ch_obrigatorio 
                (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro))
            
            self.conn.commit()
            messagebox.showinfo("Sucesso", "Carga hor√°ria registrada com sucesso!")
            
            # Limpar campos
            self.ch_data_entry.delete(0, 'end')
            self.ch_horas_entry.delete(0, 'end')
            self.ch_obs_entry.delete("1.0", "end")
            
            # Atualizar relat√≥rio principal
            self.carregar_relatorio_obrigatorio()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar carga hor√°ria: {str(e)}")

    def salvar_relatorio_detalhes(self, estagio_id):
        """Salvar relat√≥rio a partir da tela de detalhes"""
        try:
            tipo_relatorio = self.relatorio_combo.get()
            
            if not tipo_relatorio:
                messagebox.showerror("Erro", "Selecione o tipo de relat√≥rio!")
                return
            
            if not hasattr(self, 'arquivo_selecionado') or not self.arquivo_selecionado:
                messagebox.showerror("Erro", "Selecione um arquivo para anexar!")
                return
            
            # Buscar nome do estudante do est√°gio
            self.cursor.execute("""
                SELECT est.nome 
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                WHERE eo.id = ?
            """, (estagio_id,))
            
            resultado = self.cursor.fetchone()
            if not resultado:
                messagebox.showerror("Erro", "N√£o foi poss√≠vel encontrar o estudante do est√°gio!")
                return
            
            nome_estudante = resultado[0]
            # Limpar caracteres especiais do nome para usar como nome de pasta
            nome_estudante_pasta = "".join(c for c in nome_estudante if c.isalnum() or c in (' ', '-', '_')).rstrip()
            nome_estudante_pasta = nome_estudante_pasta.replace(' ', '_')
            
            # Criar estrutura de diret√≥rios: Relat√≥rios/Obrigat√≥rio/Nome_do_Estudante/
            relatorios_base_dir = "Relat√≥rios"
            relatorios_obrigatorio_dir = os.path.join(relatorios_base_dir, "Obrigat√≥rio")
            relatorios_estudante_dir = os.path.join(relatorios_obrigatorio_dir, nome_estudante_pasta)
            
            # Criar diret√≥rios se n√£o existirem
            if not os.path.exists(relatorios_estudante_dir):
                os.makedirs(relatorios_estudante_dir)
                print(f"Diret√≥rio criado: {relatorios_estudante_dir}")
            
            # Copiar arquivo para diret√≥rio espec√≠fico do estudante
            import shutil
            # Obter extens√£o do arquivo original
            _, extensao = os.path.splitext(self.arquivo_selecionado)
            nome_arquivo = f"{tipo_relatorio.replace(' ', '_').replace('¬∫', '')}{extensao}"
            destino = os.path.join(relatorios_estudante_dir, nome_arquivo)
            
            shutil.copy2(self.arquivo_selecionado, destino)
            
            # Registrar relat√≥rio na tabela de controle
            data_anexo = datetime.now().strftime("%d/%m/%Y %H:%M")
            self.cursor.execute("""
                INSERT INTO relatorios_anexados 
                (estagio_id, tipo_relatorio, nome_arquivo, caminho_arquivo, data_anexo)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, tipo_relatorio, nome_arquivo, os.path.abspath(destino), data_anexo))
            
            self.conn.commit()
            
            messagebox.showinfo("Sucesso", 
                f"Relat√≥rio '{tipo_relatorio}' salvo com sucesso!\n\n"
                f"üìÅ Local: {os.path.abspath(destino)}\n"
                f"üë§ Estudante: {nome_estudante}")
            
            # Limpar sele√ß√£o
            self.relatorio_combo.set("")
            self.arquivo_selecionado_label.configure(text="Nenhum arquivo selecionado")
            self.arquivo_selecionado = None
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar relat√≥rio: {str(e)}")

    def registrar_carga_horaria(self):
        """Registrar carga hor√°ria para est√°gio"""
        selected = self.tree_relatorio_obrigatorio.selection()
        if not selected:
            messagebox.showwarning("Aviso", "Selecione um est√°gio para registrar carga hor√°ria!")
            return
        
        item = self.tree_relatorio_obrigatorio.item(selected[0])
        estagio_id = item['values'][1]  # ID est√° na segunda coluna agora
        nome_aluno = item['values'][2]  # Nome est√° na terceira coluna agora
        
        # Criar janela modal
        form_window = ctk.CTkToplevel(self.root)
        form_window.title("‚è∞ Registrar Carga Hor√°ria")
        form_window.geometry("500x400")
        form_window.resizable(False, False)
        
        # Centralizar janela
        form_window.transient(self.root)
        form_window.grab_set()
        
        # Centralizar na tela
        form_window.update_idletasks()
        x = (form_window.winfo_screenwidth() // 2) - (500 // 2)
        y = (form_window.winfo_screenheight() // 2) - (400 // 2)
        form_window.geometry(f"500x400+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(form_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title = ctk.CTkLabel(
            main_frame,
            text="‚è∞ Registrar Carga Hor√°ria",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=self.cor_primaria
        )
        title.pack(pady=(0, 20))
        
        # Informa√ß√µes do estudante
        info_frame = ctk.CTkFrame(main_frame, fg_color=self.cor_terciaria, corner_radius=10)
        info_frame.pack(fill="x", pady=(0, 20))
        
        info_label = ctk.CTkLabel(
            info_frame,
            text=f"Estudante: {nome_aluno}",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        )
        info_label.pack(pady=15)
        
        # Campos do formul√°rio
        form_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        form_frame.pack(fill="both", expand=True)
        
        # Data do registro
        data_label = ctk.CTkLabel(
            form_frame,
            text="Data do Registro: *",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_primaria
        )
        data_label.pack(anchor="w", pady=(0, 5))
        
        data_entry = ctk.CTkEntry(
            form_frame,
            width=400,
            height=40,
            font=ctk.CTkFont(size=14),
            placeholder_text="DD/MM/AAAA"
        )
        data_entry.pack(fill="x", pady=(0, 15))
        
        # Horas registradas
        horas_label = ctk.CTkLabel(
            form_frame,
            text="Horas Registradas: *",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_primaria
        )
        horas_label.pack(anchor="w", pady=(0, 5))
        
        horas_entry = ctk.CTkEntry(
            form_frame,
            width=400,
            height=40,
            font=ctk.CTkFont(size=14),
            placeholder_text="Ex: 8"
        )
        horas_entry.pack(fill="x", pady=(0, 15))
        
        # Observa√ß√µes
        obs_label = ctk.CTkLabel(
            form_frame,
            text="Observa√ß√µes:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        )
        obs_label.pack(anchor="w", pady=(0, 5))
        
        obs_entry = ctk.CTkTextbox(
            form_frame,
            width=400,
            height=80,
            font=ctk.CTkFont(size=14)
        )
        obs_entry.pack(fill="x", pady=(0, 20))
        
        # Bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        btn_salvar = ctk.CTkButton(
            buttons_frame,
            text="üíæ Salvar",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=lambda: self.salvar_carga_horaria(form_window, estagio_id, data_entry, horas_entry, obs_entry)
        )
        btn_salvar.pack(side="left")
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#6b7280",
            hover_color="#4b5563",
            command=form_window.destroy
        )
        btn_cancelar.pack(side="right")

    def salvar_carga_horaria(self, window, estagio_id, data_entry, horas_entry, obs_entry):
        """Salvar carga hor√°ria registrada"""
        try:
            data_registro = data_entry.get().strip()
            horas_registradas = horas_entry.get().strip()
            observacoes = obs_entry.get("1.0", "end-1c").strip()
            
            if not all([data_registro, horas_registradas]):
                messagebox.showerror("Erro", "Preencha todos os campos obrigat√≥rios!")
                return
            
            # Validar horas
            try:
                horas_registradas = int(horas_registradas)
                if horas_registradas <= 0:
                    messagebox.showerror("Erro", "As horas registradas devem ser um n√∫mero positivo!")
                    return
            except ValueError:
                messagebox.showerror("Erro", "As horas registradas devem ser um n√∫mero!")
                return
            
            # Inserir registro
            data_cadastro = datetime.now().strftime("%d/%m/%Y %H:%M")
            self.cursor.execute("""
                INSERT INTO controle_ch_obrigatorio 
                (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro)
                VALUES (?, ?, ?, ?, ?)
            """, (estagio_id, data_registro, horas_registradas, observacoes, data_cadastro))
            
            self.conn.commit()
            messagebox.showinfo("Sucesso", "Carga hor√°ria registrada com sucesso!")
            window.destroy()
            self.carregar_relatorio_obrigatorio()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar carga hor√°ria: {str(e)}")

    def obter_nome_orientador_logado(self):
        """Obter nome do orientador logado"""
        try:
            self.cursor.execute("SELECT nome FROM orientadores WHERE id = ?", (self.orientador_logado_id,))
            resultado = self.cursor.fetchone()
            if resultado:
                return resultado[0]
            else:
                return "Orientador n√£o encontrado"
        except Exception as e:
            return "Erro ao obter orientador"

    def show_relatorio_estagio_nao_obrigatorio(self):
        """Mostrar relat√≥rio de est√°gio n√£o obrigat√≥rio"""
        self.clear_content()
        self.page_title.configure(text="Relat√≥rio de Est√°gio N√£o Obrigat√≥rio")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üìù Relat√≥rio de Est√°gio N√£o Obrigat√≥rio",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_primaria
        )
        title_label.pack(pady=(20, 10))
        
        # Subt√≠tulo
        subtitle_label = ctk.CTkLabel(
            main_frame,
            text="Controle e acompanhamento de est√°gios n√£o obrigat√≥rios",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_texto
        )
        subtitle_label.pack(pady=(0, 20))
        
        # Frame para controles superiores
        controls_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        controls_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        # Frame esquerdo para busca
        left_frame = ctk.CTkFrame(controls_frame, fg_color="transparent")
        left_frame.pack(side="left", fill="x", expand=True)
        
        # Campo de busca
        search_label = ctk.CTkLabel(
            left_frame,
            text="üîç Buscar:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        )
        search_label.pack(side="left", padx=(0, 10))
        
        self.search_relatorio_nao_obrigatorio_entry = ctk.CTkEntry(
            left_frame,
            placeholder_text="Digite o nome do estudante, empresa ou orientador...",
            width=400,
            height=35,
            font=ctk.CTkFont(size=12)
        )
        self.search_relatorio_nao_obrigatorio_entry.pack(side="left", padx=(0, 10))
        
        # Frame direito para bot√µes
        right_frame = ctk.CTkFrame(controls_frame, fg_color="transparent")
        right_frame.pack(side="right")
        
        btn_buscar = ctk.CTkButton(
            right_frame,
            text="üîç Localizar",
            width=120,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_primaria,
            hover_color=self.cor_secundaria,
            command=self.buscar_relatorio_nao_obrigatorio
        )
        btn_buscar.pack(side="left")
        
        # Bind Enter para busca
        self.search_relatorio_nao_obrigatorio_entry.bind('<Return>', lambda e: self.buscar_relatorio_nao_obrigatorio())
        
        # Frame para a tabela
        table_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        table_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Configurar estilo da tabela
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("Treeview",
                       background=self.cor_branco,
                       foreground=self.cor_texto,
                       fieldbackground=self.cor_branco,
                       font=('Arial', 11))
        style.configure("Treeview.Heading",
                       background=self.cor_primaria,
                       foreground=self.cor_branco,
                       font=('Arial', 12, 'bold'))
        
        # Criar Treeview
        columns = ('A√ß√£o', 'ID', 'Nome do Aluno', 'Empresa', 'Status', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7', 'R8', 'R9', 'R10', 'RF')
        self.tree_relatorio_nao_obrigatorio = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # Configurar cabe√ßalhos
        self.tree_relatorio_nao_obrigatorio.heading('A√ß√£o', text='A√ß√£o')
        self.tree_relatorio_nao_obrigatorio.heading('ID', text='ID')
        self.tree_relatorio_nao_obrigatorio.heading('Nome do Aluno', text='Nome do Aluno')
        self.tree_relatorio_nao_obrigatorio.heading('Empresa', text='Empresa')
        self.tree_relatorio_nao_obrigatorio.heading('Status', text='Status')
        self.tree_relatorio_nao_obrigatorio.heading('R1', text='R1')
        self.tree_relatorio_nao_obrigatorio.heading('R2', text='R2')
        self.tree_relatorio_nao_obrigatorio.heading('R3', text='R3')
        self.tree_relatorio_nao_obrigatorio.heading('R4', text='R4')
        self.tree_relatorio_nao_obrigatorio.heading('R5', text='R5')
        self.tree_relatorio_nao_obrigatorio.heading('R6', text='R6')
        self.tree_relatorio_nao_obrigatorio.heading('R7', text='R7')
        self.tree_relatorio_nao_obrigatorio.heading('R8', text='R8')
        self.tree_relatorio_nao_obrigatorio.heading('R9', text='R9')
        self.tree_relatorio_nao_obrigatorio.heading('R10', text='R10')
        self.tree_relatorio_nao_obrigatorio.heading('RF', text='RF')
        
        # Configurar larguras das colunas
        self.tree_relatorio_nao_obrigatorio.column('A√ß√£o', width=50, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('ID', width=50, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('Nome do Aluno', width=200, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('Empresa', width=200, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('Status', width=120, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('R1', width=40, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('R2', width=40, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('R3', width=40, anchor='center')
        self.tree_relatorio_nao_obrigatorio.column('RF', width=40, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree_relatorio_nao_obrigatorio.yview)
        self.tree_relatorio_nao_obrigatorio.configure(yscrollcommand=scrollbar.set)
        
        # Posicionar tabela e scrollbar
        self.tree_relatorio_nao_obrigatorio.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind evento de clique duplo
        self.tree_relatorio_nao_obrigatorio.bind("<Double-1>", self.on_double_click_relatorio_nao_obrigatorio)
        
        # Bind evento de clique simples
        self.tree_relatorio_nao_obrigatorio.bind("<Button-1>", self.on_single_click_relatorio_nao_obrigatorio)
        
        # Carregar dados iniciais
        self.carregar_relatorio_nao_obrigatorio()

    def carregar_relatorio_nao_obrigatorio(self):
        """Carregar dados do relat√≥rio n√£o obrigat√≥rio"""
        # Limpar tabela
        for item in self.tree_relatorio_nao_obrigatorio.get_children():
            self.tree_relatorio_nao_obrigatorio.delete(item)
        
        # Buscar est√°gios n√£o obrigat√≥rios
        self.cursor.execute("""
            SELECT 
                eno.id,
                est.nome,
                emp.nome,
                eno.status
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            ORDER BY eno.data_inicio DESC
        """)
        relatorios = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for relatorio in relatorios:
            estagio_id = relatorio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Determinar checkboxes dos relat√≥rios
            r1 = "‚úÖ" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r2 = "‚úÖ" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r3 = "‚úÖ" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r4 = "‚úÖ" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r5 = "‚úÖ" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r6 = "‚úÖ" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r7 = "‚úÖ" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r8 = "‚úÖ" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r9 = "‚úÖ" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r10 = "‚úÖ" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            rf = "‚úÖ" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå"
            
            status = relatorio[3]
            if status == "Conclu√≠do":
                status = "‚úÖ Conclu√≠do"
            else:
                status = "üîÑ Em Andamento"
            
            self.tree_relatorio_nao_obrigatorio.insert('', 'end', values=(
                'üîç', relatorio[0], relatorio[1], relatorio[2], 
                status, r1, r2, r3, rf
            ))

    def buscar_relatorio_nao_obrigatorio(self):
        """Buscar relat√≥rios n√£o obrigat√≥rios"""
        termo = self.search_relatorio_nao_obrigatorio_entry.get().strip()
        
        if not termo:
            self.carregar_relatorio_nao_obrigatorio()
            return
        
        # Limpar tabela
        for item in self.tree_relatorio_nao_obrigatorio.get_children():
            self.tree_relatorio_nao_obrigatorio.delete(item)
        
        # Buscar no banco
        self.cursor.execute("""
            SELECT 
                eno.id,
                est.nome,
                emp.nome,
                eno.status
            FROM estagio_nao_obrigatorio eno
            JOIN estudantes est ON eno.estudante_id = est.id
            JOIN orientadores ori ON eno.orientador_id = ori.id
            JOIN empresas emp ON eno.empresa_id = emp.id
            WHERE est.nome LIKE ? OR ori.nome LIKE ? OR emp.nome LIKE ?
            ORDER BY eno.data_inicio DESC
        """, (f'%{termo}%', f'%{termo}%', f'%{termo}%'))
        
        relatorios = self.cursor.fetchall()
        
        # Inserir resultados na tabela
        for relatorio in relatorios:
            estagio_id = relatorio[0]
            
            # Verificar quais relat√≥rios foram anexados
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Determinar checkboxes dos relat√≥rios
            r1 = "‚úÖ" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r2 = "‚úÖ" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r3 = "‚úÖ" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r4 = "‚úÖ" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r5 = "‚úÖ" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r6 = "‚úÖ" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r7 = "‚úÖ" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r8 = "‚úÖ" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r9 = "‚úÖ" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            r10 = "‚úÖ" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå"
            rf = "‚úÖ" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå"
            
            status = relatorio[3]
            if status == "Conclu√≠do":
                status = "‚úÖ Conclu√≠do"
            else:
                status = "üîÑ Em Andamento"
            
            self.tree_relatorio_nao_obrigatorio.insert('', 'end', values=(
                'üîç', relatorio[0], relatorio[1], relatorio[2], 
                status, r1, r2, r3, rf
            ))

    def on_double_click_relatorio_nao_obrigatorio(self, event):
        """Evento de clique duplo na tabela de relat√≥rio n√£o obrigat√≥rio"""
        selected = self.tree_relatorio_nao_obrigatorio.selection()
        if not selected:
            return
            
        item = self.tree_relatorio_nao_obrigatorio.item(selected[0])
        column = self.tree_relatorio_nao_obrigatorio.identify_column(event.x)
        
        # Verificar se clicou na coluna de a√ß√£o (coluna 1)
        if column == '#1':  # Coluna de a√ß√£o
            estagio_id = item['values'][1]  # ID est√° na segunda coluna
            self.abrir_janela_detalhes_centralizada(estagio_id)
        else:
            # Clique duplo em qualquer outra coluna tamb√©m abre os detalhes
            estagio_id = item['values'][1]
            self.abrir_janela_detalhes_centralizada(estagio_id)

    def on_single_click_relatorio_nao_obrigatorio(self, event):
        """Evento de clique simples na tabela de relat√≥rio n√£o obrigat√≥rio"""
        selected = self.tree_relatorio_nao_obrigatorio.selection()
        if not selected:
            return
            
        item = self.tree_relatorio_nao_obrigatorio.item(selected[0])
        column = self.tree_relatorio_nao_obrigatorio.identify_column(event.x)
        
        # Verificar se clicou na coluna de a√ß√£o (coluna 1)
        if column == '#1':  # Coluna de a√ß√£o
            estagio_id = item['values'][1]  # ID est√° na segunda coluna
            self.abrir_janela_detalhes_centralizada(estagio_id)

    def abrir_janela_detalhes_centralizada(self, estagio_id):
        """Abrir janela centralizada com detalhes do est√°gio n√£o obrigat√≥rio"""
        try:
            # Buscar dados completos do est√°gio
            self.cursor.execute("""
                SELECT 
                    eno.id, 
                    est.nome as nome_estudante,
                    est.cpf,
                    est.email,
                    est.telefone,
                    ori.nome as nome_orientador,
                    ori.email_institucional as email_orientador,
                    emp.nome as nome_empresa,
                    emp.endereco as endereco_empresa,
                    emp.telefone as telefone_empresa,
                    eno.data_inicio,
                    eno.data_termino,
                    eno.nome_supervisor,
                    eno.registro_crc,
                    eno.carga_horaria,
                    eno.status
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes est ON eno.estudante_id = est.id
                JOIN orientadores ori ON eno.orientador_id = ori.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                WHERE eno.id = ?
            """, (estagio_id,))
            
            estagio_data = self.cursor.fetchone()
            
            if not estagio_data:
                messagebox.showerror("Erro", "Est√°gio n√£o encontrado!")
                return
            
            # Criar janela modal centralizada
            detalhes_window = ctk.CTkToplevel(self.root)
            detalhes_window.title(f"üìã Detalhes do Est√°gio - ID: {estagio_id}")
            detalhes_window.geometry("800x700")
            detalhes_window.resizable(True, True)
            
            # Centralizar janela
            detalhes_window.transient(self.root)
            detalhes_window.grab_set()
            
            # Centralizar na tela
            detalhes_window.update_idletasks()
            width = detalhes_window.winfo_width()
            height = detalhes_window.winfo_height()
            x = (detalhes_window.winfo_screenwidth() // 2) - (width // 2)
            y = (detalhes_window.winfo_screenheight() // 2) - (height // 2)
            detalhes_window.geometry(f"{width}x{height}+{x}+{y}")
            
            # Frame principal com scroll
            main_frame = ctk.CTkScrollableFrame(detalhes_window, fg_color=self.cor_branco)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo principal
            titulo_frame = ctk.CTkFrame(main_frame, fg_color="#E8F5E8", corner_radius=10)
            titulo_frame.pack(fill="x", pady=(0, 20))
            
            ctk.CTkLabel(
                titulo_frame,
                text="üìã DETALHES DO EST√ÅGIO N√ÉO OBRIGAT√ìRIO",
                font=ctk.CTkFont(size=24, weight="bold"),
                text_color="#2E7D32"
            ).pack(pady=20)
            
            # Se√ß√£o 1: Dados do Estudante
            self.criar_secao_detalhes(main_frame, "üë§ DADOS DO ESTUDANTE", [
                ("Nome:", estagio_data[1]),
                ("CPF:", estagio_data[2]),
                ("Email:", estagio_data[3]),
                ("Telefone:", estagio_data[4])
            ], "#E3F2FD", "#1976D2")
            
            # Se√ß√£o 2: Dados do Orientador
            self.criar_secao_detalhes(main_frame, "üéì ORIENTADOR", [
                ("Nome:", estagio_data[5]),
                ("Email:", estagio_data[6])
            ], "#FFF3E0", "#F57C00")
            
            # Se√ß√£o 3: Dados da Empresa
            self.criar_secao_detalhes(main_frame, "üè¢ EMPRESA", [
                ("Nome:", estagio_data[7]),
                ("Endere√ßo:", estagio_data[8]),
                ("Telefone:", estagio_data[9]),
                ("Supervisor:", estagio_data[12]),
                ("CRC:", estagio_data[13])
            ], "#F3E5F5", "#7B1FA2")
            
            # Se√ß√£o 4: Dados do Est√°gio
            status_color = "‚úÖ Conclu√≠do" if estagio_data[15] == "Conclu√≠do" else "üîÑ Em Andamento"
            
            # Buscar CH Parcial (horas cumpridas)
            self.cursor.execute("""
                SELECT COALESCE(SUM(horas_registradas), 0) as horas_cumpridas
                FROM controle_ch_nao_obrigatorio 
                WHERE estagio_id = ?
            """, (estagio_id,))
            ch_parcial_result = self.cursor.fetchone()
            ch_parcial = ch_parcial_result[0] if ch_parcial_result else 0
            
            self.criar_secao_detalhes(main_frame, "üìä INFORMA√á√ïES DO EST√ÅGIO", [
                ("ID:", str(estagio_data[0])),
                ("Data In√≠cio:", estagio_data[10]),
                ("Data T√©rmino:", estagio_data[11]),
                ("Carga Hor√°ria:", f"{estagio_data[14]} horas"),
                ("CH Parcial:", f"{ch_parcial} horas"),
                ("Status:", status_color)
            ], "#E8F5E8", "#2E7D32")
            
            # Se√ß√£o 5: Status dos Relat√≥rios
            self.cursor.execute("""
                SELECT tipo_relatorio FROM relatorios_anexados 
                WHERE estagio_id = ? AND tipo_relatorio LIKE '%N√£o Obrigat√≥rio%'
            """, (estagio_id,))
            relatorios_anexados = [r[0] for r in self.cursor.fetchall()]
            
            # Status para todos os 10 relat√≥rios parciais
            r1_status = "‚úÖ Anexado" if any("1¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r2_status = "‚úÖ Anexado" if any("2¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r3_status = "‚úÖ Anexado" if any("3¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r4_status = "‚úÖ Anexado" if any("4¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r5_status = "‚úÖ Anexado" if any("5¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r6_status = "‚úÖ Anexado" if any("6¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r7_status = "‚úÖ Anexado" if any("7¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r8_status = "‚úÖ Anexado" if any("8¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r9_status = "‚úÖ Anexado" if any("9¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            r10_status = "‚úÖ Anexado" if any("10¬∫ Relat√≥rio Parcial" in r for r in relatorios_anexados) else "‚ùå Pendente"
            rf_status = "‚úÖ Anexado" if any("Relat√≥rio Final" in r for r in relatorios_anexados) else "‚ùå Pendente"
            
            self.criar_secao_detalhes(main_frame, "üìÑ STATUS DOS RELAT√ìRIOS", [
                ("1¬∫ Relat√≥rio Parcial:", r1_status),
                ("2¬∫ Relat√≥rio Parcial:", r2_status),
                ("3¬∫ Relat√≥rio Parcial:", r3_status),
                ("4¬∫ Relat√≥rio Parcial:", r4_status),
                ("5¬∫ Relat√≥rio Parcial:", r5_status),
                ("6¬∫ Relat√≥rio Parcial:", r6_status),
                ("7¬∫ Relat√≥rio Parcial:", r7_status),
                ("8¬∫ Relat√≥rio Parcial:", r8_status),
                ("9¬∫ Relat√≥rio Parcial:", r9_status),
                ("10¬∫ Relat√≥rio Parcial:", r10_status),
                ("Relat√≥rio Final:", rf_status)
            ], "#FFEBEE", "#C62828")
            
            # Se√ß√£o 6: Anexar Relat√≥rios
            self.criar_secao_anexar_relatorios_nao_obrigatorio(main_frame, estagio_id, estagio_data[1])
            
            # Se√ß√£o 7: Controle de Carga Hor√°ria
            self.criar_secao_controle_ch_nao_obrigatorio(main_frame, estagio_id)
            
            # Bot√µes de a√ß√£o
            botoes_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            botoes_frame.pack(fill="x", pady=(20, 0))
            
            ctk.CTkButton(
                botoes_frame,
                text="‚úèÔ∏è Editar Est√°gio",
                width=150,
                height=40,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#1976D2",
                hover_color="#1565C0",
                command=lambda: self.editar_estagio_desde_detalhes(estagio_id, detalhes_window)
            ).pack(side="left", padx=(0, 10))
            
            ctk.CTkButton(
                botoes_frame,
                text="üìÑ Gerenciar Relat√≥rios",
                width=150,
                height=40,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#2E7D32",
                hover_color="#1B5E20",
                command=lambda: self.gerenciar_relatorios_desde_detalhes(estagio_id, detalhes_window)
            ).pack(side="left", padx=(0, 10))
            
            ctk.CTkButton(
                botoes_frame,
                text="‚ùå Fechar",
                width=100,
                height=40,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#757575",
                hover_color="#616161",
                command=detalhes_window.destroy
            ).pack(side="right")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir detalhes: {str(e)}")

    def criar_secao_detalhes(self, parent, titulo, dados, bg_color, title_color):
        """Criar se√ß√£o de detalhes com t√≠tulo e dados"""
        secao_frame = ctk.CTkFrame(parent, fg_color=bg_color, corner_radius=10)
        secao_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        ctk.CTkLabel(
            secao_frame,
            text=titulo,
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=title_color
        ).pack(pady=(15, 10))
        
        # Dados da se√ß√£o
        for label, valor in dados:
            linha_frame = ctk.CTkFrame(secao_frame, fg_color="transparent")
            linha_frame.pack(fill="x", padx=20, pady=2)
            
            ctk.CTkLabel(
                linha_frame,
                text=label,
                font=ctk.CTkFont(size=12, weight="bold"),
                text_color="#424242"
            ).pack(side="left")
            
            ctk.CTkLabel(
                linha_frame,
                text=str(valor),
                font=ctk.CTkFont(size=12),
                text_color="#666666"
            ).pack(side="left", padx=(10, 0))
        
        # Espa√ßo no final da se√ß√£o
        ctk.CTkLabel(secao_frame, text="", height=10).pack()

    def editar_estagio_desde_detalhes(self, estagio_id, parent_window):
        """Editar est√°gio a partir da janela de detalhes"""
        parent_window.destroy()
        # Aqui voc√™ pode implementar a l√≥gica para editar o est√°gio
        # Por exemplo, chamar a fun√ß√£o de edi√ß√£o existente
        messagebox.showinfo("Info", f"Funcionalidade de edi√ß√£o para est√°gio ID: {estagio_id}")

    def gerenciar_relatorios_desde_detalhes(self, estagio_id, parent_window):
        """Gerenciar relat√≥rios a partir da janela de detalhes"""
        parent_window.destroy()
        # Aqui voc√™ pode implementar a l√≥gica para gerenciar relat√≥rios
        messagebox.showinfo("Info", f"Funcionalidade de relat√≥rios para est√°gio ID: {estagio_id}")

    def criar_secao_anexar_relatorios_nao_obrigatorio(self, parent, estagio_id, nome_estudante):
        """Criar se√ß√£o para anexar relat√≥rios no est√°gio n√£o obrigat√≥rio"""
        # Frame da se√ß√£o
        secao_frame = ctk.CTkFrame(parent, fg_color="#E8F5E8", corner_radius=10)
        secao_frame.pack(fill="x", pady=(0, 15))
        
        # T√≠tulo da se√ß√£o
        ctk.CTkLabel(
            secao_frame,
            text="üìé ANEXAR RELAT√ìRIOS",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 10))
        
        # Container dos controles
        controles_frame = ctk.CTkFrame(secao_frame, fg_color="transparent")
        controles_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        # Linha 1: Sele√ß√£o do tipo de relat√≥rio
        tipo_frame = ctk.CTkFrame(controles_frame, fg_color="transparent")
        tipo_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(
            tipo_frame,
            text="Tipo de Relat√≥rio:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="#424242"
        ).pack(side="left")
        
        # Combo para tipo de relat√≥rio
        self.relatorio_combo_nao_obrigatorio = ctk.CTkComboBox(
            tipo_frame,
            values=[
                "1¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "2¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "3¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "4¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "5¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "6¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "7¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "8¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "9¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "10¬∫ Relat√≥rio Parcial - N√£o Obrigat√≥rio",
                "Relat√≥rio Final - N√£o Obrigat√≥rio"
            ],
            width=300,
            height=35
        )
        self.relatorio_combo_nao_obrigatorio.pack(side="right")
        
        # Linha 2: Sele√ß√£o do arquivo
        arquivo_frame = ctk.CTkFrame(controles_frame, fg_color="transparent")
        arquivo_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkLabel(
            arquivo_frame,
            text="Arquivo:",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="#424242"
        ).pack(side="left")
        
        # Bot√£o para selecionar arquivo
        ctk.CTkButton(
            arquivo_frame,
            text="üìÅ Selecionar Arquivo",
            width=150,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#1976D2",
            hover_color="#1565C0",
            command=self.selecionar_arquivo_relatorio_nao_obrigatorio
        ).pack(side="right")
        
        # Label para mostrar arquivo selecionado
        self.arquivo_selecionado_label_nao_obrigatorio = ctk.CTkLabel(
            controles_frame,
            text="üìÑ Nenhum arquivo selecionado",
            font=ctk.CTkFont(size=11),
            text_color="#666666"
        )
        self.arquivo_selecionado_label_nao_obrigatorio.pack(pady=(0, 10))
        
        # Linha 3: Bot√£o de salvar
        salvar_frame = ctk.CTkFrame(controles_frame, fg_color="transparent")
        salvar_frame.pack(fill="x")
        
        ctk.CTkButton(
            salvar_frame,
            text="üíæ Salvar Relat√≥rio",
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#2E7D32",
            hover_color="#1B5E20",
            command=lambda: self.salvar_relatorio_detalhes_nao_obrigatorio(estagio_id)
        ).pack()
        
        # Informa√ß√£o adicional
        info_frame = ctk.CTkFrame(secao_frame, fg_color="#F0F8FF", corner_radius=8)
        info_frame.pack(fill="x", padx=20, pady=(0, 15))
        
        ctk.CTkLabel(
            info_frame,
            text=f"üí° Os relat√≥rios ser√£o salvos em: Relat√≥rios/N√£o Obrigat√≥rio/{nome_estudante.replace(' ', '_')}",
            font=ctk.CTkFont(size=10),
            text_color="#666666",
            wraplength=600
        ).pack(pady=8)

    def selecionar_arquivo_relatorio_nao_obrigatorio(self):
        """Selecionar arquivo para relat√≥rio n√£o obrigat√≥rio"""
        from tkinter import filedialog
        
        arquivo = filedialog.askopenfilename(
            title="Selecionar Relat√≥rio - Est√°gio N√£o Obrigat√≥rio",
            filetypes=[
                ("Arquivos PDF", "*.pdf"),
                ("Documentos Word", "*.docx *.doc"),
                ("Todos os arquivos", "*.*")
            ]
        )
        
        if arquivo:
            import os
            nome_arquivo = os.path.basename(arquivo)
            self.arquivo_selecionado_label_nao_obrigatorio.configure(
                text=f"üìé Arquivo selecionado: {nome_arquivo}"
            )
            self.arquivo_selecionado_nao_obrigatorio = arquivo
        else:
            self.arquivo_selecionado_nao_obrigatorio = None
            self.arquivo_selecionado_label_nao_obrigatorio.configure(
                text="üìÑ Nenhum arquivo selecionado"
            )

    def show_central_alertas_inteligente(self):
        """Central de Alertas WhatsApp - Sistema Completo"""
        self.clear_content()
        self.page_title.configure(text="üì± Central de Alertas WhatsApp")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # === HEADER ===
        header_frame = ctk.CTkFrame(main_frame, fg_color="#E8F5E8", corner_radius=15)
        header_frame.pack(fill="x", pady=(20, 30))
        
        ctk.CTkLabel(
            header_frame,
            text="üì± CENTRAL DE ALERTAS WHATSAPP",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=20)
        
        # === STATUS E CONFIGURA√á√ÉO ===
        status_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=12)
        status_frame.pack(fill="x", pady=(0, 20))
        
        # Verificar status do WhatsApp
        try:
            from central_alertas_inteligente import CentralAlertasInteligente
            self.central_whatsapp = CentralAlertasInteligente()
            whatsapp_ativo = self.central_whatsapp.whatsapp_config.get('ativo', False)
        except ImportError:
            whatsapp_ativo = False
            self.central_whatsapp = None
        
        status_text = "‚úÖ WhatsApp Configurado e Ativo" if whatsapp_ativo else "‚ùå WhatsApp N√£o Configurado"
        status_color = "#2E7D32" if whatsapp_ativo else "#D32F2F"
        
        ctk.CTkLabel(
            status_frame,
            text=status_text,
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=status_color
        ).pack(pady=15)
        
        if not whatsapp_ativo:
            ctk.CTkLabel(
                status_frame,
                text="üí° Execute 'python configurar_whatsapp.py' para configurar",
                font=ctk.CTkFont(size=14),
                text_color="#666666"
            ).pack(pady=(0, 15))
        
        # === TIPOS DE ALERTA ===
        tipos_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=12)
        tipos_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            tipos_frame,
            text="üìã Tipos de Alerta Dispon√≠veis",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 10))
        
        # Grid de tipos de alerta
        tipos_grid = ctk.CTkFrame(tipos_frame, fg_color="transparent")
        tipos_grid.pack(fill="x", padx=20, pady=(0, 15))
        
        tipos_info = [
            ("üî•", "Vencimento Cr√≠tico", "‚â§ 3 dias", "#D32F2F"),
            ("‚ö†Ô∏è", "Vencimento Urgente", "‚â§ 7 dias", "#FF9800"),
            ("üìÖ", "Vencimento Pr√≥ximo", "‚â§ 30 dias", "#1976D2"),
            ("üìÑ", "Documento Pendente", "Docs n√£o entregues", "#7B1FA2"),
            ("‚≠ê", "Avalia√ß√£o Pendente", "Avalia√ß√µes n√£o feitas", "#388E3C"),
            ("üìä", "Frequ√™ncia Baixa", "Frequ√™ncia insuficiente", "#F57C00"),
            ("üìù", "Relat√≥rio Atrasado", "Relat√≥rios em atraso", "#5D4037")
        ]
        
        for i, (emoji, nome, desc, cor) in enumerate(tipos_info):
            row = i // 2
            col = i % 2
            
            tipo_frame = ctk.CTkFrame(tipos_grid, fg_color="#FFFFFF", corner_radius=8)
            tipo_frame.grid(row=row, column=col, padx=10, pady=5, sticky="ew")
            tipos_grid.grid_columnconfigure(col, weight=1)
            
            ctk.CTkLabel(
                tipo_frame,
                text=f"{emoji} {nome}",
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=cor
            ).pack(pady=(10, 5))
            
            ctk.CTkLabel(
                tipo_frame,
                text=desc,
                font=ctk.CTkFont(size=12),
                text_color="#666666"
            ).pack(pady=(0, 10))
        
        # === OP√á√ïES DE ENVIO ===
        opcoes_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=12)
        opcoes_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            opcoes_frame,
            text="üéØ Op√ß√µes de Envio",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 10))
        
        opcoes_grid = ctk.CTkFrame(opcoes_frame, fg_color="transparent")
        opcoes_grid.pack(fill="x", padx=20, pady=(0, 15))
        
        # Aluno
        aluno_frame = ctk.CTkFrame(opcoes_grid, fg_color="#E3F2FD", corner_radius=8)
        aluno_frame.grid(row=0, column=0, padx=10, pady=5, sticky="ew")
        opcoes_grid.grid_columnconfigure(0, weight=1)
        
        ctk.CTkLabel(
            aluno_frame,
            text="üë®‚Äçüéì PARA ALUNOS",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            aluno_frame,
            text="‚Ä¢ Lembretes de vencimento\n‚Ä¢ Orienta√ß√µes sobre documentos\n‚Ä¢ Alertas de prazos\n‚Ä¢ Instru√ß√µes espec√≠ficas",
            font=ctk.CTkFont(size=12),
            text_color="#333333",
            justify="left"
        ).pack(pady=(0, 15))
        
        # Orientador
        orientador_frame = ctk.CTkFrame(opcoes_grid, fg_color="#E8F5E8", corner_radius=8)
        orientador_frame.grid(row=0, column=1, padx=10, pady=5, sticky="ew")
        opcoes_grid.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(
            orientador_frame,
            text="üë©‚Äçüè´ PARA ORIENTADORES",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            orientador_frame,
            text="‚Ä¢ Relat√≥rios de orientandos\n‚Ä¢ Alertas de situa√ß√µes cr√≠ticas\n‚Ä¢ Informa√ß√µes para acompanhamento\n‚Ä¢ Dados de contato dos alunos",
            font=ctk.CTkFont(size=12),
            text_color="#333333",
            justify="left"
        ).pack(pady=(0, 15))
        
        # === BOT√ïES DE A√á√ÉO ===
        botoes_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        botoes_frame.pack(fill="x", pady=(0, 20))
        
        # Bot√£o Processar Alertas
        btn_processar = ctk.CTkButton(
            botoes_frame,
            text="üöÄ Processar e Enviar Alertas",
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#2E7D32",
            hover_color="#1B5E20",
            height=50,
            command=self.processar_alertas_whatsapp
        )
        btn_processar.pack(side="left", padx=(0, 10), fill="x", expand=True)
        
        # Bot√£o Teste
        btn_teste = ctk.CTkButton(
            botoes_frame,
            text="üß™ Testar Envio",
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#1976D2",
            hover_color="#1565C0",
            height=50,
            command=self.testar_whatsapp
        )
        btn_teste.pack(side="left", padx=10, fill="x", expand=True)
        
        # Bot√£o Configurar
        btn_config = ctk.CTkButton(
            botoes_frame,
            text="‚öôÔ∏è Configurar WhatsApp",
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#FF9800",
            hover_color="#F57C00",
            height=50,
            command=self.configurar_whatsapp
        )
        btn_config.pack(side="right", padx=(10, 0), fill="x", expand=True)
        
    def show_central_alertas(self):
        """Mostrar tela de Central de Alertas"""
        self.clear_content()
        self.page_title.configure(text="üîî Central de Alertas")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=15)
        header_frame.pack(fill="x", pady=(20, 30))
        
        ctk.CTkLabel(
            header_frame,
            text="üîî CENTRAL DE ALERTAS",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=self.cor_azul
        ).pack(pady=20)
        
        # Frame de funcionalidades
        features_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        features_frame.pack(fill="both", expand=True, pady=20)
        
        # Bot√µes principais
        buttons_frame = ctk.CTkFrame(features_frame, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=20)
        
        # Bot√£o para alertas de vencimento
        btn_vencimento = ctk.CTkButton(
            buttons_frame,
            text="‚è∞ Alertas de Vencimento",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=60,
            corner_radius=15,
            fg_color=self.cor_vermelho,
            hover_color="#B71C1C",
            text_color=self.cor_branco,
            command=self.show_alertas_vencimento
        )
        btn_vencimento.pack(fill="x", pady=10)
        
        # Bot√£o para notifica√ß√µes por email
        btn_email = ctk.CTkButton(
            buttons_frame,
            text="üìß Notifica√ß√µes por Email",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=60,
            corner_radius=15,
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            text_color=self.cor_branco,
            command=self.show_notificacoes_email
        )
        btn_email.pack(fill="x", pady=10)
        
        # Bot√£o para relat√≥rio de alertas
        btn_relatorio = ctk.CTkButton(
            buttons_frame,
            text="üìä Relat√≥rio de Alertas",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=60,
            corner_radius=15,
            fg_color=self.cor_verde,
            hover_color="#166534",
            text_color=self.cor_branco,
            command=self.show_relatorio_alertas
        )
        btn_relatorio.pack(fill="x", pady=10)
        
        # Frame de informa√ß√µes
        info_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=12)
        info_frame.pack(fill="x", pady=20)
        
        info_text = """
‚ÑπÔ∏è Central de Alertas - Funcionalidades:

‚Ä¢ ‚è∞ Alertas de Vencimento: Monitora est√°gios pr√≥ximos do vencimento
‚Ä¢ üìß Notifica√ß√µes por Email: Envia alertas autom√°ticos por email
‚Ä¢ üìä Relat√≥rio de Alertas: Visualiza hist√≥rico e estat√≠sticas de alertas
‚Ä¢ üîî Sistema Inteligente: An√°lise autom√°tica de situa√ß√µes cr√≠ticas
        """
        
        ctk.CTkLabel(
            info_frame,
            text=info_text,
            font=ctk.CTkFont(size=12),
            text_color=self.cor_cinza,
            justify="left"
        ).pack(pady=20, padx=20)
        
        # === FILTROS DE ALERTAS ===
        filtros_frame = ctk.CTkFrame(main_frame, fg_color="#F0F0F0", corner_radius=12)
        filtros_frame.pack(fill="x", pady=20)
        
        ctk.CTkLabel(
            filtros_frame,
            text="üîç Filtros de Alertas",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_azul
        ).pack(pady=(15, 10))
        
        filtros_content = ctk.CTkFrame(filtros_frame, fg_color="transparent")
        filtros_content.pack(fill="x", padx=20, pady=(0, 15))
        
        # Filtro por prioridade
        ctk.CTkLabel(
            filtros_content,
            text="Prioridade:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.filtro_prioridade = ctk.CTkComboBox(
            filtros_content,
            values=["Todas", "CRITICA", "ALTA", "PREVENTIVO", "INFORMATIVO"],
            width=150,
            height=35,
            command=self.filtrar_alertas
        )
        self.filtro_prioridade.pack(side="left", padx=(0, 20))
        self.filtro_prioridade.set("Todas")
        
        # Filtro por status
        ctk.CTkLabel(
            filtros_content,
            text="Status:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.filtro_status = ctk.CTkComboBox(
            filtros_content,
            values=["Todos", "PENDENTE", "ATIVO", "RESOLVIDO"],
            width=150,
            height=35,
            command=self.filtrar_alertas
        )
        self.filtro_status.pack(side="left", padx=(0, 20))
        self.filtro_status.set("Todos")
        
        # Filtro por tipo
        ctk.CTkLabel(
            filtros_content,
            text="Tipo:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.filtro_tipo = ctk.CTkComboBox(
            filtros_content,
            values=["Todos", "VENCIMENTO", "DOCUMENTO", "AVALIACAO", "FREQUENCIA"],
            width=150,
            height=35,
            command=self.filtrar_alertas
        )
        self.filtro_tipo.pack(side="left", padx=(0, 20))
        self.filtro_tipo.set("Todos")
        
        # === √ÅREA DE ALERTAS ===
        self.alertas_frame = ctk.CTkScrollableFrame(
            main_frame,
            fg_color=self.cor_branco,
            corner_radius=10,
            height=300
        )
        self.alertas_frame.pack(fill="both", expand=True, pady=20)
        
        # Carregar alertas iniciais
        self.carregar_alertas()
    
    def show_alertas_vencimento(self):
        """Mostrar alertas de vencimento de est√°gios"""
        self.clear_content()
        self.page_title.configure(text="‚è∞ Alertas de Vencimento")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="‚è∞ Alertas de Vencimento de Est√°gios",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_vermelho
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_central_alertas
        )
        btn_voltar.pack(side="right")
        
        # Frame de filtros
        filter_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        filter_frame.pack(fill="x", pady=20)
        
        # Filtro por dias
        ctk.CTkLabel(
            filter_frame,
            text="Alertas para est√°gios vencendo em:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.dias_vencimento = ctk.CTkComboBox(
            filter_frame,
            values=["7 dias", "15 dias", "30 dias", "60 dias"],
            width=120,
            height=35,
            command=self.atualizar_alertas_vencimento
        )
        self.dias_vencimento.set("30 dias")
        self.dias_vencimento.pack(side="left", padx=(0, 20))
        
        # Bot√£o atualizar
        btn_atualizar = ctk.CTkButton(
            filter_frame,
            text="üîÑ Atualizar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            command=self.atualizar_alertas_vencimento
        )
        btn_atualizar.pack(side="left")
        
        # Tabela de alertas
        self.create_alertas_vencimento_table(main_frame)
        
        # Carregar dados iniciais
        self.atualizar_alertas_vencimento()
    
    def show_notificacoes_email(self):
        """Mostrar configura√ß√µes de notifica√ß√µes por email"""
        self.clear_content()
        self.page_title.configure(text="üìß Notifica√ß√µes por Email")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìß Configura√ß√µes de Notifica√ß√µes por Email",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_azul
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_central_alertas
        )
        btn_voltar.pack(side="right")
        
        # Frame de configura√ß√µes
        config_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=12)
        config_frame.pack(fill="x", pady=20)
        
        # Configura√ß√µes de email
        ctk.CTkLabel(
            config_frame,
            text="‚öôÔ∏è Configura√ß√µes de Email",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_azul
        ).pack(pady=(20, 15))
        
        # Servidor SMTP
        smtp_frame = ctk.CTkFrame(config_frame, fg_color="transparent")
        smtp_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(
            smtp_frame,
            text="Servidor SMTP:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.smtp_entry = ctk.CTkEntry(
            smtp_frame,
            placeholder_text="smtp.gmail.com",
            width=200,
            height=35
        )
        self.smtp_entry.pack(side="left", padx=(0, 20))
        
        # Porta
        ctk.CTkLabel(
            smtp_frame,
            text="Porta:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.porta_entry = ctk.CTkEntry(
            smtp_frame,
            placeholder_text="587",
            width=80,
            height=35
        )
        self.porta_entry.pack(side="left", padx=(0, 20))
        
        # Email e senha
        email_frame = ctk.CTkFrame(config_frame, fg_color="transparent")
        email_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(
            email_frame,
            text="Email:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.email_entry = ctk.CTkEntry(
            email_frame,
            placeholder_text="seu.email@gmail.com",
            width=250,
            height=35
        )
        self.email_entry.pack(side="left", padx=(0, 20))
        
        ctk.CTkLabel(
            email_frame,
            text="Senha:",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=self.cor_texto
        ).pack(side="left", padx=(0, 10))
        
        self.senha_entry = ctk.CTkEntry(
            email_frame,
            placeholder_text="Sua senha",
            width=150,
            height=35,
            show="*"
        )
        self.senha_entry.pack(side="left")
        
        # Bot√µes de a√ß√£o
        action_frame = ctk.CTkFrame(config_frame, fg_color="transparent")
        action_frame.pack(fill="x", padx=20, pady=20)
        
        btn_salvar = ctk.CTkButton(
            action_frame,
            text="üíæ Salvar Configura√ß√µes",
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_verde,
            hover_color="#166534",
            command=self.salvar_config_email
        )
        btn_salvar.pack(side="left", padx=(0, 10))
        
        btn_testar = ctk.CTkButton(
            action_frame,
            text="üß™ Testar Email",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            command=self.testar_config_email
        )
        btn_testar.pack(side="left")
        
        # Carregar configura√ß√µes existentes
        self.carregar_config_email()
    
    def show_relatorio_alertas(self):
        """Mostrar relat√≥rio de alertas"""
        self.clear_content()
        self.page_title.configure(text="üìä Relat√≥rio de Alertas")
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Header
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(20, 10))
        
        # T√≠tulo
        title = ctk.CTkLabel(
            header_frame,
            text="üìä Relat√≥rio de Alertas",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=self.cor_verde
        )
        title.pack(side="left")
        
        # Bot√£o Voltar
        btn_voltar = ctk.CTkButton(
            header_frame,
            text="‚Üê Voltar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#757575",
            hover_color="#616161",
            command=self.show_central_alertas
        )
        btn_voltar.pack(side="right")
        
        # Frame de estat√≠sticas
        stats_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        stats_frame.pack(fill="x", pady=20)
        
        # Obter estat√≠sticas
        stats = self.obter_estatisticas_alertas()
        
        # Cards de estat√≠sticas
        self.create_stats_alertas_cards(stats_frame, stats)
        
        # Tabela de hist√≥rico
        self.create_historico_alertas_table(main_frame)
        
        # Carregar dados
        self.carregar_historico_alertas()
    
    def create_alertas_vencimento_table(self, parent):
        """Criar tabela de alertas de vencimento"""
        # Frame da tabela
        table_frame = ctk.CTkFrame(parent, fg_color=self.cor_branco)
        table_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo da tabela
        table_title = ctk.CTkLabel(
            table_frame,
            text="üìã Alertas de Vencimento",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_vermelho
        )
        table_title.pack(pady=(20, 10))
        
        # Criar Treeview
        columns = ("Estudante", "Empresa", "Orientador", "Tipo", "Status", "Vencimento", "Dias Restantes", "A√ß√µes")
        self.alertas_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # Configurar colunas
        for col in columns:
            self.alertas_tree.heading(col, text=col)
            if col == "A√ß√µes":
                self.alertas_tree.column(col, width=200, anchor="center")
            else:
                self.alertas_tree.column(col, width=150, anchor="center")
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.alertas_tree.yview)
        self.alertas_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack
        self.alertas_tree.pack(side="left", fill="both", expand=True, padx=(20, 0), pady=20)
        scrollbar.pack(side="right", fill="y", padx=(0, 20), pady=20)
        
        # Bind duplo clique
        self.alertas_tree.bind("<Double-1>", self.on_alertas_double_click)
    
    def atualizar_alertas_vencimento(self, event=None):
        """Atualizar lista de alertas de vencimento"""
        try:
            # Limpar dados existentes
            for item in self.alertas_tree.get_children():
                self.alertas_tree.delete(item)
            
            # Obter dias selecionados
            dias_texto = self.dias_vencimento.get()
            dias = int(dias_texto.split()[0])
            
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar est√°gios obrigat√≥rios pr√≥ximos do vencimento
            cursor.execute("""
                SELECT 
                    e.nome as estudante,
                    eo.empresa,
                    o.nome as orientador,
                    'Contrato' as tipo,
                    eo.status,
                    eo.data_fim,
                    eo.estudante_id,
                    eo.orientador_id,
                    e.telefone as telefone_estudante,
                    o.telefone as telefone_orientador,
                    e.email as email_estudante,
                    o.email as email_orientador
                FROM estagio_obrigatorio eo
                JOIN estudantes e ON eo.estudante_id = e.id
                JOIN orientadores o ON eo.orientador_id = o.id
                WHERE eo.data_fim IS NOT NULL 
                AND eo.data_fim != ''
                AND date(eo.data_fim) <= date('now', '+{} days')
                AND date(eo.data_fim) >= date('now')
                AND eo.status != 'Completo'
                ORDER BY eo.data_fim ASC
            """.format(dias))
            
            estagios = cursor.fetchall()
            
            for estagio in estagios:
                estudante, empresa, orientador, tipo, status, data_fim, estudante_id, orientador_id, telefone_estudante, telefone_orientador, email_estudante, email_orientador = estagio
                
                # Calcular dias restantes
                from datetime import datetime, date
                try:
                    data_vencimento = datetime.strptime(data_fim, '%Y-%m-%d').date()
                    hoje = date.today()
                    dias_restantes = (data_vencimento - hoje).days
                except:
                    dias_restantes = 0
                
                # Determinar cor baseada nos dias restantes
                if dias_restantes <= 3:
                    cor_status = "üî¥ Cr√≠tico"
                elif dias_restantes <= 7:
                    cor_status = "üü° Aten√ß√£o"
                else:
                    cor_status = "üü¢ Normal"
                
                # Inserir na tabela
                item_id = self.alertas_tree.insert("", "end", values=(
                    estudante,
                    empresa,
                    orientador,
                    tipo,
                    status,
                    data_fim,
                    f"{dias_restantes} dias",
                    "üì± WhatsApp"
                ))
                
                # Armazenar dados para uso posterior
                self.alertas_tree.set(item_id, "estudante_id", estudante_id)
                self.alertas_tree.set(item_id, "orientador_id", orientador_id)
                self.alertas_tree.set(item_id, "telefone_estudante", telefone_estudante or "")
                self.alertas_tree.set(item_id, "telefone_orientador", telefone_orientador or "")
                self.alertas_tree.set(item_id, "email_estudante", email_estudante or "")
                self.alertas_tree.set(item_id, "email_orientador", email_orientador or "")
                self.alertas_tree.set(item_id, "dias_restantes", dias_restantes)
            
            conn.close()
            
            # Atualizar t√≠tulo com quantidade
            total_alertas = len(estagios)
            self.alertas_tree.heading("Estudante", text=f"Estudante ({total_alertas})")
            
        except Exception as e:
            print(f"Erro ao atualizar alertas: {e}")
    
    def on_alertas_double_click(self, event):
        """A√ß√£o ao clicar duplo em um alerta"""
        item = self.alertas_tree.selection()[0]
        if item:
            self.abrir_janela_whatsapp_alerta(item)
    
    def abrir_janela_whatsapp_alerta(self, item_id):
        """Abrir janela para envio de WhatsApp do alerta"""
        # Obter dados do item selecionado
        values = self.alertas_tree.item(item_id, "values")
        estudante = values[0]
        empresa = values[1]
        orientador = values[2]
        tipo = values[3]
        status = values[4]
        data_fim = values[5]
        dias_restantes = values[6]
        
        # Obter dados adicionais
        estudante_id = self.alertas_tree.set(item_id, "estudante_id")
        orientador_id = self.alertas_tree.set(item_id, "orientador_id")
        telefone_estudante = self.alertas_tree.set(item_id, "telefone_estudante")
        telefone_orientador = self.alertas_tree.set(item_id, "telefone_orientador")
        email_estudante = self.alertas_tree.set(item_id, "email_estudante")
        email_orientador = self.alertas_tree.set(item_id, "email_orientador")
        dias_num = int(self.alertas_tree.set(item_id, "dias_restantes"))
        
        # Criar janela de WhatsApp
        whats_window = ctk.CTkToplevel(self.root)
        whats_window.title("üì± Alertas WhatsApp - Est√°gio Obrigat√≥rio")
        whats_window.geometry("800x600")
        whats_window.transient(self.root)
        whats_window.grab_set()
        
        # Centralizar janela
        whats_window.update_idletasks()
        x = (whats_window.winfo_screenwidth() // 2) - (800 // 2)
        y = (whats_window.winfo_screenheight() // 2) - (600 // 2)
        whats_window.geometry(f"800x600+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(whats_window, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üì± Alertas WhatsApp - Est√°gio Obrigat√≥rio",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color=self.cor_azul
        )
        title_label.pack(pady=(0, 20))
        
        # Informa√ß√µes do est√°gio
        info_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=10)
        info_frame.pack(fill="x", pady=(0, 20))
        
        info_text = f"""
üìã Informa√ß√µes do Est√°gio:
‚Ä¢ Estudante: {estudante}
‚Ä¢ Empresa: {empresa}
‚Ä¢ Orientador: {orientador}
‚Ä¢ Tipo: {tipo}
‚Ä¢ Status: {status}
‚Ä¢ Data de Vencimento: {data_fim}
‚Ä¢ Dias Restantes: {dias_restantes}
        """
        
        ctk.CTkLabel(
            info_frame,
            text=info_text,
            font=ctk.CTkFont(size=12),
            text_color=self.cor_texto,
            justify="left"
        ).pack(pady=15, padx=15)
        
        # Frame de op√ß√µes de envio
        options_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        options_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            options_frame,
            text="üì± Op√ß√µes de Envio WhatsApp:",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_azul
        ).pack(anchor="w", pady=(0, 10))
        
        # Bot√µes de envio
        buttons_frame = ctk.CTkFrame(options_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        # Bot√£o para estudante
        btn_estudante = ctk.CTkButton(
            buttons_frame,
            text=f"üì± Enviar para Estudante\n{estudante}",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=60,
            fg_color=self.cor_verde,
            hover_color="#166534",
            command=lambda: self.enviar_whatsapp_estudante(
                estudante, telefone_estudante, empresa, data_fim, dias_num, whats_window
            )
        )
        btn_estudante.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        # Bot√£o para orientador
        btn_orientador = ctk.CTkButton(
            buttons_frame,
            text=f"üì± Enviar para Orientador\n{orientador}",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=60,
            fg_color=self.cor_azul,
            hover_color="#1e3a8a",
            command=lambda: self.enviar_whatsapp_orientador(
                orientador, telefone_orientador, estudante, empresa, data_fim, dias_num, whats_window
            )
        )
        btn_orientador.pack(side="left", fill="x", expand=True, padx=(10, 0))
        
        # Bot√£o para ambos
        btn_ambos = ctk.CTkButton(
            buttons_frame,
            text="üì± Enviar para Ambos\n(Estudante + Orientador)",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=60,
            fg_color=self.cor_roxo,
            hover_color="#7c3aed",
            command=lambda: self.enviar_whatsapp_ambos(
                estudante, telefone_estudante, orientador, telefone_orientador, 
                empresa, data_fim, dias_num, whats_window
            )
        )
        btn_ambos.pack(fill="x", pady=(10, 0))
        
        # Bot√£o fechar
        btn_fechar = ctk.CTkButton(
            main_frame,
            text="‚ùå Fechar",
            width=100,
            height=35,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="#6c757d",
            hover_color="#5a6268",
            command=whats_window.destroy
        )
        btn_fechar.pack(pady=(20, 0))
    
    def enviar_whatsapp_estudante(self, estudante, telefone, empresa, data_fim, dias_restantes, parent_window):
        """Enviar WhatsApp para o estudante"""
        if not telefone:
            self.show_message("Erro", f"Telefone do estudante {estudante} n√£o cadastrado!")
            return
        
        # Criar mensagem personalizada
        if dias_restantes <= 3:
            urgencia = "üö® URGENTE"
            mensagem = f"""*{urgencia} - ALERTA DE VENCIMENTO DE EST√ÅGIO*

Ol√° {estudante}! üëã

Seu est√°gio obrigat√≥rio na empresa *{empresa}* est√° pr√≥ximo do vencimento!

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

‚ö†Ô∏è *A√á√ÉO NECESS√ÅRIA:*
‚Ä¢ Renovar o contrato de est√°gio
‚Ä¢ Entrar em contato com a empresa
‚Ä¢ Comunicar ao orientador

üìû *Contato:* Entre em contato com seu orientador imediatamente.

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
        else:
            urgencia = "‚ö†Ô∏è ATEN√á√ÉO"
            mensagem = f"""*{urgencia} - LEMBRETE DE VENCIMENTO DE EST√ÅGIO*

Ol√° {estudante}! üëã

Seu est√°gio obrigat√≥rio na empresa *{empresa}* est√° pr√≥ximo do vencimento.

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

üìã *PR√ìXIMOS PASSOS:*
‚Ä¢ Verificar status do est√°gio
‚Ä¢ Renovar contrato se necess√°rio
‚Ä¢ Comunicar ao orientador

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
        
        # Enviar WhatsApp
        try:
            if hasattr(self, 'whatsapp_api') and self.whatsapp_api:
                resultado = self.whatsapp_api.enviar_mensagem(telefone, mensagem)
                if resultado.get('success'):
                    self.show_message("Sucesso", f"‚úÖ WhatsApp enviado com sucesso para {estudante}!")
                    parent_window.destroy()
                else:
                    self.show_message("Erro", f"‚ùå Erro ao enviar WhatsApp: {resultado.get('error', 'Erro desconhecido')}")
            else:
                self.show_message("Erro", "‚ùå API do WhatsApp n√£o configurada!")
        except Exception as e:
            self.show_message("Erro", f"‚ùå Erro ao enviar WhatsApp: {str(e)}")
    
    def enviar_whatsapp_orientador(self, orientador, telefone, estudante, empresa, data_fim, dias_restantes, parent_window):
        """Enviar WhatsApp para o orientador"""
        if not telefone:
            self.show_message("Erro", f"Telefone do orientador {orientador} n√£o cadastrado!")
            return
        
        # Criar mensagem personalizada
        if dias_restantes <= 3:
            urgencia = "üö® URGENTE"
            mensagem = f"""*{urgencia} - ALERTA DE VENCIMENTO DE EST√ÅGIO*

Ol√° Prof. {orientador}! üëã

O est√°gio obrigat√≥rio do estudante *{estudante}* na empresa *{empresa}* est√° pr√≥ximo do vencimento!

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

‚ö†Ô∏è *A√á√ÉO NECESS√ÅRIA:*
‚Ä¢ Verificar status do est√°gio
‚Ä¢ Orientar o estudante sobre renova√ß√£o
‚Ä¢ Contatar a empresa se necess√°rio

üìû *Estudante:* {estudante}
üè¢ *Empresa:* {empresa}

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
        else:
            urgencia = "‚ö†Ô∏è ATEN√á√ÉO"
            mensagem = f"""*{urgencia} - LEMBRETE DE VENCIMENTO DE EST√ÅGIO*

Ol√° Prof. {orientador}! üëã

O est√°gio obrigat√≥rio do estudante *{estudante}* na empresa *{empresa}* est√° pr√≥ximo do vencimento.

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

üìã *PR√ìXIMOS PASSOS:*
‚Ä¢ Verificar status do est√°gio
‚Ä¢ Orientar o estudante
‚Ä¢ Acompanhar renova√ß√£o

üìû *Estudante:* {estudante}
üè¢ *Empresa:* {empresa}

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
        
        # Enviar WhatsApp
        try:
            if hasattr(self, 'whatsapp_api') and self.whatsapp_api:
                resultado = self.whatsapp_api.enviar_mensagem(telefone, mensagem)
                if resultado.get('success'):
                    self.show_message("Sucesso", f"‚úÖ WhatsApp enviado com sucesso para Prof. {orientador}!")
                    parent_window.destroy()
                else:
                    self.show_message("Erro", f"‚ùå Erro ao enviar WhatsApp: {resultado.get('error', 'Erro desconhecido')}")
            else:
                self.show_message("Erro", "‚ùå API do WhatsApp n√£o configurada!")
        except Exception as e:
            self.show_message("Erro", f"‚ùå Erro ao enviar WhatsApp: {str(e)}")
    
    def enviar_whatsapp_ambos(self, estudante, telefone_estudante, orientador, telefone_orientador, empresa, data_fim, dias_restantes, parent_window):
        """Enviar WhatsApp para ambos (estudante e orientador)"""
        sucessos = 0
        erros = 0
        
        # Enviar para estudante
        if telefone_estudante:
            try:
                if hasattr(self, 'whatsapp_api') and self.whatsapp_api:
                    # Criar mensagem para estudante
                    if dias_restantes <= 3:
                        urgencia = "üö® URGENTE"
                        mensagem_estudante = f"""*{urgencia} - ALERTA DE VENCIMENTO DE EST√ÅGIO*

Ol√° {estudante}! üëã

Seu est√°gio obrigat√≥rio na empresa *{empresa}* est√° pr√≥ximo do vencimento!

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

‚ö†Ô∏è *A√á√ÉO NECESS√ÅRIA:*
‚Ä¢ Renovar o contrato de est√°gio
‚Ä¢ Entrar em contato com a empresa
‚Ä¢ Comunicar ao orientador

üìû *Contato:* Entre em contato com seu orientador imediatamente.

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
                    else:
                        urgencia = "‚ö†Ô∏è ATEN√á√ÉO"
                        mensagem_estudante = f"""*{urgencia} - LEMBRETE DE VENCIMENTO DE EST√ÅGIO*

Ol√° {estudante}! üëã

Seu est√°gio obrigat√≥rio na empresa *{empresa}* est√° pr√≥ximo do vencimento.

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

üìã *PR√ìXIMOS PASSOS:*
‚Ä¢ Verificar status do est√°gio
‚Ä¢ Renovar contrato se necess√°rio
‚Ä¢ Comunicar ao orientador

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
                    
                    resultado = self.whatsapp_api.enviar_mensagem(telefone_estudante, mensagem_estudante)
                    if resultado.get('success'):
                        sucessos += 1
                    else:
                        erros += 1
                else:
                    erros += 1
            except:
                erros += 1
        else:
            erros += 1
        
        # Enviar para orientador
        if telefone_orientador:
            try:
                if hasattr(self, 'whatsapp_api') and self.whatsapp_api:
                    # Criar mensagem para orientador
                    if dias_restantes <= 3:
                        urgencia = "üö® URGENTE"
                        mensagem_orientador = f"""*{urgencia} - ALERTA DE VENCIMENTO DE EST√ÅGIO*

Ol√° Prof. {orientador}! üëã

O est√°gio obrigat√≥rio do estudante *{estudante}* na empresa *{empresa}* est√° pr√≥ximo do vencimento!

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

‚ö†Ô∏è *A√á√ÉO NECESS√ÅRIA:*
‚Ä¢ Verificar status do est√°gio
‚Ä¢ Orientar o estudante sobre renova√ß√£o
‚Ä¢ Contatar a empresa se necess√°rio

üìû *Estudante:* {estudante}
üè¢ *Empresa:* {empresa}

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
                    else:
                        urgencia = "‚ö†Ô∏è ATEN√á√ÉO"
                        mensagem_orientador = f"""*{urgencia} - LEMBRETE DE VENCIMENTO DE EST√ÅGIO*

Ol√° Prof. {orientador}! üëã

O est√°gio obrigat√≥rio do estudante *{estudante}* na empresa *{empresa}* est√° pr√≥ximo do vencimento.

üìÖ *Data de Vencimento:* {data_fim}
‚è∞ *Dias Restantes:* {dias_restantes} dias

üìã *PR√ìXIMOS PASSOS:*
‚Ä¢ Verificar status do est√°gio
‚Ä¢ Orientar o estudante
‚Ä¢ Acompanhar renova√ß√£o

üìû *Estudante:* {estudante}
üè¢ *Empresa:* {empresa}

---
*Sistema EstagioPro - Gest√£o de Est√°gios*"""
                    
                    resultado = self.whatsapp_api.enviar_mensagem(telefone_orientador, mensagem_orientador)
                    if resultado.get('success'):
                        sucessos += 1
                    else:
                        erros += 1
                else:
                    erros += 1
            except:
                erros += 1
        else:
            erros += 1
        
        # Mostrar resultado
        if sucessos > 0 and erros == 0:
            self.show_message("Sucesso", f"‚úÖ WhatsApp enviado com sucesso para ambos!\n\nüì± {sucessos} mensagens enviadas")
            parent_window.destroy()
        elif sucessos > 0 and erros > 0:
            self.show_message("Parcial", f"‚ö†Ô∏è WhatsApp enviado parcialmente!\n\n‚úÖ {sucessos} sucessos\n‚ùå {erros} erros")
        else:
            self.show_message("Erro", f"‚ùå Erro ao enviar WhatsApp!\n\n‚ùå {erros} erros")
    
    def obter_estatisticas_alertas(self):
        """Obter estat√≠sticas de alertas"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Estat√≠sticas de est√°gios pr√≥ximos do vencimento
            cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN date(data_fim) <= date('now', '+7 days') AND date(data_fim) >= date('now') THEN 1 ELSE 0 END) as proximos_7_dias,
                    SUM(CASE WHEN date(data_fim) <= date('now', '+30 days') AND date(data_fim) >= date('now') THEN 1 ELSE 0 END) as proximos_30_dias
                FROM estagio_obrigatorio
                WHERE data_fim IS NOT NULL AND data_fim != '' AND status != 'Completo'
            """)
            
            stats = cursor.fetchone()
            conn.close()
            
            return {
                'total_estagios': stats[0] or 0,
                'proximos_7_dias': stats[1] or 0,
                'proximos_30_dias': stats[2] or 0
            }
            
        except Exception as e:
            print(f"Erro ao obter estat√≠sticas: {e}")
            return {
                'total_estagios': 0,
                'proximos_7_dias': 0,
                'proximos_30_dias': 0
            }
    
    def create_stats_alertas_cards(self, parent, stats):
        """Criar cards de estat√≠sticas de alertas"""
        # Frame para cards
        cards_frame = ctk.CTkFrame(parent, fg_color="transparent")
        cards_frame.pack(fill="x", pady=10)
        
        # Card Total de Est√°gios
        card_total = ctk.CTkFrame(cards_frame, fg_color=self.cor_azul, corner_radius=15)
        card_total.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        total_title = ctk.CTkLabel(
            card_total,
            text="üìä Total de Est√°gios",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_branco
        )
        total_title.pack(pady=(15, 5))
        
        total_stats = ctk.CTkLabel(
            card_total,
            text=f"Ativos: {stats['total_estagios']}",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco,
            justify="center"
        )
        total_stats.pack(pady=(0, 15))
        
        # Card Pr√≥ximos 7 dias
        card_7_dias = ctk.CTkFrame(cards_frame, fg_color=self.cor_vermelho, corner_radius=15)
        card_7_dias.pack(side="left", fill="x", expand=True, padx=(10, 10))
        
        dias7_title = ctk.CTkLabel(
            card_7_dias,
            text="üö® Pr√≥ximos 7 Dias",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_branco
        )
        dias7_title.pack(pady=(15, 5))
        
        dias7_stats = ctk.CTkLabel(
            card_7_dias,
            text=f"Vencendo: {stats['proximos_7_dias']}",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco,
            justify="center"
        )
        dias7_stats.pack(pady=(0, 15))
        
        # Card Pr√≥ximos 30 dias
        card_30_dias = ctk.CTkFrame(cards_frame, fg_color=self.cor_amarelo, corner_radius=15)
        card_30_dias.pack(side="left", fill="x", expand=True, padx=(10, 0))
        
        dias30_title = ctk.CTkLabel(
            card_30_dias,
            text="‚ö†Ô∏è Pr√≥ximos 30 Dias",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=self.cor_branco
        )
        dias30_title.pack(pady=(15, 5))
        
        dias30_stats = ctk.CTkLabel(
            card_30_dias,
            text=f"Vencendo: {stats['proximos_30_dias']}",
            font=ctk.CTkFont(size=14),
            text_color=self.cor_branco,
            justify="center"
        )
        dias30_stats.pack(pady=(0, 15))
    
    def create_historico_alertas_table(self, parent):
        """Criar tabela de hist√≥rico de alertas"""
        # Frame da tabela
        table_frame = ctk.CTkFrame(parent, fg_color=self.cor_branco)
        table_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo da tabela
        table_title = ctk.CTkLabel(
            table_frame,
            text="üìã Hist√≥rico de Alertas Enviados",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=self.cor_verde
        )
        table_title.pack(pady=(20, 10))
        
        # Criar Treeview
        columns = ("Data", "Tipo", "Destinat√°rio", "Status", "Observa√ß√µes")
        self.historico_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=10)
        
        # Configurar colunas
        for col in columns:
            self.historico_tree.heading(col, text=col)
            self.historico_tree.column(col, width=150, anchor="center")
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.historico_tree.yview)
        self.historico_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack
        self.historico_tree.pack(side="left", fill="both", expand=True, padx=(20, 0), pady=20)
        scrollbar.pack(side="right", fill="y", padx=(0, 20), pady=20)
    
    def carregar_historico_alertas(self):
        """Carregar hist√≥rico de alertas"""
        try:
            # Limpar dados existentes
            for item in self.historico_tree.get_children():
                self.historico_tree.delete(item)
            
            # Por enquanto, mostrar dados de exemplo
            # Em uma implementa√ß√£o real, isso viria do banco de dados
            dados_exemplo = [
                ("2024-01-15", "Vencimento", "Jo√£o Silva", "Enviado", "WhatsApp enviado com sucesso"),
                ("2024-01-14", "Vencimento", "Maria Santos", "Enviado", "WhatsApp enviado com sucesso"),
                ("2024-01-13", "Documento", "Pedro Costa", "Falhou", "Telefone n√£o cadastrado"),
            ]
            
            for dado in dados_exemplo:
                self.historico_tree.insert("", "end", values=dado)
            
        except Exception as e:
            print(f"Erro ao carregar hist√≥rico: {e}")
    
    def salvar_config_email(self):
        """Salvar configura√ß√µes de email"""
        try:
            smtp = self.smtp_entry.get()
            porta = self.porta_entry.get()
            email = self.email_entry.get()
            senha = self.senha_entry.get()
            
            if not all([smtp, porta, email, senha]):
                self.show_message("Erro", "Por favor, preencha todos os campos!")
                return
            
            # Salvar no banco de dados
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Atualizar configura√ß√µes
            configs = [
                ('smtp_server', smtp),
                ('smtp_port', porta),
                ('email_usuario', email),
                ('email_senha', senha)
            ]
            
            for chave, valor in configs:
                cursor.execute("""
                    INSERT OR REPLACE INTO configuracoes (chave, valor, descricao)
                    VALUES (?, ?, ?)
                """, (chave, valor, f"Configura√ß√£o de {chave}"))
            
            conn.commit()
            conn.close()
            
            self.show_message("Sucesso", "Configura√ß√µes de email salvas com sucesso!")
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao salvar configura√ß√µes: {str(e)}")
    
    def testar_config_email(self):
        """Testar configura√ß√µes de email"""
        self.show_message("Info", "Funcionalidade de teste de email ser√° implementada em breve!")
    
    def carregar_config_email(self):
        """Carregar configura√ß√µes de email existentes"""
        try:
            conn = sqlite3.connect('estagio.db')
            cursor = conn.cursor()
            
            # Buscar configura√ß√µes
            cursor.execute("SELECT chave, valor FROM configuracoes WHERE chave IN ('smtp_server', 'smtp_port', 'email_usuario', 'email_senha')")
            configs = cursor.fetchall()
            
            for chave, valor in configs:
                if chave == 'smtp_server':
                    self.smtp_entry.insert(0, valor)
                elif chave == 'smtp_port':
                    self.porta_entry.insert(0, valor)
                elif chave == 'email_usuario':
                    self.email_entry.insert(0, valor)
                elif chave == 'email_senha':
                    self.senha_entry.insert(0, valor)
            
            conn.close()
            
        except Exception as e:
            print(f"Erro ao carregar configura√ß√µes: {e}")
    
    def processar_alertas_whatsapp(self):
        """Processar e enviar alertas via WhatsApp"""
        try:
            if not hasattr(self, 'central_whatsapp') or self.central_whatsapp is None:
                try:
                    from central_alertas_inteligente import CentralAlertasInteligente
                    self.central_whatsapp = CentralAlertasInteligente()
                except ImportError:
                    self.show_message("Erro", "M√≥dulo de alertas WhatsApp n√£o dispon√≠vel!")
                    return
            
            if not self.central_whatsapp:
                self.show_message("Erro", "Central de alertas WhatsApp n√£o inicializada!")
                return
            
            # Criar janela de progresso
            progress_window = ctk.CTkToplevel(self.root)
            progress_window.title("Processando Alertas WhatsApp")
            progress_window.geometry("600x400")
            progress_window.transient(self.root)
            progress_window.grab_set()
            
            # Centralizar janela
            progress_window.after(100, lambda: progress_window.lift())
            
            # Frame principal
            main_frame = ctk.CTkFrame(progress_window)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo
            ctk.CTkLabel(
                main_frame,
                text="üì± Processando Alertas WhatsApp",
                font=ctk.CTkFont(size=20, weight="bold"),
                text_color="#2E7D32"
            ).pack(pady=(20, 10))
            
            # Barra de progresso
            progress_bar = ctk.CTkProgressBar(main_frame, width=400)
            progress_bar.pack(pady=20)
            progress_bar.set(0)
            
            # Texto de status
            status_label = ctk.CTkLabel(
                main_frame,
                text="Iniciando processamento...",
                font=ctk.CTkFont(size=14)
            )
            status_label.pack(pady=10)
            
            # √Årea de resultados
            result_text = ctk.CTkTextbox(main_frame, height=200, width=500)
            result_text.pack(pady=20, fill="both", expand=True)
            
            progress_window.update()
            
            # Processar alertas
            status_label.configure(text="Analisando est√°gios...")
            progress_bar.set(0.3)
            progress_window.update()
            
            resultado = self.central_whatsapp.processar_alertas()
            
            progress_bar.set(0.8)
            status_label.configure(text="Enviando mensagens...")
            progress_window.update()
            
            # Exibir resultados
            result_text.insert("end", f"üìä RELAT√ìRIO DE ENVIOS\n")
            result_text.insert("end", f"=" * 50 + "\n\n")
            result_text.insert("end", f"üìÖ Data/Hora: {resultado.get('timestamp', 'N/A')}\n")
            result_text.insert("end", f"üìã Total de alertas: {resultado['total_alertas']}\n")
            result_text.insert("end", f"‚úÖ Enviados: {resultado['enviados']}\n")
            result_text.insert("end", f"‚ùå Falhas: {resultado['falhas']}\n\n")
            
            if resultado.get('detalhes'):
                result_text.insert("end", "üìã DETALHES DOS ENVIOS:\n")
                result_text.insert("end", "-" * 30 + "\n")
                for detalhe in resultado['detalhes']:
                    status_emoji = "‚úÖ" if detalhe['status'] == 'ENVIADO' else "‚ùå"
                    result_text.insert("end", f"{status_emoji} {detalhe['estudante']}\n")
                    result_text.insert("end", f"   Tipo: {detalhe['alerta']}\n")
                    if detalhe.get('telefone'):
                        result_text.insert("end", f"   Tel: {detalhe['telefone']}\n")
                    if detalhe.get('erro'):
                        result_text.insert("end", f"   Erro: {detalhe['erro']}\n")
                    result_text.insert("end", "\n")
            else:
                result_text.insert("end", "Nenhum alerta encontrado para processamento.\n")
            
            progress_bar.set(1.0)
            status_label.configure(text="Processamento conclu√≠do!")
            
            # Bot√£o fechar
            ctk.CTkButton(
                main_frame,
                text="Fechar",
                command=progress_window.destroy,
                fg_color="#2E7D32",
                hover_color="#1B5E20"
            ).pack(pady=10)
            
        except Exception as e:
            self.show_message("Erro", f"Erro ao processar alertas: {str(e)}")
    
    def testar_whatsapp(self):
        """Testar envio de mensagem WhatsApp"""
        def enviar_teste():
            telefone = telefone_entry.get().strip()
            if not telefone:
                self.show_message("Erro", "Digite um n√∫mero de telefone!")
                return
            
            try:
                if not hasattr(self, 'central_whatsapp') or self.central_whatsapp is None:
                    from central_alertas_inteligente import CentralAlertasInteligente
                    self.central_whatsapp = CentralAlertasInteligente()
                
                # Enviar teste
                resultado = self.central_whatsapp.testar_envio(telefone)
                
                if resultado["sucesso"]:
                    self.show_message("Sucesso", f"‚úÖ Mensagem de teste enviada para {telefone}!\n\nVerifique seu WhatsApp.")
                else:
                    self.show_message("Erro", f"‚ùå Falha no envio:\n{resultado.get('erro', 'Erro desconhecido')}")
                
                test_window.destroy()
                
            except Exception as e:
                self.show_message("Erro", f"Erro ao testar WhatsApp: {str(e)}")
        
        # Criar janela de teste
        test_window = ctk.CTkToplevel(self.root)
        test_window.title("Testar WhatsApp")
        test_window.geometry("500x300")
        test_window.transient(self.root)
        test_window.grab_set()
        
        # Centralizar
        test_window.after(100, lambda: test_window.lift())
        
        # Frame principal
        main_frame = ctk.CTkFrame(test_window)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        ctk.CTkLabel(
            main_frame,
            text="üß™ Teste de Envio WhatsApp",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#1976D2"
        ).pack(pady=(20, 30))
        
        # Instru√ß√µes
        ctk.CTkLabel(
            main_frame,
            text="Digite seu n√∫mero de telefone para receber uma mensagem de teste:",
            font=ctk.CTkFont(size=14),
            text_color="#666666"
        ).pack(pady=(0, 20))
        
        # Campo de telefone
        ctk.CTkLabel(
            main_frame,
            text="üìû N√∫mero (com c√≥digo do pa√≠s):",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(pady=(0, 5))
        
        telefone_entry = ctk.CTkEntry(
            main_frame,
            placeholder_text="Ex: 5538999123456",
            width=300,
            height=40,
            font=ctk.CTkFont(size=14)
        )
        telefone_entry.pack(pady=(0, 20))
        
        # Dica
        ctk.CTkLabel(
            main_frame,
            text="üí° Formato: C√≥digo do pa√≠s + DDD + n√∫mero\nEx: 55 (Brasil) + 38 (DDD) + 999123456",
            font=ctk.CTkFont(size=12),
            text_color="#999999"
        ).pack(pady=(0, 30))
        
        # Bot√µes
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkButton(
            button_frame,
            text="üì± Enviar Teste",
            command=enviar_teste,
            fg_color="#2E7D32",
            hover_color="#1B5E20",
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(side="left", padx=(0, 10), fill="x", expand=True)
        
        ctk.CTkButton(
            button_frame,
            text="Cancelar",
            command=test_window.destroy,
            fg_color="#666666",
            hover_color="#555555",
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(side="right", padx=(10, 0), fill="x", expand=True)
    
    def configurar_whatsapp(self):
        """Abrir configura√ß√£o do WhatsApp com op√ß√µes"""
        def abrir_configurador_completo():
            try:
                import subprocess
                import sys
                subprocess.Popen([sys.executable, "configurar_whatsapp_simples.py"], 
                               creationflags=subprocess.CREATE_NEW_CONSOLE if sys.platform == "win32" else 0)
                config_window.destroy()
            except Exception as e:
                self.show_message("Erro", f"Erro ao abrir configurador: {str(e)}")
        
        def abrir_configurador_token():
            try:
                import subprocess
                import sys
                subprocess.Popen([sys.executable, "configurar_token_whatsapp.py"], 
                               creationflags=subprocess.CREATE_NEW_CONSOLE if sys.platform == "win32" else 0)
                config_window.destroy()
            except Exception as e:
                self.show_message("Erro", f"Erro ao abrir configurador: {str(e)}")
        
        # Criar janela de op√ß√µes
        config_window = ctk.CTkToplevel(self.root)
        config_window.title("Configurar WhatsApp")
        config_window.geometry("500x400")
        config_window.transient(self.root)
        config_window.grab_set()
        
        # Centralizar
        config_window.after(100, lambda: config_window.lift())
        
        # Frame principal
        main_frame = ctk.CTkFrame(config_window)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        ctk.CTkLabel(
            main_frame,
            text="‚öôÔ∏è Configurar WhatsApp",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#FF9800"
        ).pack(pady=(20, 30))
        
        # Op√ß√µes
        ctk.CTkLabel(
            main_frame,
            text="Escolha o tipo de configura√ß√£o:",
            font=ctk.CTkFont(size=14),
            text_color="#666666"
        ).pack(pady=(0, 20))
        
        # Bot√£o Token
        token_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=8)
        token_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(
            token_frame,
            text="üîë Configurar Token",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#1565C0"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            token_frame,
            text='Configura apenas o token de autoriza√ß√£o:\n"Authorization": "Bearer SEU_TOKEN"',
            font=ctk.CTkFont(size=12),
            text_color="#333333"
        ).pack(pady=(0, 10))
        
        ctk.CTkButton(
            token_frame,
            text="üîë Configurar Token",
            command=abrir_configurador_token,
            fg_color="#1976D2",
            hover_color="#1565C0",
            height=35
        ).pack(pady=(0, 15))
        
        # Bot√£o Completo
        completo_frame = ctk.CTkFrame(main_frame, fg_color="#E8F5E8", corner_radius=8)
        completo_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            completo_frame,
            text="üõ†Ô∏è Configura√ß√£o Completa",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            completo_frame,
            text="Configura√ß√£o completa com token, Phone ID e testes",
            font=ctk.CTkFont(size=12),
            text_color="#333333"
        ).pack(pady=(0, 10))
        
        ctk.CTkButton(
            completo_frame,
            text="üõ†Ô∏è Configura√ß√£o Completa",
            command=abrir_configurador_completo,
            fg_color="#2E7D32",
            hover_color="#1B5E20",
            height=35
        ).pack(pady=(0, 15))
        
        # Bot√£o Fechar
        ctk.CTkButton(
            main_frame,
            text="Fechar",
            command=config_window.destroy,
            fg_color="#666666",
            hover_color="#555555",
            height=35
        ).pack(pady=(20, 0))
        
        # Frame principal scrollable
        main_frame = ctk.CTkScrollableFrame(self.dynamic_frame, fg_color=self.cor_branco)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # === CABE√áALHO PROFISSIONAL ===
        header_frame = ctk.CTkFrame(main_frame, fg_color="#1e3a8a", corner_radius=15)
        header_frame.pack(fill="x", padx=0, pady=(0, 20))
        
        ctk.CTkLabel(
            header_frame,
            text="üö® CENTRAL DE ALERTAS PROFISSIONAL",
            font=ctk.CTkFont(size=26, weight="bold"),
            text_color="white"
        ).pack(pady=(20, 5))
        
        ctk.CTkLabel(
            header_frame,
            text="Sistema Inteligente de Comunica√ß√£o e Gest√£o de Alertas",
            font=ctk.CTkFont(size=16),
            text_color="#E3F2FD"
        ).pack(pady=(0, 20))
        
        # === DASHBOARD OPERACIONAL ===
        dashboard_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=15)
        dashboard_frame.pack(fill="x", padx=0, pady=(0, 20))
        
        ctk.CTkLabel(
            dashboard_frame,
            text="üìä DASHBOARD OPERACIONAL",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(20, 15))
        
        # Buscar estat√≠sticas em tempo real
        self.cursor.execute("""
            SELECT 
                COUNT(*) as total_vencimentos,
                SUM(CASE WHEN JULIANDAY(data_termino) - JULIANDAY('now') <= 3 THEN 1 ELSE 0 END) as criticos,
                SUM(CASE WHEN JULIANDAY(data_termino) - JULIANDAY('now') <= 7 THEN 1 ELSE 0 END) as urgentes,
                SUM(CASE WHEN JULIANDAY(data_termino) - JULIANDAY('now') <= 30 THEN 1 ELSE 0 END) as proximos
            FROM estagio_obrigatorio 
            WHERE status != 'Conclu√≠do' 
            AND data_termino <= date('now', '+30 days')
        """)
        stats_venc = self.cursor.fetchone() or (0, 0, 0, 0)
        
        # Buscar alertas pendentes
        self.cursor.execute("SELECT COUNT(*) FROM alertas WHERE status = 'ATIVO'")
        alertas_ativos = self.cursor.fetchone()[0]
        
        # Cards de m√©tricas
        metrics_container = ctk.CTkFrame(dashboard_frame, fg_color="transparent")
        metrics_container.pack(fill="x", padx=20, pady=(0, 20))
        
        # Grid de m√©tricas 2x2
        metrics_grid = ctk.CTkFrame(metrics_container, fg_color="transparent")
        metrics_grid.pack()
        
        # M√©trica 1: Cr√≠ticos
        card1 = ctk.CTkFrame(metrics_grid, fg_color="#DC2626", corner_radius=12, width=150, height=100)
        card1.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        ctk.CTkLabel(card1, text="üö®", font=ctk.CTkFont(size=24)).pack(pady=(15, 5))
        ctk.CTkLabel(card1, text=f"{stats_venc[1]}", font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack()
        ctk.CTkLabel(card1, text="CR√çTICOS", font=ctk.CTkFont(size=12, weight="bold"), text_color="white").pack()
        
        # M√©trica 2: Urgentes
        card2 = ctk.CTkFrame(metrics_grid, fg_color="#F59E0B", corner_radius=12, width=150, height=100)
        card2.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
        ctk.CTkLabel(card2, text="‚ö†Ô∏è", font=ctk.CTkFont(size=24)).pack(pady=(15, 5))
        ctk.CTkLabel(card2, text=f"{stats_venc[2]}", font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack()
        ctk.CTkLabel(card2, text="URGENTES", font=ctk.CTkFont(size=12, weight="bold"), text_color="white").pack()
        
        # M√©trica 3: Pr√≥ximos
        card3 = ctk.CTkFrame(metrics_grid, fg_color="#3B82F6", corner_radius=12, width=150, height=100)
        card3.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")
        ctk.CTkLabel(card3, text="‚è∞", font=ctk.CTkFont(size=24)).pack(pady=(15, 5))
        ctk.CTkLabel(card3, text=f"{stats_venc[3]}", font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack()
        ctk.CTkLabel(card3, text="PR√ìXIMOS", font=ctk.CTkFont(size=12, weight="bold"), text_color="white").pack()
        
        # M√©trica 4: Alertas Ativos
        card4 = ctk.CTkFrame(metrics_grid, fg_color="#059669", corner_radius=12, width=150, height=100)
        card4.grid(row=1, column=1, padx=10, pady=10, sticky="nsew")
        ctk.CTkLabel(card4, text="üìã", font=ctk.CTkFont(size=24)).pack(pady=(15, 5))
        ctk.CTkLabel(card4, text=f"{alertas_ativos}", font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack()
        ctk.CTkLabel(card4, text="ALERTAS", font=ctk.CTkFont(size=12, weight="bold"), text_color="white").pack()
        
        # === A√á√ïES R√ÅPIDAS OPERACIONAIS ===
        acoes_frame = ctk.CTkFrame(main_frame, fg_color="#E8F5E8", corner_radius=15)
        acoes_frame.pack(fill="x", padx=0, pady=(0, 20))
        
        ctk.CTkLabel(
            acoes_frame,
            text="‚ö° A√á√ïES R√ÅPIDAS OPERACIONAIS",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#2E7D32"
        ).pack(pady=(20, 15))
        
        # Container para bot√µes de a√ß√£o
        acoes_container = ctk.CTkFrame(acoes_frame, fg_color="transparent")
        acoes_container.pack(fill="x", padx=20, pady=(0, 20))
        
        # Linha 1 de bot√µes
        linha1 = ctk.CTkFrame(acoes_container, fg_color="transparent")
        linha1.pack(fill="x", pady=(0, 10))
        
        ctk.CTkButton(
            linha1, text="üö® Alertar Cr√≠ticos", width=180, height=45,
            fg_color="#DC2626", hover_color="#B91C1C",
            command=lambda: self.enviar_alertas_por_prioridade("CRITICA")
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkButton(
            linha1, text="‚ö†Ô∏è Alertar Urgentes", width=180, height=45,
            fg_color="#F59E0B", hover_color="#D97706",
            command=lambda: self.enviar_alertas_por_prioridade("ALTA")
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkButton(
            linha1, text="üìß Relat√≥rio Di√°rio", width=180, height=45,
            fg_color="#3B82F6", hover_color="#2563EB",
            command=self.gerar_relatorio_diario
        ).pack(side="left")
        
        # Linha 2 de bot√µes
        linha2 = ctk.CTkFrame(acoes_container, fg_color="transparent")
        linha2.pack(fill="x")
        
        ctk.CTkButton(
            linha2, text="üîÑ Atualizar Alertas", width=180, height=45,
            fg_color="#059669", hover_color="#047857",
            command=self.atualizar_alertas_automaticos
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkButton(
            linha2, text="üìä Dashboard Completo", width=180, height=45,
            fg_color="#7C3AED", hover_color="#6D28D9",
            command=self.abrir_dashboard_completo
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkButton(
            linha2, text="‚öôÔ∏è Templates de Mensagem", width=180, height=45,
            fg_color="#F97316", hover_color="#EA580C",
            command=self.gerenciar_templates
        ).pack(side="left")

        
        # Bot√µes de a√ß√£o principal
        actions_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        actions_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        btn_verificar_vencimentos = ctk.CTkButton(
            actions_frame,
            text="üîç Verificar Vencimentos",
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#3498db",
            hover_color="#2980b9",
            command=self.verificar_estagios_vencimento
        )
        btn_verificar_vencimentos.pack(side="left", padx=(0, 15))
        
        btn_enviar_todos_emails = ctk.CTkButton(
            actions_frame,
            text="üìß Enviar Todos os Emails",
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#27ae60",
            hover_color="#229954",
            command=self.enviar_todos_emails_vencimento
        )
        btn_enviar_todos_emails.pack(side="left", padx=(0, 15))
        
        btn_testar_email = ctk.CTkButton(
            actions_frame,
            text="üß™ Testar Email",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#9b59b6",
            hover_color="#8e44ad",
            command=self.testar_envio_email
        )
        btn_testar_email.pack(side="left")
        
        # Frame scrollable para lista de est√°gios em vencimento
        self.vencimentos_frame = ctk.CTkScrollableFrame(main_frame, height=400)
        self.vencimentos_frame.pack(fill="both", expand=True, padx=20, pady=(20, 20))
        
        # Carregar est√°gios em vencimento
        self.carregar_estagios_vencimento()

    def verificar_estagios_vencimento(self):
        """Verificar e atualizar lista de est√°gios em vencimento"""
        self.carregar_estagios_vencimento()
        messagebox.showinfo("Sucesso", "Lista de est√°gios em vencimento atualizada!")
    
    def carregar_estagios_vencimento(self):
        """Carregar lista de est√°gios pr√≥ximos do vencimento"""
        # Limpar frame atual
        for widget in self.vencimentos_frame.winfo_children():
            widget.destroy()
        
        # Buscar est√°gios em vencimento (30 dias)
        self.cursor.execute("""
            SELECT eo.id, est.nome as estudante_nome, est.email as estudante_email,
                   ori.nome as orientador_nome, ori.email_institucional as orientador_email,
                   emp.nome as empresa_nome, eo.data_termino,
                   JULIANDAY(eo.data_termino) - JULIANDAY('now') as dias_restantes
            FROM estagio_obrigatorio eo
            JOIN estudantes est ON eo.estudante_id = est.id
            JOIN orientadores ori ON eo.orientador_id = ori.id
            JOIN empresas emp ON eo.empresa_id = emp.id
            WHERE eo.status != 'Conclu√≠do' 
            AND eo.data_termino <= date('now', '+30 days')
            ORDER BY dias_restantes ASC
        """)
        
        estagios = self.cursor.fetchall()
        
        if not estagios:
            # Mensagem quando n√£o h√° est√°gios em vencimento
            no_data_frame = ctk.CTkFrame(self.vencimentos_frame, fg_color="#e8f5e9", corner_radius=10)
            no_data_frame.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(
                no_data_frame,
                text="‚úÖ Nenhum est√°gio pr√≥ximo do vencimento encontrado!",
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#2e7d32"
            ).pack(pady=30)
            return
        
        # Criar cards para cada est√°gio
        for estagio in estagios:
            estagio_id, estudante_nome, estudante_email, orientador_nome, orientador_email, empresa_nome, data_termino, dias_restantes = estagio
            
            # Determinar cor baseada na urg√™ncia
            if dias_restantes <= 3:
                cor_card = "#ffebee"
                cor_borda = "#e74c3c"
                icone = "üö®"
                urgencia = "CR√çTICO"
            elif dias_restantes <= 7:
                cor_card = "#fff3e0"
                cor_borda = "#f39c12"
                icone = "‚ö†Ô∏è"
                urgencia = "URGENTE"
            else:
                cor_card = "#e3f2fd"
                cor_borda = "#3498db"
                icone = "‚è∞"
                urgencia = "NORMAL"
            
            # Card do est√°gio
            card_frame = ctk.CTkFrame(self.vencimentos_frame, fg_color=cor_card, corner_radius=10)
            card_frame.pack(fill="x", padx=10, pady=5)
            
            # Cabe√ßalho do card
            header_card = ctk.CTkFrame(card_frame, fg_color="transparent")
            header_card.pack(fill="x", padx=15, pady=(15, 5))
            
            # T√≠tulo com urg√™ncia
            title_label = ctk.CTkLabel(
                header_card,
                text=f"{icone} {estudante_nome} - {urgencia}",
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color=cor_borda
            )
            title_label.pack(side="left")
            
            # Dias restantes
            dias_label = ctk.CTkLabel(
                header_card,
                text=f"{int(dias_restantes)} dias restantes",
                font=ctk.CTkFont(size=14, weight="bold"),
                text_color=cor_borda
            )
            dias_label.pack(side="right")
            
            # Informa√ß√µes do est√°gio
            info_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
            info_frame.pack(fill="x", padx=15, pady=5)
            
            ctk.CTkLabel(info_frame, text=f"üè¢ Empresa: {empresa_nome}", 
                        font=ctk.CTkFont(size=12), anchor="w").pack(fill="x")
            ctk.CTkLabel(info_frame, text=f"üë®‚Äçüè´ Orientador: {orientador_nome}", 
                        font=ctk.CTkFont(size=12), anchor="w").pack(fill="x")
            ctk.CTkLabel(info_frame, text=f"üìÖ Data de t√©rmino: {data_termino}", 
                        font=ctk.CTkFont(size=12), anchor="w").pack(fill="x")
            
            # Bot√µes de a√ß√£o
            buttons_frame = ctk.CTkFrame(card_frame, fg_color="transparent")
            buttons_frame.pack(fill="x", padx=15, pady=(5, 15))
            
            # Bot√£o enviar email para estudante
            btn_email_estudante = ctk.CTkButton(
                buttons_frame,
                text="üìß Email Aluno",
                width=120,
                height=30,
                font=ctk.CTkFont(size=12),
                fg_color="#27ae60",
                hover_color="#229954",
                command=lambda e_id=estagio_id, e_nome=estudante_nome, e_email=estudante_email, 
                       empresa=empresa_nome, data=data_termino, dias=dias_restantes, 
                       ori=orientador_nome: self.enviar_email_estudante(e_id, e_nome, e_email, empresa, data, dias, ori)
            )
            btn_email_estudante.pack(side="left", padx=(0, 10))
            
            # Bot√£o enviar email para professor
            btn_email_professor = ctk.CTkButton(
                buttons_frame,
                text="üìß Email Prof.",
                width=120,
                height=30,
                font=ctk.CTkFont(size=12),
                fg_color="#3498db",
                hover_color="#2980b9",
                command=lambda e_id=estagio_id, p_nome=orientador_nome, p_email=orientador_email,
                       est_nome=estudante_nome, empresa=empresa_nome, data=data_termino, 
                       dias=dias_restantes: self.enviar_email_professor(e_id, p_nome, p_email, est_nome, empresa, data, dias)
            )
            btn_email_professor.pack(side="left", padx=(0, 10))
            
            # Status de emails enviados (verificar se j√° foram enviados)
            status_label = ctk.CTkLabel(
                buttons_frame,
                text="üìä Status: Pendente",
                font=ctk.CTkFont(size=10),
                text_color="#666666"
            )
            status_label.pack(side="right")

    def enviar_email_estudante(self, estagio_id, nome_estudante, email_estudante, empresa, data_termino, dias_restantes, orientador):
        """Enviar email de alerta para estudante"""
        if not email_estudante:
            messagebox.showerror("Erro", f"Email do estudante {nome_estudante} n√£o cadastrado!")
            return
        
        try:
            # Criar templates de email
            html, texto = self.email_sender.criar_template_alerta_estudante(
                nome_estudante, empresa, data_termino, dias_restantes, orientador
            )
            
            # Assunto do email
            if dias_restantes <= 3:
                assunto = f"üö® URGENTE: Seu est√°gio vence em {int(dias_restantes)} dias - {nome_estudante}"
            elif dias_restantes <= 7:
                assunto = f"‚ö†Ô∏è IMPORTANTE: Seu est√°gio vence em {int(dias_restantes)} dias - {nome_estudante}"
            else:
                assunto = f"‚è∞ AVISO: Seu est√°gio vence em {int(dias_restantes)} dias - {nome_estudante}"
            
            # Enviar email
            resultado = self.email_sender.enviar_email(email_estudante, assunto, html, texto)
            
            if resultado["sucesso"]:
                messagebox.showinfo("Sucesso", 
                                   f"‚úÖ Email enviado com sucesso para {nome_estudante}!\n"
                                   f"üìß Destinat√°rio: {email_estudante}")
            else:
                messagebox.showerror("Erro", 
                                    f"‚ùå Erro ao enviar email:\n\n{resultado['erro']}")
        
        except Exception as e:
            messagebox.showerror("Erro", f"Erro inesperado: {str(e)}")

    def enviar_email_professor(self, estagio_id, nome_professor, email_professor, nome_estudante, empresa, data_termino, dias_restantes):
        """Enviar email de alerta para professor"""
        if not email_professor:
            messagebox.showerror("Erro", f"Email do professor {nome_professor} n√£o cadastrado!")
            return
        
        try:
            # Criar templates de email
            html, texto = self.email_sender.criar_template_alerta_professor(
                nome_professor, nome_estudante, empresa, data_termino, dias_restantes
            )
            
            # Assunto do email
            if dias_restantes <= 3:
                assunto = f"üö® URGENTE: Est√°gio de {nome_estudante} vence em {int(dias_restantes)} dias"
            elif dias_restantes <= 7:
                assunto = f"‚ö†Ô∏è IMPORTANTE: Est√°gio de {nome_estudante} vence em {int(dias_restantes)} dias"
            else:
                assunto = f"‚è∞ AVISO: Est√°gio de {nome_estudante} vence em {int(dias_restantes)} dias"
            
            # Enviar email
            resultado = self.email_sender.enviar_email(email_professor, assunto, html, texto)
            
            if resultado["sucesso"]:
                messagebox.showinfo("Sucesso", 
                                   f"‚úÖ Email enviado com sucesso para Prof. {nome_professor}!\n"
                                   f"üìß Destinat√°rio: {email_professor}")
            else:
                messagebox.showerror("Erro", 
                                    f"‚ùå Erro ao enviar email:\n\n{resultado['erro']}")
        
        except Exception as e:
            messagebox.showerror("Erro", f"Erro inesperado: {str(e)}")

    def enviar_todos_emails_vencimento(self):
        """Enviar emails para todos os est√°gios em vencimento"""
        if not messagebox.askyesno("Confirmar", 
                                  "Deseja enviar emails de alerta para TODOS os est√°gios em vencimento?\n\n"
                                  "Esta a√ß√£o enviar√° emails tanto para estudantes quanto para professores."):
            return
        
        try:
            # Buscar todos os est√°gios em vencimento
            self.cursor.execute("""
                SELECT eo.id, est.nome as estudante_nome, est.email as estudante_email,
                       ori.nome as orientador_nome, ori.email_institucional as orientador_email,
                       emp.nome as empresa_nome, eo.data_termino,
                       JULIANDAY(eo.data_termino) - JULIANDAY('now') as dias_restantes
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.status != 'Conclu√≠do' 
                AND eo.data_termino <= date('now', '+30 days')
            """)
            
            estagios = self.cursor.fetchall()
            
            if not estagios:
                messagebox.showinfo("Info", "Nenhum est√°gio em vencimento encontrado!")
                return
            
            enviados_estudantes = 0
            enviados_professores = 0
            erros = []
            
            # Enviar emails para cada est√°gio
            for estagio in estagios:
                estagio_id, estudante_nome, estudante_email, orientador_nome, orientador_email, empresa_nome, data_termino, dias_restantes = estagio
                
                # Enviar para estudante
                if estudante_email:
                    try:
                        html, texto = self.email_sender.criar_template_alerta_estudante(
                            estudante_nome, empresa_nome, data_termino, dias_restantes, orientador_nome
                        )
                        
                        if dias_restantes <= 3:
                            assunto = f"üö® URGENTE: Seu est√°gio vence em {int(dias_restantes)} dias - {estudante_nome}"
                        elif dias_restantes <= 7:
                            assunto = f"‚ö†Ô∏è IMPORTANTE: Seu est√°gio vence em {int(dias_restantes)} dias - {estudante_nome}"
                        else:
                            assunto = f"‚è∞ AVISO: Seu est√°gio vence em {int(dias_restantes)} dias - {estudante_nome}"
                        
                        resultado = self.email_sender.enviar_email(estudante_email, assunto, html, texto)
                        if resultado["sucesso"]:
                            enviados_estudantes += 1
                        else:
                            erros.append(f"Estudante {estudante_nome}: {resultado['erro']}")
                    except Exception as e:
                        erros.append(f"Estudante {estudante_nome}: {str(e)}")
                
                # Enviar para professor
                if orientador_email:
                    try:
                        html, texto = self.email_sender.criar_template_alerta_professor(
                            orientador_nome, estudante_nome, empresa_nome, data_termino, dias_restantes
                        )
                        
                        if dias_restantes <= 3:
                            assunto = f"üö® URGENTE: Est√°gio de {estudante_nome} vence em {int(dias_restantes)} dias"
                        elif dias_restantes <= 7:
                            assunto = f"‚ö†Ô∏è IMPORTANTE: Est√°gio de {estudante_nome} vence em {int(dias_restantes)} dias"
                        else:
                            assunto = f"‚è∞ AVISO: Est√°gio de {estudante_nome} vence em {int(dias_restantes)} dias"
                        
                        resultado = self.email_sender.enviar_email(orientador_email, assunto, html, texto)
                        if resultado["sucesso"]:
                            enviados_professores += 1
                        else:
                            erros.append(f"Professor {orientador_nome}: {resultado['erro']}")
                    except Exception as e:
                        erros.append(f"Professor {orientador_nome}: {str(e)}")
            
            # Mostrar resultado
            resultado_msg = f"üìß Emails enviados com sucesso!\n\n"
            resultado_msg += f"‚úÖ Estudantes: {enviados_estudantes}\n"
            resultado_msg += f"‚úÖ Professores: {enviados_professores}\n"
            
            if erros:
                resultado_msg += f"\n‚ùå Erros encontrados:\n"
                for erro in erros[:5]:  # Mostrar apenas os primeiros 5 erros
                    resultado_msg += f"‚Ä¢ {erro}\n"
                if len(erros) > 5:
                    resultado_msg += f"... e mais {len(erros) - 5} erros."
            
            messagebox.showinfo("Resultado do Envio", resultado_msg)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao enviar emails em lote: {str(e)}")

    def testar_envio_email(self):
        """Testar configura√ß√£o de email - Janela Otimizada"""
        # Janela de teste com tamanho otimizado
        test_window = ctk.CTkToplevel(self.root)
        test_window.title("üß™ Teste de Configura√ß√£o de Email - EstagioPro")
        test_window.geometry("700x650")  # Aumentei o tamanho
        test_window.transient(self.root)
        test_window.grab_set()
        test_window.resizable(True, True)  # Permitir redimensionamento
        
        # Centralizar janela
        test_window.update_idletasks()
        x = (test_window.winfo_screenwidth() // 2) - (700 // 2)
        y = (test_window.winfo_screenheight() // 2) - (650 // 2)
        test_window.geometry(f"700x650+{x}+{y}")
        
        # Frame principal scrollable para garantir que tudo apare√ßa
        main_frame = ctk.CTkScrollableFrame(test_window, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)
        
        # === CABE√áALHO PROFISSIONAL ===
        header_frame = ctk.CTkFrame(main_frame, fg_color="#1e3a8a", corner_radius=12)
        header_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            header_frame,
            text="üß™ TESTE DE CONFIGURA√á√ÉO DE EMAIL",
            font=ctk.CTkFont(size=22, weight="bold"),
            text_color="white"
        ).pack(pady=(15, 5))
        
        ctk.CTkLabel(
            header_frame,
            text="Valida√ß√£o das Configura√ß√µes SMTP do Sistema",
            font=ctk.CTkFont(size=14),
            text_color="#E3F2FD"
        ).pack(pady=(0, 15))
        
        # === INFORMA√á√ïES DA CONFIGURA√á√ÉO ATUAL ===
        info_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=10)
        info_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text="üìã CONFIGURA√á√ÉO ATUAL DO SISTEMA", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#1565C0").pack(pady=(15, 10))
        
        # Grid para informa√ß√µes organizadas
        info_grid = ctk.CTkFrame(info_frame, fg_color="transparent")
        info_grid.pack(fill="x", padx=20, pady=(0, 15))
        
        # Linha 1: Email
        ctk.CTkLabel(info_grid, text="üìß Email Remetente:", 
                    font=ctk.CTkFont(size=13, weight="bold")).grid(row=0, column=0, sticky="w", padx=(0, 15), pady=8)
        ctk.CTkLabel(info_grid, text=f"{self.email_sender.email_remetente}", 
                    font=ctk.CTkFont(size=13)).grid(row=0, column=1, sticky="w", pady=8)
        
        # Linha 2: SMTP
        ctk.CTkLabel(info_grid, text="üåê Servidor SMTP:", 
                    font=ctk.CTkFont(size=13, weight="bold")).grid(row=1, column=0, sticky="w", padx=(0, 15), pady=8)
        smtp_info = f"{self.email_sender.config_ativa['servidor']}:{self.email_sender.config_ativa['porta']}" if self.email_sender.config_ativa else "N√£o configurado"
        ctk.CTkLabel(info_grid, text=smtp_info, 
                    font=ctk.CTkFont(size=13)).grid(row=1, column=1, sticky="w", pady=8)
        
        # Linha 3: Senha
        ctk.CTkLabel(info_grid, text="üîê Senha:", 
                    font=ctk.CTkFont(size=13, weight="bold")).grid(row=2, column=0, sticky="w", padx=(0, 15), pady=8)
        ctk.CTkLabel(info_grid, text="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢", 
                    font=ctk.CTkFont(size=13)).grid(row=2, column=1, sticky="w", pady=8)
        
        # === CAMPO PARA EMAIL DE TESTE ===
        teste_frame = ctk.CTkFrame(main_frame, fg_color="#F8F9FA", corner_radius=10)
        teste_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(teste_frame, text="üìß ENVIAR EMAIL DE TESTE", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#2E7D32").pack(pady=(15, 10))
        
        ctk.CTkLabel(teste_frame, text="Digite um endere√ßo de email para receber o teste:", 
                    font=ctk.CTkFont(size=13)).pack(pady=(0, 10))
        
        email_entry = ctk.CTkEntry(
            teste_frame, 
            width=500, 
            height=40, 
            placeholder_text="exemplo@ufvjm.edu.br",
            font=ctk.CTkFont(size=14)
        )
        email_entry.pack(pady=(0, 20))
        
        # === √ÅREA DE RESULTADOS ===
        resultado_frame = ctk.CTkFrame(main_frame, fg_color="#FFEBEE", corner_radius=10)
        resultado_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(resultado_frame, text="üìä RESULTADO DO TESTE", 
                    font=ctk.CTkFont(size=16, weight="bold"),
                    text_color="#C62828").pack(pady=(15, 10))
        
        resultado_text = ctk.CTkTextbox(
            resultado_frame, 
            height=180, 
            font=ctk.CTkFont(size=12),
            corner_radius=8
        )
        resultado_text.pack(fill="x", padx=20, pady=(0, 20))
        resultado_text.insert("1.0", "üîÑ Aguardando teste...\n\nüìã Clique em 'Testar' para verificar a configura√ß√£o de email.\n\nüí° O sistema enviar√° um email de teste para o endere√ßo informado e mostrar√° o resultado aqui.")
        
        def executar_teste():
            email_teste = email_entry.get().strip()
            if not email_teste:
                messagebox.showerror("Erro", "Digite um email para teste!")
                return
            
            resultado_text.delete("1.0", "end")
            resultado_text.insert("1.0", "üîÑ Testando configura√ß√£o de email...\n\n")
            test_window.update()
            
            try:
                # Criar email de teste
                html_teste = """
                <html>
                <body style="font-family: Arial, sans-serif;">
                    <h2>üß™ Teste de Configura√ß√£o - EstagioPro</h2>
                    <p>Este √© um email de teste do sistema EstagioPro.</p>
                    <p>Se voc√™ recebeu esta mensagem, a configura√ß√£o de email est√° funcionando corretamente!</p>
                    <hr>
                    <p><small>Sistema EstagioPro - Ci√™ncias Cont√°beis - UFVJM</small></p>
                </body>
                </html>
                """
                
                texto_teste = """
                Teste de Configura√ß√£o - EstagioPro
                
                Este √© um email de teste do sistema EstagioPro.
                Se voc√™ recebeu esta mensagem, a configura√ß√£o de email est√° funcionando corretamente!
                
                Sistema EstagioPro - Ci√™ncias Cont√°beis - UFVJM
                """
                
                # Enviar email de teste
                resultado = self.email_sender.enviar_email(
                    email_teste, 
                    "üß™ Teste de Configura√ß√£o - EstagioPro", 
                    html_teste, 
                    texto_teste
                )
                
                if resultado["sucesso"]:
                    resultado_text.insert("end", "‚úÖ TESTE APROVADO!\n\n")
                    resultado_text.insert("end", f"üìß Email enviado para: {email_teste}\n")
                    resultado_text.insert("end", "üìã Configura√ß√£o de email est√° funcionando corretamente!\n")
                    resultado_text.insert("end", "üéâ O sistema est√° pronto para enviar alertas por email.")
                else:
                    resultado_text.insert("end", "‚ùå TESTE FALHOU!\n\n")
                    resultado_text.insert("end", f"üìß Erro ao enviar para: {email_teste}\n")
                    resultado_text.insert("end", f"üí¨ Detalhes do erro:\n{resultado['erro']}\n\n")
                    resultado_text.insert("end", "üîß Verifique as configura√ß√µes de email e tente novamente.")
                    
            except Exception as e:
                resultado_text.insert("end", f"‚ùå ERRO INESPERADO!\n\n{str(e)}")
        
        # === BOT√ïES DE A√á√ÉO ===
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="#F5F5F5", corner_radius=10)
        buttons_frame.pack(fill="x", pady=(0, 10))
        
        # Container para centralizar bot√µes
        btn_container = ctk.CTkFrame(buttons_frame, fg_color="transparent")
        btn_container.pack(pady=20)
        
        # Bot√£o Testar (principal)
        btn_testar = ctk.CTkButton(
            btn_container,
            text="üß™ EXECUTAR TESTE",
            width=200,
            height=50,
            font=ctk.CTkFont(size=16, weight="bold"),
            fg_color="#27ae60",
            hover_color="#229954",
            corner_radius=12,
            command=executar_teste
        )
        btn_testar.pack(side="left", padx=(0, 15))
        
        # Bot√£o Limpar Resultado
        def limpar_resultado():
            resultado_text.delete("1.0", "end")
            resultado_text.insert("1.0", "üîÑ Aguardando teste...\n\nüìã Clique em 'Testar' para verificar a configura√ß√£o de email.\n\nüí° O sistema enviar√° um email de teste para o endere√ßo informado e mostrar√° o resultado aqui.")
        
        btn_limpar = ctk.CTkButton(
            btn_container,
            text="üóëÔ∏è LIMPAR",
            width=120,
            height=50,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#f39c12",
            hover_color="#e67e22",
            corner_radius=12,
            command=limpar_resultado
        )
        btn_limpar.pack(side="left", padx=(0, 15))
        
        # Bot√£o Fechar
        btn_fechar = ctk.CTkButton(
            btn_container,
            text="‚ùå FECHAR",
            width=120,
            height=50,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#e74c3c",
            hover_color="#c0392b",
            corner_radius=12,
            command=test_window.destroy
        )
        btn_fechar.pack(side="left")
        
        # Adicionar atalho de teclado Enter para testar
        def on_enter(event):
            executar_teste()
        
        email_entry.bind('<Return>', on_enter)
        test_window.bind('<Return>', on_enter)

    # === FUN√á√ïES OPERACIONAIS DA CENTRAL DE ALERTAS ===
    
    def enviar_alertas_por_prioridade(self, prioridade):
        """Enviar alertas espec√≠ficos por prioridade"""
        try:
            # Buscar est√°gios por prioridade
            if prioridade == "CRITICA":
                dias_limite = 3
                titulo = "üö® ALERTA CR√çTICO"
            elif prioridade == "ALTA":
                dias_limite = 7
                titulo = "‚ö†Ô∏è ALERTA URGENTE"
            else:
                dias_limite = 30
                titulo = "‚è∞ ALERTA PREVENTIVO"
            
            self.cursor.execute("""
                SELECT eo.id, est.nome, est.email, ori.nome, ori.email_institucional,
                       emp.nome, eo.data_termino,
                       JULIANDAY(eo.data_termino) - JULIANDAY('now') as dias_restantes
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.status != 'Conclu√≠do' 
                AND JULIANDAY(eo.data_termino) - JULIANDAY('now') <= ?
                AND JULIANDAY(eo.data_termino) - JULIANDAY('now') > 0
            """, (dias_limite,))
            
            estagios = self.cursor.fetchall()
            
            if not estagios:
                messagebox.showinfo("Informa√ß√£o", f"Nenhum est√°gio encontrado com prioridade {prioridade}")
                return
            
            # Confirmar envio
            resposta = messagebox.askyesno(
                "Confirmar Envio", 
                f"{titulo}\n\nEnviar alertas para {len(estagios)} est√°gio(s)?\n\nEsta a√ß√£o enviar√° emails para estudantes e orientadores."
            )
            
            if not resposta:
                return
            
            enviados = 0
            erros = []
            
            for estagio in estagios:
                estagio_id, estudante_nome, estudante_email, orientador_nome, orientador_email, empresa_nome, data_termino, dias_restantes = estagio
                
                try:
                    # Template personalizado por prioridade
                    if prioridade == "CRITICA":
                        assunto = f"üö® URGENTE: Est√°gio vence em {int(dias_restantes)} dias - {estudante_nome}"
                        mensagem_base = f"ATEN√á√ÉO URGENTE: O est√°gio de {estudante_nome} na {empresa_nome} vence em apenas {int(dias_restantes)} dias ({data_termino}). Provid√™ncias imediatas s√£o necess√°rias!"
                    elif prioridade == "ALTA":
                        assunto = f"‚ö†Ô∏è IMPORTANTE: Est√°gio vence em {int(dias_restantes)} dias - {estudante_nome}"
                        mensagem_base = f"IMPORTANTE: O est√°gio de {estudante_nome} na {empresa_nome} vence em {int(dias_restantes)} dias ({data_termino}). Verifique os relat√≥rios e documenta√ß√£o."
                    else:
                        assunto = f"‚è∞ LEMBRETE: Est√°gio vence em {int(dias_restantes)} dias - {estudante_nome}"
                        mensagem_base = f"LEMBRETE: O est√°gio de {estudante_nome} na {empresa_nome} vence em {int(dias_restantes)} dias ({data_termino}). Acompanhe o andamento."
                    
                    # Enviar para estudante
                    if estudante_email:
                        html_estudante = self.email_sender.criar_template_alerta_estudante(
                            estudante_nome, orientador_nome, empresa_nome, data_termino, dias_restantes
                        )[0]
                        resultado = self.email_sender.enviar_email(estudante_email, assunto, html_estudante)
                        if resultado["sucesso"]:
                            enviados += 1
                        else:
                            erros.append(f"Estudante {estudante_nome}: {resultado['erro']}")
                    
                    # Enviar para orientador
                    if orientador_email:
                        html_orientador = self.email_sender.criar_template_alerta_professor(
                            orientador_nome, estudante_nome, empresa_nome, data_termino, dias_restantes
                        )[0]
                        resultado = self.email_sender.enviar_email(orientador_email, assunto, html_orientador)
                        if resultado["sucesso"]:
                            enviados += 1
                        else:
                            erros.append(f"Orientador {orientador_nome}: {resultado['erro']}")
                    
                except Exception as e:
                    erros.append(f"Erro geral para {estudante_nome}: {str(e)}")
            
            # Mostrar resultado
            resultado_msg = f"{titulo} - Resultado do Envio\n\n"
            resultado_msg += f"‚úÖ Emails enviados: {enviados}\n"
            resultado_msg += f"üìä Est√°gios processados: {len(estagios)}\n"
            
            if erros:
                resultado_msg += f"\n‚ùå Erros encontrados ({len(erros)}):\n"
                for erro in erros[:3]:  # Mostrar apenas os primeiros 3
                    resultado_msg += f"‚Ä¢ {erro}\n"
                if len(erros) > 3:
                    resultado_msg += f"... e mais {len(erros) - 3} erros."
            
            messagebox.showinfo("Resultado", resultado_msg)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao enviar alertas: {str(e)}")
    
    def gerar_relatorio_diario(self):
        """Gerar relat√≥rio di√°rio operacional"""
        try:
            # Buscar dados para o relat√≥rio
            hoje = datetime.now().strftime("%Y-%m-%d")
            
            # Estat√≠sticas gerais
            self.cursor.execute("""
                SELECT 
                    COUNT(*) as total_estagios,
                    SUM(CASE WHEN status = 'Em Andamento' THEN 1 ELSE 0 END) as em_andamento,
                    SUM(CASE WHEN status = 'Conclu√≠do' THEN 1 ELSE 0 END) as concluidos,
                    SUM(CASE WHEN JULIANDAY(data_termino) - JULIANDAY('now') <= 30 AND status != 'Conclu√≠do' THEN 1 ELSE 0 END) as vencimento_30_dias
                FROM estagio_obrigatorio
            """)
            stats = self.cursor.fetchone()
            
            # Alertas ativos
            self.cursor.execute("SELECT COUNT(*) FROM alertas WHERE status = 'ATIVO'")
            alertas_ativos = self.cursor.fetchone()[0]
            
            # Criar relat√≥rio HTML
            html_relatorio = f"""
            <html>
            <head>
                <style>
                    body {{ font-family: Arial, sans-serif; margin: 20px; }}
                    .header {{ background: #1e3a8a; color: white; padding: 20px; text-align: center; border-radius: 10px; }}
                    .metrics {{ display: flex; justify-content: space-around; margin: 20px 0; }}
                    .metric {{ background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; min-width: 150px; }}
                    .metric h3 {{ margin: 0; font-size: 24px; color: #2563eb; }}
                    .metric p {{ margin: 5px 0 0 0; color: #6b7280; }}
                    .section {{ margin: 20px 0; padding: 15px; border-left: 4px solid #2563eb; background: #f8fafc; }}
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>üìä RELAT√ìRIO DI√ÅRIO OPERACIONAL</h1>
                    <h2>EstagioPro - {hoje}</h2>
                </div>
                
                <div class="metrics">
                    <div class="metric">
                        <h3>{stats[0]}</h3>
                        <p>Total de Est√°gios</p>
                    </div>
                    <div class="metric">
                        <h3>{stats[1]}</h3>
                        <p>Em Andamento</p>
                    </div>
                    <div class="metric">
                        <h3>{stats[2]}</h3>
                        <p>Conclu√≠dos</p>
                    </div>
                    <div class="metric">
                        <h3>{stats[3]}</h3>
                        <p>Vencem em 30 dias</p>
                    </div>
                    <div class="metric">
                        <h3>{alertas_ativos}</h3>
                        <p>Alertas Ativos</p>
                    </div>
                </div>
                
                <div class="section">
                    <h3>üìã Resumo Executivo</h3>
                    <p>‚Ä¢ <strong>Status Geral:</strong> Sistema operacional com {stats[0]} est√°gios cadastrados</p>
                    <p>‚Ä¢ <strong>Aten√ß√£o Requerida:</strong> {stats[3]} est√°gios pr√≥ximos do vencimento</p>
                    <p>‚Ä¢ <strong>Alertas Pendentes:</strong> {alertas_ativos} alertas ativos no sistema</p>
                    <p>‚Ä¢ <strong>Taxa de Conclus√£o:</strong> {(stats[2]/max(stats[0], 1)*100):.1f}% dos est√°gios conclu√≠dos</p>
                </div>
                
                <div class="section">
                    <h3>üéØ A√ß√µes Recomendadas</h3>
                    <p>‚Ä¢ Acompanhar est√°gios pr√≥ximos do vencimento</p>
                    <p>‚Ä¢ Verificar entrega de relat√≥rios parciais</p>
                    <p>‚Ä¢ Contatar estudantes e orientadores quando necess√°rio</p>
                    <p>‚Ä¢ Atualizar status dos est√°gios conclu√≠dos</p>
                </div>
                
                <hr>
                <p><small>Relat√≥rio gerado automaticamente pelo EstagioPro - UFVJM<br>
                Data/Hora: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}</small></p>
            </body>
            </html>
            """
            
            # Enviar por email para coordena√ß√£o
            resultado = self.email_sender.enviar_email(
                "estagio.contabeis@ufvjm.edu.br",
                f"üìä Relat√≥rio Di√°rio EstagioPro - {hoje}",
                html_relatorio
            )
            
            if resultado["sucesso"]:
                messagebox.showinfo("Sucesso", f"Relat√≥rio di√°rio enviado com sucesso!\n\nDestinat√°rio: estagio.contabeis@ufvjm.edu.br\nData: {hoje}")
            else:
                messagebox.showerror("Erro", f"Erro ao enviar relat√≥rio: {resultado['erro']}")
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {str(e)}")
    
    def atualizar_alertas_automaticos(self):
        """Atualizar e sincronizar alertas automaticamente"""
        try:
            # Executar verifica√ß√£o completa
            self.gerar_alertas_automaticos()
            
            # Atualizar interface
            self.show_central_alertas()
            
            messagebox.showinfo("Sucesso", "Alertas atualizados com sucesso!\n\n‚úÖ Verifica√ß√£o completa realizada\n‚úÖ Novos alertas gerados\n‚úÖ Interface atualizada")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao atualizar alertas: {str(e)}")
    
    def abrir_dashboard_completo(self):
        """Abrir dashboard completo em janela separada"""
        try:
            # Criar janela do dashboard
            dashboard_window = ctk.CTkToplevel(self.root)
            dashboard_window.title("üìä Dashboard Completo - EstagioPro")
            dashboard_window.geometry("1000x700")
            dashboard_window.transient(self.root)
            
            # Centralizar
            dashboard_window.update_idletasks()
            x = (dashboard_window.winfo_screenwidth() // 2) - (1000 // 2)
            y = (dashboard_window.winfo_screenheight() // 2) - (700 // 2)
            dashboard_window.geometry(f"1000x700+{x}+{y}")
            
            # Frame scrollable
            main_frame = ctk.CTkScrollableFrame(dashboard_window)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo
            ctk.CTkLabel(
                main_frame,
                text="üìä DASHBOARD EXECUTIVO COMPLETO",
                font=ctk.CTkFont(size=24, weight="bold"),
                text_color="#1e3a8a"
            ).pack(pady=(0, 20))
            
            # Buscar dados detalhados
            self.cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'Em Andamento' THEN 1 ELSE 0 END) as andamento,
                    SUM(CASE WHEN status = 'Conclu√≠do' THEN 1 ELSE 0 END) as concluidos,
                    SUM(CASE WHEN JULIANDAY(data_termino) - JULIANDAY('now') <= 3 AND status != 'Conclu√≠do' THEN 1 ELSE 0 END) as criticos,
                    SUM(CASE WHEN JULIANDAY(data_termino) - JULIANDAY('now') <= 7 AND status != 'Conclu√≠do' THEN 1 ELSE 0 END) as urgentes,
                    SUM(CASE WHEN JULIANDAY(data_termino) - JULIANDAY('now') <= 30 AND status != 'Conclu√≠do' THEN 1 ELSE 0 END) as proximos
                FROM estagio_obrigatorio
            """)
            dados = self.cursor.fetchone()
            
            # Criar gr√°ficos e m√©tricas detalhadas aqui...
            # (Implementa√ß√£o completa do dashboard seria muito extensa)
            
            ctk.CTkLabel(
                main_frame,
                text=f"üéØ M√âTRICAS PRINCIPAIS\n\n"
                     f"üìä Total de Est√°gios: {dados[0]}\n"
                     f"üîÑ Em Andamento: {dados[1]}\n"
                     f"‚úÖ Conclu√≠dos: {dados[2]}\n"
                     f"üö® Cr√≠ticos (‚â§3 dias): {dados[3]}\n"
                     f"‚ö†Ô∏è Urgentes (‚â§7 dias): {dados[4]}\n"
                     f"‚è∞ Pr√≥ximos (‚â§30 dias): {dados[5]}",
                font=ctk.CTkFont(size=16),
                justify="left"
            ).pack(pady=20)
            
            messagebox.showinfo("Dashboard", "Dashboard completo aberto em nova janela!")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir dashboard: {str(e)}")
    
    def gerenciar_templates(self):
        """Gerenciar templates de mensagens"""
        try:
            # Criar janela de templates
            templates_window = ctk.CTkToplevel(self.root)
            templates_window.title("‚öôÔ∏è Templates de Mensagem")
            templates_window.geometry("800x600")
            templates_window.transient(self.root)
            
            # Centralizar
            templates_window.update_idletasks()
            x = (templates_window.winfo_screenwidth() // 2) - (800 // 2)
            y = (templates_window.winfo_screenheight() // 2) - (600 // 2)
            templates_window.geometry(f"800x600+{x}+{y}")
            
            # Frame principal
            main_frame = ctk.CTkScrollableFrame(templates_window)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            ctk.CTkLabel(
                main_frame,
                text="‚öôÔ∏è GERENCIAMENTO DE TEMPLATES",
                font=ctk.CTkFont(size=20, weight="bold")
            ).pack(pady=(0, 20))
            
            # Templates dispon√≠veis
            templates_disponiveis = [
                ("üö® Cr√≠tico - Vencimento Iminente", "Template para alertas cr√≠ticos (‚â§3 dias)"),
                ("‚ö†Ô∏è Urgente - Vencimento Pr√≥ximo", "Template para alertas urgentes (‚â§7 dias)"),
                ("‚è∞ Preventivo - Acompanhamento", "Template para alertas preventivos (‚â§30 dias)"),
                ("üìß Relat√≥rio Di√°rio", "Template para relat√≥rio di√°rio da coordena√ß√£o"),
                ("üìã Lembrete de Relat√≥rio", "Template para lembrete de entrega de relat√≥rios")
            ]
            
            for i, (nome, descricao) in enumerate(templates_disponiveis):
                frame_template = ctk.CTkFrame(main_frame, fg_color="#f8f9fa")
                frame_template.pack(fill="x", pady=10)
                
                ctk.CTkLabel(frame_template, text=nome, font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=15, pady=(10, 5))
                ctk.CTkLabel(frame_template, text=descricao, font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(0, 10))
                
                btn_frame = ctk.CTkFrame(frame_template, fg_color="transparent")
                btn_frame.pack(fill="x", padx=15, pady=(0, 15))
                
                ctk.CTkButton(
                    btn_frame, 
                    text="‚úèÔ∏è Editar", 
                    width=100, 
                    height=30,
                    command=lambda idx=i: self.editar_template(idx, nome)
                ).pack(side="left", padx=(0, 10))
                
                ctk.CTkButton(
                    btn_frame, 
                    text="üëÅÔ∏è Visualizar", 
                    width=100, 
                    height=30,
                    command=lambda idx=i: self.visualizar_template(idx, nome)
                ).pack(side="left", padx=(0, 10))
                
                ctk.CTkButton(
                    btn_frame, 
                    text="üìß Testar", 
                    width=100, 
                    height=30,
                    command=lambda idx=i: self.testar_template(idx, nome)
                ).pack(side="left")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao abrir templates: {str(e)}")

    def editar_template(self, template_idx, template_nome):
        """Editar template espec√≠fico"""
        try:
            # Criar janela de edi√ß√£o
            edit_window = ctk.CTkToplevel(self.root)
            edit_window.title(f"‚úèÔ∏è Editar Template: {template_nome}")
            edit_window.geometry("800x600")
            edit_window.transient(self.root)
            edit_window.grab_set()
            
            # Centralizar
            edit_window.update_idletasks()
            x = (edit_window.winfo_screenwidth() // 2) - (800 // 2)
            y = (edit_window.winfo_screenheight() // 2) - (600 // 2)
            edit_window.geometry(f"800x600+{x}+{y}")
            
            # Frame principal
            main_frame = ctk.CTkFrame(edit_window, fg_color="transparent")
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo
            ctk.CTkLabel(
                main_frame,
                text=f"‚úèÔ∏è EDITOR DE TEMPLATE",
                font=ctk.CTkFont(size=20, weight="bold")
            ).pack(pady=(0, 20))
            
            ctk.CTkLabel(
                main_frame,
                text=f"Template: {template_nome}",
                font=ctk.CTkFont(size=16),
                text_color="#666"
            ).pack(pady=(0, 20))
            
            # Campo de assunto
            ctk.CTkLabel(main_frame, text="üìß Assunto do Email:", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
            
            assunto_entry = ctk.CTkEntry(main_frame, width=700, height=35,
                                       placeholder_text="Digite o assunto do template")
            assunto_entry.pack(pady=(0, 20))
            
            # Preencher com template padr√£o baseado no tipo
            templates_padroes = {
                0: "üö® URGENTE: Est√°gio vence em {dias_restantes} dias - {nome_estudante}",
                1: "‚ö†Ô∏è IMPORTANTE: Est√°gio vence em {dias_restantes} dias - {nome_estudante}",
                2: "‚è∞ LEMBRETE: Est√°gio vence em {dias_restantes} dias - {nome_estudante}",
                3: "üìä Relat√≥rio Di√°rio EstagioPro - {data}",
                4: "üìã Lembrete: Entrega de Relat√≥rio de Est√°gio - {nome_estudante}"
            }
            
            assunto_entry.insert(0, templates_padroes.get(template_idx, "Assunto do Template"))
            
            # Campo de conte√∫do
            ctk.CTkLabel(main_frame, text="üìù Conte√∫do do Template:", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
            
            conteudo_text = ctk.CTkTextbox(main_frame, height=300, font=ctk.CTkFont(size=12))
            conteudo_text.pack(fill="both", expand=True, pady=(0, 20))
            
            # Conte√∫do padr√£o baseado no tipo
            conteudos_padroes = {
                0: """Prezado(a) {nome_estudante},

ATEN√á√ÉO URGENTE: Seu est√°gio na empresa {nome_empresa} tem data de t√©rmino em {data_termino}, restando apenas {dias_restantes} dias.

PROVID√äNCIAS IMEDIATAS NECESS√ÅRIAS:
‚Ä¢ Verificar se todos os relat√≥rios foram entregues
‚Ä¢ Confirmar documenta√ß√£o final com a empresa
‚Ä¢ Contatar seu orientador {nome_orientador}

Em caso de d√∫vidas, entre em contato imediatamente.

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM""",
                
                1: """Prezado(a) {nome_estudante},

IMPORTANTE: Seu est√°gio na empresa {nome_empresa} tem data de t√©rmino em {data_termino}, restando {dias_restantes} dias.

A√á√ïES RECOMENDADAS:
‚Ä¢ Verificar entrega de relat√≥rios parciais
‚Ä¢ Confirmar documenta√ß√£o com a empresa
‚Ä¢ Manter contato com seu orientador {nome_orientador}

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM""",
                
                2: """Prezado(a) {nome_estudante},

LEMBRETE: Seu est√°gio na empresa {nome_empresa} tem data de t√©rmino em {data_termino} ({dias_restantes} dias).

ACOMPANHAMENTO:
‚Ä¢ Verifique o andamento do est√°gio
‚Ä¢ Mantenha os relat√≥rios em dia
‚Ä¢ Contate seu orientador se necess√°rio

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM""",
                
                3: """RELAT√ìRIO DI√ÅRIO OPERACIONAL - EstagioPro

Data: {data}

RESUMO EXECUTIVO:
‚Ä¢ Total de est√°gios: {total_estagios}
‚Ä¢ Em andamento: {em_andamento}
‚Ä¢ Pr√≥ximos do vencimento: {proximos_vencimento}
‚Ä¢ Alertas ativos: {alertas_ativos}

A√á√ïES RECOMENDADAS:
‚Ä¢ Acompanhar est√°gios pr√≥ximos do t√©rmino
‚Ä¢ Verificar entrega de relat√≥rios

Coordena√ß√£o de Est√°gios - UFVJM""",
                
                4: """Prezado(a) {nome_estudante},

LEMBRETE: Entrega de Relat√≥rio de Est√°gio

Seu relat√≥rio de est√°gio referente ao per√≠odo {periodo} deve ser entregue at√© {data_limite}.

INSTRU√á√ïES:
‚Ä¢ Seguir o modelo disponibilizado
‚Ä¢ Anexar documentos necess√°rios
‚Ä¢ Entregar ao orientador {nome_orientador}

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM"""
            }
            
            conteudo_text.insert("1.0", conteudos_padroes.get(template_idx, "Conte√∫do do template..."))
            
            # Bot√µes
            btn_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
            btn_frame.pack(fill="x", pady=(10, 0))
            
            def salvar_template():
                messagebox.showinfo("Sucesso", f"Template '{template_nome}' salvo com sucesso!\n\n(Funcionalidade de persist√™ncia ser√° implementada)")
                edit_window.destroy()
            
            ctk.CTkButton(
                btn_frame,
                text="üíæ Salvar",
                width=120,
                height=40,
                fg_color="#27ae60",
                hover_color="#229954",
                command=salvar_template
            ).pack(side="left", padx=(0, 10))
            
            ctk.CTkButton(
                btn_frame,
                text="‚ùå Cancelar",
                width=120,
                height=40,
                fg_color="#e74c3c",
                hover_color="#c0392b",
                command=edit_window.destroy
            ).pack(side="left")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao editar template: {str(e)}")

    def visualizar_template(self, template_idx, template_nome):
        """Visualizar template espec√≠fico"""
        try:
            # Criar janela de visualiza√ß√£o
            view_window = ctk.CTkToplevel(self.root)
            view_window.title(f"üëÅÔ∏è Visualizar Template: {template_nome}")
            view_window.geometry("700x500")
            view_window.transient(self.root)
            view_window.grab_set()
            
            # Centralizar
            view_window.update_idletasks()
            x = (view_window.winfo_screenwidth() // 2) - (700 // 2)
            y = (view_window.winfo_screenheight() // 2) - (500 // 2)
            view_window.geometry(f"700x500+{x}+{y}")
            
            # Frame principal
            main_frame = ctk.CTkScrollableFrame(view_window)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # T√≠tulo
            ctk.CTkLabel(
                main_frame,
                text=f"üëÅÔ∏è PREVIEW DO TEMPLATE",
                font=ctk.CTkFont(size=20, weight="bold")
            ).pack(pady=(0, 20))
            
            # Simular dados para preview
            dados_exemplo = {
                "nome_estudante": "Jo√£o Silva",
                "nome_orientador": "Prof. Dr. Maria Santos",
                "nome_empresa": "Empresa Exemplo Ltda",
                "data_termino": "15/12/2024",
                "dias_restantes": "7",
                "data": datetime.now().strftime("%d/%m/%Y"),
                "total_estagios": "25",
                "em_andamento": "18",
                "proximos_vencimento": "5",
                "alertas_ativos": "3"
            }
            
            # Templates de exemplo
            templates_preview = {
                0: f"""üö® URGENTE: Est√°gio vence em {dados_exemplo['dias_restantes']} dias - {dados_exemplo['nome_estudante']}

Prezado(a) {dados_exemplo['nome_estudante']},

ATEN√á√ÉO URGENTE: Seu est√°gio na empresa {dados_exemplo['nome_empresa']} tem data de t√©rmino em {dados_exemplo['data_termino']}, restando apenas {dados_exemplo['dias_restantes']} dias.

PROVID√äNCIAS IMEDIATAS NECESS√ÅRIAS:
‚Ä¢ Verificar se todos os relat√≥rios foram entregues
‚Ä¢ Confirmar documenta√ß√£o final com a empresa
‚Ä¢ Contatar seu orientador {dados_exemplo['nome_orientador']}

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM""",
                
                1: f"""‚ö†Ô∏è IMPORTANTE: Est√°gio vence em {dados_exemplo['dias_restantes']} dias - {dados_exemplo['nome_estudante']}

Prezado(a) {dados_exemplo['nome_estudante']},

IMPORTANTE: Seu est√°gio na empresa {dados_exemplo['nome_empresa']} tem data de t√©rmino em {dados_exemplo['data_termino']}, restando {dados_exemplo['dias_restantes']} dias.

A√á√ïES RECOMENDADAS:
‚Ä¢ Verificar entrega de relat√≥rios parciais
‚Ä¢ Confirmar documenta√ß√£o com a empresa
‚Ä¢ Manter contato com seu orientador {dados_exemplo['nome_orientador']}

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM""",
                
                2: f"""‚è∞ LEMBRETE: Est√°gio vence em {dados_exemplo['dias_restantes']} dias - {dados_exemplo['nome_estudante']}

Prezado(a) {dados_exemplo['nome_estudante']},

LEMBRETE: Seu est√°gio na empresa {dados_exemplo['nome_empresa']} tem data de t√©rmino em {dados_exemplo['data_termino']} ({dados_exemplo['dias_restantes']} dias).

ACOMPANHAMENTO:
‚Ä¢ Verifique o andamento do est√°gio
‚Ä¢ Mantenha os relat√≥rios em dia
‚Ä¢ Contate seu orientador se necess√°rio

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM""",
                
                3: f"""üìä Relat√≥rio Di√°rio EstagioPro - {dados_exemplo['data']}

RELAT√ìRIO DI√ÅRIO OPERACIONAL - EstagioPro

Data: {dados_exemplo['data']}

RESUMO EXECUTIVO:
‚Ä¢ Total de est√°gios: {dados_exemplo['total_estagios']}
‚Ä¢ Em andamento: {dados_exemplo['em_andamento']}
‚Ä¢ Pr√≥ximos do vencimento: {dados_exemplo['proximos_vencimento']}
‚Ä¢ Alertas ativos: {dados_exemplo['alertas_ativos']}

A√á√ïES RECOMENDADAS:
‚Ä¢ Acompanhar est√°gios pr√≥ximos do t√©rmino
‚Ä¢ Verificar entrega de relat√≥rios

Coordena√ß√£o de Est√°gios - UFVJM""",
                
                4: f"""üìã Lembrete: Entrega de Relat√≥rio de Est√°gio - {dados_exemplo['nome_estudante']}

Prezado(a) {dados_exemplo['nome_estudante']},

LEMBRETE: Entrega de Relat√≥rio de Est√°gio

Seu relat√≥rio de est√°gio referente ao per√≠odo atual deve ser entregue conforme cronograma.

INSTRU√á√ïES:
‚Ä¢ Seguir o modelo disponibilizado
‚Ä¢ Anexar documentos necess√°rios
‚Ä¢ Entregar ao orientador {dados_exemplo['nome_orientador']}

Atenciosamente,
Coordena√ß√£o de Est√°gios - UFVJM"""
            }
            
            # Mostrar preview
            preview_frame = ctk.CTkFrame(main_frame, fg_color="#f8f9fa")
            preview_frame.pack(fill="both", expand=True, pady=(0, 20))
            
            preview_text = ctk.CTkTextbox(preview_frame, height=350, font=ctk.CTkFont(size=12))
            preview_text.pack(fill="both", expand=True, padx=15, pady=15)
            
            preview_content = templates_preview.get(template_idx, "Template n√£o encontrado")
            preview_text.insert("1.0", preview_content)
            preview_text.configure(state="disabled")  # Somente leitura
            
            # Bot√£o fechar
            ctk.CTkButton(
                main_frame,
                text="‚ùå Fechar",
                width=120,
                height=40,
                fg_color="#6c757d",
                hover_color="#5a6268",
                command=view_window.destroy
            ).pack(pady=10)
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao visualizar template: {str(e)}")

    def testar_template(self, template_idx, template_nome):
        """Testar envio do template espec√≠fico"""
        try:
            # Criar janela de teste com tamanho otimizado
            test_window = ctk.CTkToplevel(self.root)
            test_window.title(f"üìß Testar Template: {template_nome}")
            test_window.geometry("750x600")  # Aumentei o tamanho
            test_window.transient(self.root)
            test_window.grab_set()
            test_window.resizable(True, True)  # Permitir redimensionamento
            
            # Centralizar
            test_window.update_idletasks()
            x = (test_window.winfo_screenwidth() // 2) - (750 // 2)
            y = (test_window.winfo_screenheight() // 2) - (600 // 2)
            test_window.geometry(f"750x600+{x}+{y}")
            
            # Frame principal scrollable para garantir que tudo apare√ßa
            main_frame = ctk.CTkScrollableFrame(test_window, fg_color="transparent")
            main_frame.pack(fill="both", expand=True, padx=15, pady=15)
            
            # === CABE√áALHO ===
            header_frame = ctk.CTkFrame(main_frame, fg_color="#1e3a8a", corner_radius=12)
            header_frame.pack(fill="x", pady=(0, 20))
            
            ctk.CTkLabel(
                header_frame,
                text="üìß TESTE DE TEMPLATE",
                font=ctk.CTkFont(size=22, weight="bold"),
                text_color="white"
            ).pack(pady=(15, 5))
            
            ctk.CTkLabel(
                header_frame,
                text=f"Template: {template_nome}",
                font=ctk.CTkFont(size=16),
                text_color="#E3F2FD"
            ).pack(pady=(0, 15))
            
            # === CONFIGURA√á√ÉO DO TESTE ===
            config_frame = ctk.CTkFrame(main_frame, fg_color="#E3F2FD", corner_radius=10)
            config_frame.pack(fill="x", pady=(0, 20))
            
            ctk.CTkLabel(config_frame, text="‚öôÔ∏è CONFIGURA√á√ÉO DO TESTE", 
                        font=ctk.CTkFont(size=16, weight="bold"),
                        text_color="#1565C0").pack(pady=(15, 10))
            
            # Campo de email com layout melhorado
            email_container = ctk.CTkFrame(config_frame, fg_color="transparent")
            email_container.pack(fill="x", padx=20, pady=(0, 15))
            
            ctk.CTkLabel(email_container, text="üìß Email de destino para teste:", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 8))
            
            email_entry = ctk.CTkEntry(
                email_container, 
                width=600, 
                height=40,
                placeholder_text="Digite o email que receber√° o teste (ex: seu.email@ufvjm.edu.br)",
                font=ctk.CTkFont(size=14)
            )
            email_entry.pack(fill="x", pady=(0, 10))
            
            # Informa√ß√µes sobre o teste
            info_frame = ctk.CTkFrame(config_frame, fg_color="#F0F9FF")
            info_frame.pack(fill="x", padx=20, pady=(0, 15))
            
            ctk.CTkLabel(info_frame, text="‚ÑπÔ∏è Informa√ß√µes do Teste:", 
                        font=ctk.CTkFont(size=13, weight="bold")).pack(anchor="w", padx=15, pady=(10, 5))
            
            info_text = """‚Ä¢ O email ser√° enviado usando as configura√ß√µes atuais do sistema
‚Ä¢ Verifique sua caixa de entrada e spam ap√≥s o envio
‚Ä¢ O teste usa um template simplificado para valida√ß√£o
‚Ä¢ Tempo estimado de entrega: 1-2 minutos"""
            
            ctk.CTkLabel(info_frame, text=info_text, 
                        font=ctk.CTkFont(size=12), 
                        justify="left").pack(anchor="w", padx=15, pady=(0, 10))
            
            # === RESULTADO DO TESTE ===
            resultado_frame = ctk.CTkFrame(main_frame, fg_color="#FFEBEE", corner_radius=10)
            resultado_frame.pack(fill="x", pady=(0, 20))
            
            ctk.CTkLabel(resultado_frame, text="üìä RESULTADO DO TESTE", 
                        font=ctk.CTkFont(size=16, weight="bold"),
                        text_color="#C62828").pack(pady=(15, 10))
            
            resultado_text = ctk.CTkTextbox(
                resultado_frame, 
                height=200,  # Aumentei a altura
                font=ctk.CTkFont(size=12),
                corner_radius=8
            )
            resultado_text.pack(fill="x", padx=20, pady=(0, 20))
            resultado_text.insert("1.0", "üîÑ Aguardando teste...\n\nüìã Clique em 'EXECUTAR TESTE' para enviar o template.\n\nüí° O resultado aparecer√° aqui com detalhes do envio.")
            
            def enviar_teste():
                email_teste = email_entry.get().strip()
                if not email_teste:
                    messagebox.showerror("Erro", "Digite um email para teste!")
                    return
                
                resultado_text.delete("1.0", "end")
                resultado_text.insert("1.0", f"üîÑ Enviando template '{template_nome}' para {email_teste}...\n\n")
                test_window.update()
                
                try:
                    # Simular envio (usar template real aqui)
                    assunto = f"üß™ TESTE - {template_nome}"
                    corpo = f"""
                    <html>
                    <body style="font-family: Arial, sans-serif;">
                        <h2>üß™ Teste de Template - EstagioPro</h2>
                        <p><strong>Template:</strong> {template_nome}</p>
                        <p>Este √© um email de teste do template selecionado.</p>
                        <hr>
                        <p><small>Sistema EstagioPro - UFVJM</small></p>
                    </body>
                    </html>
                    """
                    
                    resultado = self.email_sender.enviar_email(email_teste, assunto, corpo)
                    
                    if resultado["sucesso"]:
                        resultado_text.insert("end", "‚úÖ TESTE ENVIADO COM SUCESSO!\n\n")
                        resultado_text.insert("end", f"üìß Email enviado para: {email_teste}\n")
                        resultado_text.insert("end", f"üìã Template testado: {template_nome}\n")
                        resultado_text.insert("end", "üéâ Verifique sua caixa de entrada!")
                    else:
                        resultado_text.insert("end", "‚ùå FALHA NO TESTE!\n\n")
                        resultado_text.insert("end", f"üìß Erro ao enviar para: {email_teste}\n")
                        resultado_text.insert("end", f"üí¨ Detalhes: {resultado['erro']}")
                        
                except Exception as e:
                    resultado_text.insert("end", f"‚ùå ERRO INESPERADO!\n\n{str(e)}")
            
            # === BOT√ïES DE A√á√ÉO ===
            buttons_frame = ctk.CTkFrame(main_frame, fg_color="#F5F5F5", corner_radius=10)
            buttons_frame.pack(fill="x", pady=(0, 10))
            
            # Container para centralizar bot√µes
            btn_container = ctk.CTkFrame(buttons_frame, fg_color="transparent")
            btn_container.pack(pady=20)
            
            # Bot√£o Executar Teste (principal)
            btn_executar = ctk.CTkButton(
                btn_container,
                text="üìß EXECUTAR TESTE",
                width=200,
                height=50,
                font=ctk.CTkFont(size=16, weight="bold"),
                fg_color="#27ae60",
                hover_color="#229954",
                corner_radius=12,
                command=enviar_teste
            )
            btn_executar.pack(side="left", padx=(0, 15))
            
            # Bot√£o Limpar Resultado
            def limpar_resultado_teste():
                resultado_text.delete("1.0", "end")
                resultado_text.insert("1.0", "üîÑ Aguardando teste...\n\nüìã Clique em 'EXECUTAR TESTE' para enviar o template.\n\nüí° O resultado aparecer√° aqui com detalhes do envio.")
                email_entry.delete(0, "end")
            
            btn_limpar = ctk.CTkButton(
                btn_container,
                text="üóëÔ∏è LIMPAR",
                width=120,
                height=50,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#f39c12",
                hover_color="#e67e22",
                corner_radius=12,
                command=limpar_resultado_teste
            )
            btn_limpar.pack(side="left", padx=(0, 15))
            
            # Bot√£o Fechar
            btn_fechar = ctk.CTkButton(
                btn_container,
                text="‚ùå FECHAR",
                width=120,
                height=50,
                font=ctk.CTkFont(size=14, weight="bold"),
                fg_color="#e74c3c",
                hover_color="#c0392b",
                corner_radius=12,
                command=test_window.destroy
            )
            btn_fechar.pack(side="left")
            
            # Adicionar atalho de teclado Enter para executar teste
            def on_enter_test(event):
                enviar_teste()
            
            email_entry.bind('<Return>', on_enter_test)
            test_window.bind('<Return>', on_enter_test)
            
            # Focar no campo de email
            email_entry.focus()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao testar template: {str(e)}")

    def gerar_alertas_automaticos(self):
        """Gerar alertas autom√°ticos baseados em regras do sistema"""
        try:
            # Buscar configura√ß√£o de dias de aviso
            self.cursor.execute("SELECT valor FROM configuracoes WHERE chave = 'dias_aviso_termino'")
            result = self.cursor.fetchone()
            dias_aviso = int(result[0]) if result else 30
            
            # Alertas para est√°gios pr√≥ximos do vencimento
            from datetime import datetime, timedelta
            data_limite = (datetime.now() + timedelta(days=dias_aviso)).strftime("%Y-%m-%d")
            
            # Verificar est√°gios obrigat√≥rios pr√≥ximos do vencimento com informa√ß√µes completas
            self.cursor.execute("""
                SELECT eo.id, est.nome, eo.data_termino, est.id as estudante_id,
                       ori.nome as orientador_nome, emp.nome as empresa_nome,
                       JULIANDAY(eo.data_termino) - JULIANDAY('now') as dias_restantes,
                       est.telefone as estudante_telefone, ori.telefone as orientador_telefone
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.data_termino <= ? AND eo.status != 'Conclu√≠do'
                AND NOT EXISTS (
                    SELECT 1 FROM alertas a 
                    WHERE a.estagio_id = eo.id 
                    AND a.tipo = 'PRAZO_WHATSAPP' 
                    AND a.status = 'ATIVO'
                    AND a.data_criacao >= date('now', '-7 days')
                )
                ORDER BY eo.data_termino ASC
            """, (data_limite,))
            
            estagios_vencendo = self.cursor.fetchall()
            
            for estagio in estagios_vencendo:
                estagio_id, estudante_nome, data_termino, estudante_id, orientador_nome, empresa_nome, dias_restantes, estudante_telefone, orientador_telefone = estagio
                
                # Determinar prioridade baseada nos dias restantes
                if dias_restantes <= 3:
                    prioridade = "CRITICA"
                    emoji_prioridade = "üö®"
                elif dias_restantes <= 7:
                    prioridade = "ALTA"
                    emoji_prioridade = "‚ö†Ô∏è"
                else:
                    prioridade = "MEDIA"
                    emoji_prioridade = "‚è∞"
                
                # Criar mensagem detalhada
                titulo = f"{emoji_prioridade} Est√°gio pr√≥ximo do t√©rmino - {estudante_nome}"
                
                if dias_restantes <= 0:
                    mensagem = f"üö® URGENTE: O est√°gio obrigat√≥rio do estudante {estudante_nome} na empresa {empresa_nome} J√Å VENCEU (t√©rmino em {data_termino})! Provid√™ncias imediatas s√£o necess√°rias."
                elif dias_restantes <= 3:
                    mensagem = f"üö® CR√çTICO: O est√°gio obrigat√≥rio do estudante {estudante_nome} na empresa {empresa_nome} termina em {data_termino} (apenas {int(dias_restantes)} dias restantes)!"
                else:
                    mensagem = f"‚ö†Ô∏è O est√°gio obrigat√≥rio do estudante {estudante_nome} na empresa {empresa_nome} tem data de t√©rmino em {data_termino} (aproximadamente {int(dias_restantes)} dias restantes). Verifique se todos os relat√≥rios foram entregues."
                
                # Adicionar informa√ß√µes de contato
                if estudante_telefone:
                    mensagem += f"\nüì± Telefone do estudante: {estudante_telefone}"
                if orientador_telefone:
                    mensagem += f"\nüì± Telefone do orientador: {orientador_telefone}"
                
                # Inserir alerta com tipo espec√≠fico para WhatsApp
                self.cursor.execute("""
                    INSERT INTO alertas (tipo, titulo, mensagem, prioridade, data_criacao, data_vencimento, estagio_id, estudante_id, whatsapp_enviado)
                    VALUES ('PRAZO_WHATSAPP', ?, ?, ?, ?, ?, ?, ?, 0)
                """, (titulo, mensagem, prioridade, datetime.now().strftime("%Y-%m-%d %H:%M"), data_termino, estagio_id, estudante_id))
                
                print(f"‚úÖ Alerta de vencimento criado: {estudante_nome} (Prioridade: {prioridade})")
            
            # Alertas para relat√≥rios em atraso
            self.cursor.execute("""
                SELECT eo.id, est.nome, eo.data_inicio, est.id as estudante_id,
                       ori.nome as orientador_nome, emp.nome as empresa_nome,
                       JULIANDAY('now') - JULIANDAY(eo.data_inicio) as dias_desde_inicio,
                       est.telefone as estudante_telefone, ori.telefone as orientador_telefone
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.status != 'Conclu√≠do'
                AND (
                    SELECT COUNT(*) FROM relatorios_anexados ra 
                    WHERE ra.estagio_id = eo.id
                ) = 0
                AND JULIANDAY('now') - JULIANDAY(eo.data_inicio) > 30
                AND NOT EXISTS (
                    SELECT 1 FROM alertas a 
                    WHERE a.estagio_id = eo.id 
                    AND a.tipo = 'SEM_RELATORIO' 
                    AND a.status = 'ATIVO'
                    AND a.data_criacao >= date('now', '-7 days')
                )
            """)
            
            estagios_sem_relatorio = self.cursor.fetchall()
            
            for estagio in estagios_sem_relatorio:
                estagio_id, estudante_nome, data_inicio, estudante_id, orientador_nome, empresa_nome, dias_desde_inicio, estudante_telefone, orientador_telefone = estagio
                
                titulo = f"üìã Relat√≥rios pendentes - {estudante_nome}"
                mensagem = f"O estudante {estudante_nome} n√£o anexou nenhum relat√≥rio do est√°gio na empresa {empresa_nome}. Est√°gio iniciado em {data_inicio} ({int(dias_desde_inicio)} dias atr√°s)."
                
                # Adicionar informa√ß√µes de contato
                if estudante_telefone:
                    mensagem += f"\nüì± Telefone do estudante: {estudante_telefone}"
                if orientador_telefone:
                    mensagem += f"\nüì± Telefone do orientador: {orientador_telefone}"
                
                self.cursor.execute("""
                    INSERT INTO alertas (tipo, titulo, mensagem, prioridade, data_criacao, estagio_id, estudante_id, whatsapp_enviado)
                    VALUES ('SEM_RELATORIO', ?, ?, 'MEDIA', ?, ?, ?, 0)
                """, (titulo, mensagem, datetime.now().strftime("%Y-%m-%d %H:%M"), estagio_id, estudante_id))
                
                print(f"‚úÖ Alerta de relat√≥rios criado: {estudante_nome}")
            
            self.conn.commit()
            
            # Resumo dos alertas criados
            if estagios_vencendo:
                print(f"üìä {len(estagios_vencendo)} alertas de est√°gios em vencimento criados")
            if estagios_sem_relatorio:
                print(f"üìä {len(estagios_sem_relatorio)} alertas de relat√≥rios pendentes criados")
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar alertas autom√°ticos: {e}")

    def carregar_alertas(self):
        """Carregar e exibir alertas"""
        # Limpar frame de alertas
        for widget in self.alertas_frame.winfo_children():
            widget.destroy()
        
        # Construir query com filtros
        query = """
            SELECT a.id, a.tipo, a.titulo, a.mensagem, a.prioridade, a.data_criacao, 
                   a.data_vencimento, a.status, a.lido, est.nome as estudante_nome
            FROM alertas a
            LEFT JOIN estudantes est ON a.estudante_id = est.id
            WHERE 1=1
        """
        params = []
        
        # Aplicar filtros
        if self.filtro_prioridade.get() != "Todas":
            query += " AND a.prioridade = ?"
            params.append(self.filtro_prioridade.get())
        
        if self.filtro_status.get() != "Todos":
            query += " AND a.status = ?"
            params.append(self.filtro_status.get())
        
        if self.filtro_tipo.get() != "Todos":
            query += " AND a.tipo = ?"
            params.append(self.filtro_tipo.get())
        
        query += " ORDER BY a.lido ASC, a.prioridade DESC, a.data_criacao DESC"
        
        self.cursor.execute(query, params)
        alertas = self.cursor.fetchall()
        
        if not alertas:
            # Mensagem quando n√£o h√° alertas
            no_alerts_frame = ctk.CTkFrame(self.alertas_frame, fg_color="#e8f5e8", corner_radius=10)
            no_alerts_frame.pack(fill="x", pady=10)
            
            ctk.CTkLabel(
                no_alerts_frame,
                text="‚úÖ Nenhum alerta encontrado com os filtros selecionados!",
                font=ctk.CTkFont(size=16, weight="bold"),
                text_color="#27ae60"
            ).pack(pady=20)
        else:
            # Exibir alertas
            for alerta in alertas:
                self.criar_card_alerta(alerta)

    def criar_card_alerta(self, alerta):
        """Criar card visual para um alerta"""
        alerta_id, tipo, titulo, mensagem, prioridade, data_criacao, data_vencimento, status, lido, estudante_nome = alerta
        
        # Definir cores por prioridade
        cores_prioridade = {
            "ALTA": {"bg": "#ffebee", "border": "#e74c3c", "icon": "üö®"},
            "MEDIA": {"bg": "#fff3e0", "border": "#f39c12", "icon": "‚ö†Ô∏è"},
            "BAIXA": {"bg": "#e8f5e8", "border": "#27ae60", "icon": "‚ÑπÔ∏è"}
        }
        
        cor_config = cores_prioridade.get(prioridade, cores_prioridade["MEDIA"])
        
        # Frame do alerta
        alerta_frame = ctk.CTkFrame(
            self.alertas_frame, 
            fg_color=cor_config["bg"] if not lido else "#f8f9fa",
            corner_radius=10
        )
        alerta_frame.pack(fill="x", pady=5, padx=5)
        
        # Header do alerta
        header_frame = ctk.CTkFrame(alerta_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=15, pady=(15, 5))
        
        # √çcone e t√≠tulo
        title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_frame.pack(side="left", fill="x", expand=True)
        
        titulo_completo = f"{cor_config['icon']} {titulo}"
        if not lido:
            titulo_completo = f"üî¥ {titulo_completo}"
        
        ctk.CTkLabel(
            title_frame,
            text=titulo_completo,
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=cor_config["border"],
            anchor="w"
        ).pack(side="left")
        
        # Status e prioridade
        status_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        status_frame.pack(side="right")
        
        # Badge de prioridade
        badge_prioridade = ctk.CTkLabel(
            status_frame,
            text=prioridade,
            font=ctk.CTkFont(size=10, weight="bold"),
            text_color="white",
            fg_color=cor_config["border"],
            corner_radius=5,
            width=60,
            height=20
        )
        badge_prioridade.pack(side="right", padx=(5, 0))
        
        # Conte√∫do do alerta
        content_frame = ctk.CTkFrame(alerta_frame, fg_color="transparent")
        content_frame.pack(fill="x", padx=15, pady=(0, 10))
        
        # Mensagem
        ctk.CTkLabel(
            content_frame,
            text=mensagem,
            font=ctk.CTkFont(size=12),
            text_color=self.cor_texto,
            anchor="w",
            justify="left",
            wraplength=800
        ).pack(anchor="w", pady=(0, 5))
        
        # Informa√ß√µes adicionais
        info_text = f"üìÖ Criado: {data_criacao}"
        if data_vencimento:
            info_text += f" | ‚è∞ Vencimento: {data_vencimento}"
        if estudante_nome:
            info_text += f" | üë§ Estudante: {estudante_nome}"
        
        ctk.CTkLabel(
            content_frame,
            text=info_text,
            font=ctk.CTkFont(size=10),
            text_color="#6c757d",
            anchor="w"
        ).pack(anchor="w", pady=(0, 5))
        
        # Bot√µes de a√ß√£o
        actions_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        actions_frame.pack(fill="x", pady=(5, 0))
        
        if not lido:
            btn_marcar_lido = ctk.CTkButton(
                actions_frame,
                text="‚úÖ Marcar como Lido",
                width=120,
                height=25,
                font=ctk.CTkFont(size=10),
                fg_color="#27ae60",
                hover_color="#229954",
                command=lambda: self.marcar_alerta_lido(alerta_id)
            )
            btn_marcar_lido.pack(side="left", padx=(0, 5))
        
        # Bot√µes de WhatsApp separados para aluno e professor
        if alerta[8] and estudante_nome:  # Se tem estagio_id e nome do estudante
            # Bot√£o WhatsApp para Aluno
            btn_whatsapp_aluno = ctk.CTkButton(
                actions_frame,
                text="üì± Aluno",
                width=80,
                height=25,
                font=ctk.CTkFont(size=10),
                fg_color="#25d366",
                hover_color="#128c7e",
                command=lambda: self.enviar_whatsapp_alerta_aluno(alerta_id)
            )
            btn_whatsapp_aluno.pack(side="left", padx=(0, 5))
            
            # Bot√£o WhatsApp para Professor
            btn_whatsapp_professor = ctk.CTkButton(
                actions_frame,
                text="üì± Prof.",
                width=80,
                height=25,
                font=ctk.CTkFont(size=10),
                fg_color="#1e88e5",
                hover_color="#1565c0",
                command=lambda: self.enviar_whatsapp_alerta_professor(alerta_id)
            )
            btn_whatsapp_professor.pack(side="left", padx=(0, 5))
        
        if status == "ATIVO":
            btn_resolver = ctk.CTkButton(
                actions_frame,
                text="‚úÖ Resolver",
                width=80,
                height=25,
                font=ctk.CTkFont(size=10),
                fg_color="#3498db",
                hover_color="#2980b9",
                command=lambda: self.resolver_alerta_completo(alerta_id, titulo)
            )
            btn_resolver.pack(side="left", padx=(0, 5))
        
        btn_excluir = ctk.CTkButton(
            actions_frame,
            text="üóëÔ∏è Excluir",
            width=70,
            height=25,
            font=ctk.CTkFont(size=10),
            fg_color="#e74c3c",
            hover_color="#c0392b",
            command=lambda: self.excluir_alerta(alerta_id)
        )
        btn_excluir.pack(side="left")

    def filtrar_alertas(self, *args):
        """Filtrar alertas com base nos comboboxes"""
        self.carregar_alertas()

    def marcar_alerta_lido(self, alerta_id):
        """Marcar alerta espec√≠fico como lido"""
        self.cursor.execute("UPDATE alertas SET lido = 1 WHERE id = ?", (alerta_id,))
        self.conn.commit()
        self.carregar_alertas()

    def marcar_todos_lidos(self):
        """Marcar todos os alertas como lidos"""
        self.cursor.execute("UPDATE alertas SET lido = 1 WHERE status = 'ATIVO'")
        self.conn.commit()
        messagebox.showinfo("Sucesso", "Todos os alertas foram marcados como lidos!")
        self.carregar_alertas()

    def resolver_alerta(self, alerta_id):
        """Marcar alerta como resolvido"""
        self.cursor.execute("UPDATE alertas SET status = 'RESOLVIDO', lido = 1 WHERE id = ?", (alerta_id,))
        self.conn.commit()
        messagebox.showinfo("Sucesso", "Alerta marcado como resolvido!")
        self.carregar_alertas()

    def resolver_alerta_completo(self, alerta_id, titulo_alerta):
        """Resolver alerta com confirma√ß√£o e feedback"""
        if messagebox.askyesno("Resolver Alerta", 
                              f"Confirma que o problema do alerta foi resolvido?\n\n"
                              f"Alerta: {titulo_alerta}\n\n"
                              f"Ao clicar em 'Sim', o alerta ser√° marcado como RESOLVIDO e "
                              f"ser√° subentendido que a situa√ß√£o foi solucionada."):
            
            # Marcar como resolvido e lido
            self.cursor.execute("""
                UPDATE alertas 
                SET status = 'RESOLVIDO', lido = 1, data_resolucao = ?
                WHERE id = ?
            """, (datetime.now().strftime("%Y-%m-%d %H:%M"), alerta_id))
            
            self.conn.commit()
            
            messagebox.showinfo("Sucesso", 
                               "‚úÖ Alerta resolvido com sucesso!\n\n"
                               "O problema foi marcado como solucionado e "
                               "o alerta n√£o aparecer√° mais nos pendentes.")
            
            self.carregar_alertas()

    def enviar_whatsapp_alerta_aluno(self, alerta_id):
        """Enviar WhatsApp para o aluno do alerta"""
        if not self.whatsapp_api:
            messagebox.showerror("Erro", "API do WhatsApp n√£o est√° configurada!\n\n"
                                        "Configure nas Configura√ß√µes do sistema.")
            return
        
        # Buscar dados do alerta e do estudante
        self.cursor.execute("""
            SELECT a.titulo, a.mensagem, a.estagio_id, est.telefone, est.nome,
                   eo.data_termino, emp.nome as empresa_nome, ori.nome as orientador_nome
            FROM alertas a
            LEFT JOIN estagio_obrigatorio eo ON a.estagio_id = eo.id
            LEFT JOIN estudantes est ON eo.estudante_id = est.id
            LEFT JOIN empresas emp ON eo.empresa_id = emp.id
            LEFT JOIN orientadores ori ON eo.orientador_id = ori.id
            WHERE a.id = ?
        """, (alerta_id,))
        
        dados_alerta = self.cursor.fetchone()
        
        if not dados_alerta:
            messagebox.showerror("Erro", "Dados do alerta n√£o encontrados!")
            return
        
        titulo, mensagem_alerta, estagio_id, telefone, nome_estudante, data_termino, empresa_nome, orientador_nome = dados_alerta
        
        if not telefone:
            messagebox.showerror("Erro", f"Telefone do estudante {nome_estudante} n√£o cadastrado!")
            return
        
        # Criar janela de envio de WhatsApp para o aluno
        self.abrir_janela_whatsapp_aluno(alerta_id, telefone, nome_estudante, titulo, mensagem_alerta, 
                                        data_termino, empresa_nome, orientador_nome)

    def enviar_whatsapp_alerta_professor(self, alerta_id):
        """Enviar WhatsApp para o professor orientador do alerta"""
        if not self.whatsapp_api:
            messagebox.showerror("Erro", "API do WhatsApp n√£o est√° configurada!\n\n"
                                        "Configure nas Configura√ß√µes do sistema.")
            return
        
        # Buscar dados do alerta e do professor
        self.cursor.execute("""
            SELECT a.titulo, a.mensagem, a.estagio_id, ori.telefone, ori.nome,
                   est.nome as estudante_nome, eo.data_termino, emp.nome as empresa_nome
            FROM alertas a
            LEFT JOIN estagio_obrigatorio eo ON a.estagio_id = eo.id
            LEFT JOIN estudantes est ON eo.estudante_id = est.id
            LEFT JOIN empresas emp ON eo.empresa_id = emp.id
            LEFT JOIN orientadores ori ON eo.orientador_id = ori.id
            WHERE a.id = ?
        """, (alerta_id,))
        
        dados_alerta = self.cursor.fetchone()
        
        if not dados_alerta:
            messagebox.showerror("Erro", "Dados do alerta n√£o encontrados!")
            return
        
        titulo, mensagem_alerta, estagio_id, telefone_professor, nome_professor, estudante_nome, data_termino, empresa_nome = dados_alerta
        
        if not telefone_professor:
            messagebox.showerror("Erro", f"Telefone do professor {nome_professor} n√£o cadastrado!")
            return
        
        # Criar janela de envio de WhatsApp para o professor
        self.abrir_janela_whatsapp_professor(alerta_id, telefone_professor, nome_professor, titulo, mensagem_alerta, 
                                           estudante_nome, data_termino, empresa_nome)

    def abrir_janela_whatsapp(self, alerta_id, telefone, nome_estudante, titulo_alerta, 
                             mensagem_alerta, data_termino, empresa_nome, orientador_nome):
        """Abrir janela para envio personalizado de WhatsApp"""
        
        # Criar janela modal
        whats_window = ctk.CTkToplevel(self.root)
        whats_window.title("üì± Enviar WhatsApp - EstagioPro")
        whats_window.geometry("600x500")
        whats_window.transient(self.root)
        whats_window.grab_set()
        
        # Centralizar janela
        whats_window.update_idletasks()
        x = (whats_window.winfo_screenwidth() // 2) - (600 // 2)
        y = (whats_window.winfo_screenheight() // 2) - (500 // 2)
        whats_window.geometry(f"600x500+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(whats_window, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üì± Enviar Mensagem WhatsApp",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#25d366"
        )
        title_label.pack(pady=(0, 20))
        
        # Informa√ß√µes do destinat√°rio
        info_frame = ctk.CTkFrame(main_frame, fg_color="#f8f9fa")
        info_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(info_frame, text=f"üë§ Destinat√°rio: {nome_estudante}", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=15, pady=(10, 5))
        ctk.CTkLabel(info_frame, text=f"üìû Telefone: {telefone}", 
                    font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(0, 5))
        ctk.CTkLabel(info_frame, text=f"üö® Alerta: {titulo_alerta}", 
                    font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(0, 10))
        
        # √Årea de mensagem
        ctk.CTkLabel(main_frame, text="‚úèÔ∏è Mensagem:", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        
        # Mensagem pr√©-definida
        mensagem_padrao = f"""üéì *EstagioPro - Comunicado Importante*

Ol√° {nome_estudante}!

üìã *ALERTA DO SISTEMA:*
{titulo_alerta}

üìù *Detalhes:*
{mensagem_alerta}"""
        
        if data_termino and empresa_nome:
            mensagem_padrao += f"""

üè¢ *Empresa:* {empresa_nome}
üìÖ *Data de t√©rmino:* {data_termino}"""
        
        if orientador_nome:
            mensagem_padrao += f"""
üë®‚Äçüè´ *Orientador:* Prof. {orientador_nome}"""
        
        mensagem_padrao += """

Por favor, tome as provid√™ncias necess√°rias o quanto antes.

_Sistema EstagioPro - UFVJM_
_Ci√™ncias Cont√°beis_"""
        
        # Campo de texto para mensagem
        texto_mensagem = ctk.CTkTextbox(main_frame, height=200, font=ctk.CTkFont(size=12))
        texto_mensagem.pack(fill="both", expand=True, pady=(0, 15))
        texto_mensagem.insert("1.0", mensagem_padrao)
        
        # Frame de bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        def enviar_mensagem():
            mensagem_final = texto_mensagem.get("1.0", "end-1c").strip()
            
            if not mensagem_final:
                messagebox.showerror("Erro", "Digite uma mensagem!")
                return
            
            # Enviar WhatsApp
            if self.whatsapp_api:
                resultado = self.whatsapp_api.enviar_mensagem(telefone, mensagem_final)
            else:
                resultado = {"success": False, "erro": "WhatsApp API n√£o configurada"}
            
            # Registrar log
            self.registrar_log_whatsapp(telefone, mensagem_final, resultado, 
                                      None, f"ALERTA_MANUAL_{nome_estudante}")
            
            # Atualizar alerta
            if resultado["sucesso"]:
                self.cursor.execute("""
                    UPDATE alertas 
                    SET whatsapp_enviado = 1, data_envio_whatsapp = ?
                    WHERE id = ?
                """, (datetime.now().strftime("%Y-%m-%d %H:%M"), alerta_id))
                
                self.conn.commit()
                
                messagebox.showinfo("Sucesso", 
                                   f"‚úÖ WhatsApp enviado com sucesso!\n\n"
                                   f"Destinat√°rio: {nome_estudante}\n"
                                   f"Telefone: {telefone}")
                whats_window.destroy()
                self.carregar_alertas()
            else:
                messagebox.showerror("Erro", 
                                    f"‚ùå Erro ao enviar WhatsApp:\n\n"
                                    f"{resultado.get('erro', 'Erro desconhecido')}")
        
        # Bot√µes
        btn_enviar = ctk.CTkButton(
            buttons_frame,
            text="üì± Enviar WhatsApp",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#25d366",
            hover_color="#128c7e",
            command=enviar_mensagem
        )
        btn_enviar.pack(side="left", padx=(0, 10))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=100,
            height=40,
            font=ctk.CTkFont(size=14),
            fg_color="#e74c3c",
            hover_color="#c0392b",
            command=whats_window.destroy
        )
        btn_cancelar.pack(side="left")

    def abrir_janela_whatsapp_aluno(self, alerta_id, telefone, nome_estudante, titulo_alerta, 
                                   mensagem_alerta, data_termino, empresa_nome, orientador_nome):
        """Abrir janela para envio de WhatsApp espec√≠fica para aluno"""
        
        # Criar janela modal
        whats_window = ctk.CTkToplevel(self.root)
        whats_window.title("üì± WhatsApp para Aluno - EstagioPro")
        whats_window.geometry("600x500")
        whats_window.transient(self.root)
        whats_window.grab_set()
        
        # Centralizar janela
        whats_window.update_idletasks()
        x = (whats_window.winfo_screenwidth() // 2) - (600 // 2)
        y = (whats_window.winfo_screenheight() // 2) - (500 // 2)
        whats_window.geometry(f"600x500+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(whats_window, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üì± Enviar WhatsApp para Aluno",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#25d366"
        )
        title_label.pack(pady=(0, 20))
        
        # Informa√ß√µes do destinat√°rio
        info_frame = ctk.CTkFrame(main_frame, fg_color="#e8f5e8")
        info_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(info_frame, text=f"üë§ Aluno: {nome_estudante}", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=15, pady=(10, 5))
        ctk.CTkLabel(info_frame, text=f"üìû Telefone: {telefone}", 
                    font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(0, 5))
        ctk.CTkLabel(info_frame, text=f"üö® Alerta: {titulo_alerta}", 
                    font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(0, 10))
        
        # √Årea de mensagem
        ctk.CTkLabel(main_frame, text="‚úèÔ∏è Mensagem para o Aluno:", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        
        # Detectar se √© alerta de vencimento para personalizar mensagem
        is_vencimento = "pr√≥ximo do t√©rmino" in titulo_alerta or "vencimento" in titulo_alerta.lower()
        is_critico = "üö®" in titulo_alerta or "CR√çTICO" in mensagem_alerta or "URGENTE" in mensagem_alerta
        
        if is_vencimento:
            # Mensagem espec√≠fica para alertas de vencimento
            if is_critico:
                mensagem_aluno = f"""üö® *ALERTA CR√çTICO - EstagioPro*

Ol√° {nome_estudante}!

üö® *SEU EST√ÅGIO EST√Å PR√ìXIMO DO VENCIMENTO!*

üìù *Situa√ß√£o:*
{mensagem_alerta}"""
            else:
                mensagem_aluno = f"""‚ö†Ô∏è *AVISO IMPORTANTE - EstagioPro*

Ol√° {nome_estudante}!

‚è∞ *SEU EST√ÅGIO EST√Å PR√ìXIMO DO T√âRMINO*

üìù *Detalhes:*
{mensagem_alerta}"""
            
            if data_termino and empresa_nome:
                mensagem_aluno += f"""

üè¢ *Empresa:* {empresa_nome}
üìÖ *Data de t√©rmino:* {data_termino}"""
            
            if orientador_nome:
                mensagem_aluno += f"""
üë®‚Äçüè´ *Orientador:* Prof. {orientador_nome}"""
            
            if is_critico:
                mensagem_aluno += """

üö® *A√á√ïES URGENTES:*
‚Ä¢ Confirme IMEDIATAMENTE se todos os relat√≥rios foram entregues
‚Ä¢ Verifique se todas as atividades foram cumpridas
‚Ä¢ Entre em contato com seu orientador HOJE
‚Ä¢ Providencie documenta√ß√£o de conclus√£o
‚Ä¢ N√£o deixe para amanh√£ - o prazo est√° vencendo!"""
            else:
                mensagem_aluno += """

üìã *A√á√ïES NECESS√ÅRIAS:*
‚Ä¢ Verifique se todos os relat√≥rios foram entregues
‚Ä¢ Confirme se as atividades est√£o sendo cumpridas
‚Ä¢ Entre em contato com seu orientador
‚Ä¢ Organize a documenta√ß√£o de conclus√£o
‚Ä¢ Tome as provid√™ncias necess√°rias o quanto antes"""
        else:
            # Mensagem padr√£o para outros tipos de alerta
            mensagem_aluno = f"""üéì *EstagioPro - Comunicado para Aluno*

Ol√° {nome_estudante}!

‚ö†Ô∏è *ALERTA IMPORTANTE:*
{titulo_alerta}

üìù *Detalhes:*
{mensagem_alerta}"""
            
            if data_termino and empresa_nome:
                mensagem_aluno += f"""

üè¢ *Empresa:* {empresa_nome}
üìÖ *Data de t√©rmino:* {data_termino}"""
            
            if orientador_nome:
                mensagem_aluno += f"""
üë®‚Äçüè´ *Orientador:* Prof. {orientador_nome}"""
            
            mensagem_aluno += """

üìã *A√á√ïES NECESS√ÅRIAS:*
‚Ä¢ Verifique se todos os relat√≥rios foram entregues
‚Ä¢ Confirme se as atividades est√£o sendo cumpridas
‚Ä¢ Entre em contato com seu orientador se tiver d√∫vidas
‚Ä¢ Tome as provid√™ncias necess√°rias o quanto antes"""
        
        mensagem_aluno += """

_Sistema EstagioPro - UFVJM_
_Ci√™ncias Cont√°beis_"""
        
        # Campo de texto para mensagem
        texto_mensagem = ctk.CTkTextbox(main_frame, height=200, font=ctk.CTkFont(size=12))
        texto_mensagem.pack(fill="both", expand=True, pady=(0, 15))
        texto_mensagem.insert("1.0", mensagem_aluno)
        
        # Frame de bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        def enviar_mensagem():
            mensagem_final = texto_mensagem.get("1.0", "end-1c").strip()
            
            if not mensagem_final:
                messagebox.showerror("Erro", "Digite uma mensagem!")
                return
            
            # Enviar WhatsApp
            if self.whatsapp_api:
                resultado = self.whatsapp_api.enviar_mensagem(telefone, mensagem_final)
            else:
                resultado = {"success": False, "erro": "WhatsApp API n√£o configurada"}
            
            # Registrar log
            self.registrar_log_whatsapp(telefone, mensagem_final, resultado, 
                                      None, f"ALERTA_ALUNO_{nome_estudante}")
            
            # Atualizar alerta
            if resultado["sucesso"]:
                self.cursor.execute("""
                    UPDATE alertas 
                    SET whatsapp_enviado = 1, data_envio_whatsapp = ?
                    WHERE id = ?
                """, (datetime.now().strftime("%Y-%m-%d %H:%M"), alerta_id))
                
                self.conn.commit()
                
                messagebox.showinfo("Sucesso", 
                                   f"‚úÖ WhatsApp enviado com sucesso para o aluno!\n\n"
                                   f"Destinat√°rio: {nome_estudante}\n"
                                   f"Telefone: {telefone}")
                whats_window.destroy()
                self.carregar_alertas()
            else:
                messagebox.showerror("Erro", 
                                    f"‚ùå Erro ao enviar WhatsApp:\n\n"
                                    f"{resultado.get('erro', 'Erro desconhecido')}")
        
        # Bot√µes
        btn_enviar = ctk.CTkButton(
            buttons_frame,
            text="üì± Enviar para Aluno",
            width=150,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#25d366",
            hover_color="#128c7e",
            command=enviar_mensagem
        )
        btn_enviar.pack(side="left", padx=(0, 10))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=100,
            height=40,
            font=ctk.CTkFont(size=14),
            fg_color="#e74c3c",
            hover_color="#c0392b",
            command=whats_window.destroy
        )
        btn_cancelar.pack(side="left")

    def abrir_janela_whatsapp_professor(self, alerta_id, telefone_professor, nome_professor, titulo_alerta, 
                                       mensagem_alerta, estudante_nome, data_termino, empresa_nome):
        """Abrir janela para envio de WhatsApp espec√≠fica para professor"""
        
        # Criar janela modal
        whats_window = ctk.CTkToplevel(self.root)
        whats_window.title("üì± WhatsApp para Professor - EstagioPro")
        whats_window.geometry("600x500")
        whats_window.transient(self.root)
        whats_window.grab_set()
        
        # Centralizar janela
        whats_window.update_idletasks()
        x = (whats_window.winfo_screenwidth() // 2) - (600 // 2)
        y = (whats_window.winfo_screenheight() // 2) - (500 // 2)
        whats_window.geometry(f"600x500+{x}+{y}")
        
        # Frame principal
        main_frame = ctk.CTkFrame(whats_window, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(
            main_frame,
            text="üì± Enviar WhatsApp para Professor",
            font=ctk.CTkFont(size=20, weight="bold"),
            text_color="#1e88e5"
        )
        title_label.pack(pady=(0, 20))
        
        # Informa√ß√µes do destinat√°rio
        info_frame = ctk.CTkFrame(main_frame, fg_color="#e3f2fd")
        info_frame.pack(fill="x", pady=(0, 15))
        
        ctk.CTkLabel(info_frame, text=f"üë®‚Äçüè´ Professor: {nome_professor}", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=15, pady=(10, 5))
        ctk.CTkLabel(info_frame, text=f"üìû Telefone: {telefone_professor}", 
                    font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(0, 5))
        ctk.CTkLabel(info_frame, text=f"üö® Alerta: {titulo_alerta}", 
                    font=ctk.CTkFont(size=12)).pack(anchor="w", padx=15, pady=(0, 10))
        
        # √Årea de mensagem
        ctk.CTkLabel(main_frame, text="‚úèÔ∏è Mensagem para o Professor:", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 5))
        
        # Detectar se √© alerta de vencimento para personalizar mensagem
        is_vencimento = "pr√≥ximo do t√©rmino" in titulo_alerta or "vencimento" in titulo_alerta.lower()
        is_critico = "üö®" in titulo_alerta or "CR√çTICO" in mensagem_alerta or "URGENTE" in mensagem_alerta
        
        if is_vencimento:
            # Mensagem espec√≠fica para alertas de vencimento do professor
            if is_critico:
                mensagem_professor = f"""üö® *ALERTA CR√çTICO - EstagioPro*

Prezado(a) Prof. {nome_professor},

üö® *EST√ÅGIO PR√ìXIMO DO VENCIMENTO - A√á√ÉO URGENTE*

üìù *Situa√ß√£o Cr√≠tica:*
{mensagem_alerta}

üë§ *Estudante:* {estudante_nome}"""
            else:
                mensagem_professor = f"""‚ö†Ô∏è *AVISO IMPORTANTE - EstagioPro*

Prezado(a) Prof. {nome_professor},

‚è∞ *EST√ÅGIO PR√ìXIMO DO T√âRMINO*

üìù *Detalhes:*
{mensagem_alerta}

üë§ *Estudante:* {estudante_nome}"""
            
            if data_termino and empresa_nome:
                mensagem_professor += f"""
üè¢ *Empresa:* {empresa_nome}
üìÖ *Data de t√©rmino:* {data_termino}"""
            
            if is_critico:
                mensagem_professor += """

üö® *A√á√ïES URGENTES SOLICITADAS:*
‚Ä¢ Confirme IMEDIATAMENTE se todos os relat√≥rios foram entregues pelo estudante
‚Ä¢ Verifique se todas as atividades obrigat√≥rias foram cumpridas
‚Ä¢ Entre em contato com o estudante HOJE para orienta√ß√µes finais
‚Ä¢ Providencie avalia√ß√£o e documenta√ß√£o de conclus√£o
‚Ä¢ Monitore o cumprimento das √∫ltimas atividades
‚Ä¢ Informe a coordena√ß√£o sobre o status do est√°gio

‚ö†Ô∏è PRAZO CR√çTICO - Provid√™ncias imediatas s√£o necess√°rias!"""
            else:
                mensagem_professor += """

üìã *A√á√ïES SOLICITADAS:*
‚Ä¢ Confirme se todos os relat√≥rios foram entregues pelo estudante
‚Ä¢ Verifique se o estudante est√° cumprindo as atividades finais
‚Ä¢ Entre em contato com o estudante para orienta√ß√µes de conclus√£o
‚Ä¢ Monitore o andamento das √∫ltimas etapas do est√°gio
‚Ä¢ Prepare a avalia√ß√£o final
‚Ä¢ Informe a coordena√ß√£o sobre eventuais pend√™ncias"""
        else:
            # Mensagem padr√£o para outros tipos de alerta
            mensagem_professor = f"""üéì *EstagioPro - Comunicado para Orientador*

Prezado(a) Prof. {nome_professor},

‚ö†Ô∏è *ALERTA DO SISTEMA:*
{titulo_alerta}

üìù *Detalhes:*
{mensagem_alerta}

üë§ *Estudante:* {estudante_nome}"""
            
            if data_termino and empresa_nome:
                mensagem_professor += f"""
üè¢ *Empresa:* {empresa_nome}
üìÖ *Data de t√©rmino:* {data_termino}"""
            
            mensagem_professor += """

üìã *SOLICITA√á√ÉO:*
Por favor, verifique a situa√ß√£o do est√°gio e tome as provid√™ncias necess√°rias:
‚Ä¢ Confirme se todos os relat√≥rios foram entregues
‚Ä¢ Verifique se o estudante est√° cumprindo as atividades
‚Ä¢ Entre em contato com o estudante se necess√°rio
‚Ä¢ Monitore o andamento do est√°gio"""
        
        mensagem_professor += """

Agradecemos sua aten√ß√£o e colabora√ß√£o.

_Sistema EstagioPro - UFVJM_
_Ci√™ncias Cont√°beis_"""
        
        # Campo de texto para mensagem
        texto_mensagem = ctk.CTkTextbox(main_frame, height=200, font=ctk.CTkFont(size=12))
        texto_mensagem.pack(fill="both", expand=True, pady=(0, 15))
        texto_mensagem.insert("1.0", mensagem_professor)
        
        # Frame de bot√µes
        buttons_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        def enviar_mensagem():
            mensagem_final = texto_mensagem.get("1.0", "end-1c").strip()
            
            if not mensagem_final:
                messagebox.showerror("Erro", "Digite uma mensagem!")
                return
            
            # Enviar WhatsApp
            if self.whatsapp_api:
                resultado = self.whatsapp_api.enviar_mensagem(telefone_professor, mensagem_final)
            else:
                resultado = {"sucesso": False, "erro": "WhatsApp API n√£o configurada"}
            
            # Registrar log
            self.registrar_log_whatsapp(telefone_professor, mensagem_final, resultado, 
                                      None, f"ALERTA_PROFESSOR_{nome_professor}")
            
            # Atualizar alerta (opcional, pode manter separado do envio para aluno)
            if resultado["sucesso"]:
                messagebox.showinfo("Sucesso", 
                                   f"‚úÖ WhatsApp enviado com sucesso para o professor!\n\n"
                                   f"Destinat√°rio: Prof. {nome_professor}\n"
                                   f"Telefone: {telefone_professor}")
                whats_window.destroy()
                self.carregar_alertas()
            else:
                messagebox.showerror("Erro", 
                                    f"‚ùå Erro ao enviar WhatsApp:\n\n"
                                    f"{resultado.get('erro', 'Erro desconhecido')}")
        
        # Bot√µes
        btn_enviar = ctk.CTkButton(
            buttons_frame,
            text="üì± Enviar para Professor",
            width=170,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#1e88e5",
            hover_color="#1565c0",
            command=enviar_mensagem
        )
        btn_enviar.pack(side="left", padx=(0, 10))
        
        btn_cancelar = ctk.CTkButton(
            buttons_frame,
            text="‚ùå Cancelar",
            width=100,
            height=40,
            font=ctk.CTkFont(size=14),
            fg_color="#e74c3c",
            hover_color="#c0392b",
            command=whats_window.destroy
        )
        btn_cancelar.pack(side="left")

    def excluir_alerta(self, alerta_id):
        """Excluir alerta"""
        if messagebox.askyesno("Confirmar", "Deseja realmente excluir este alerta?"):
            self.cursor.execute("DELETE FROM alertas WHERE id = ?", (alerta_id,))
            self.conn.commit()
            messagebox.showinfo("Sucesso", "Alerta exclu√≠do com sucesso!")
            self.carregar_alertas()

    def limpar_alertas_antigos(self):
        """Limpar alertas antigos (mais de 30 dias)"""
        if messagebox.askyesno("Confirmar", "Deseja excluir alertas com mais de 30 dias?"):
            self.cursor.execute("""
                DELETE FROM alertas 
                WHERE data_criacao < date('now', '-30 days') 
                AND status = 'RESOLVIDO'
            """)
            rows_deleted = self.cursor.rowcount
            self.conn.commit()
            messagebox.showinfo("Sucesso", f"{rows_deleted} alertas antigos foram removidos!")
            self.carregar_alertas()

    def init_whatsapp_api(self):
        """Inicializar API do WhatsApp"""
        try:
            # Buscar configura√ß√µes do WhatsApp
            self.cursor.execute("SELECT valor FROM configuracoes WHERE chave = 'api_whatsapp_token'")
            token_result = self.cursor.fetchone()
            
            self.cursor.execute("SELECT valor FROM configuracoes WHERE chave = 'api_whatsapp_phone_id'")
            phone_result = self.cursor.fetchone()
            
            if token_result and phone_result and token_result[0] and phone_result[0]:
                self.whatsapp_api = WhatsAppAPI(token_result[0], phone_result[0])
                print("‚úÖ WhatsApp API inicializada com sucesso")
            else:
                self.whatsapp_api = None
                print("‚ö†Ô∏è Configura√ß√µes do WhatsApp n√£o encontradas. Configure nas Configura√ß√µes do sistema.")
                
        except Exception as e:
            self.whatsapp_api = None
            print(f"‚ùå Erro ao inicializar WhatsApp API: {e}")

    def executar_verificacao_diaria(self):
        """Executar verifica√ß√£o di√°ria de alertas em thread separada"""
        def verificar():
            try:
                # Criar nova conex√£o para a thread
                conn_thread = sqlite3.connect('estagio.db')
                cursor_thread = conn_thread.cursor()
                
                # Verificar se j√° foi executado hoje
                hoje = datetime.now().strftime("%Y-%m-%d")
                
                cursor_thread.execute("SELECT valor FROM configuracoes WHERE chave = 'ultima_verificacao_diaria'")
                ultima_verificacao = cursor_thread.fetchone()
                
                if not ultima_verificacao or ultima_verificacao[0] != hoje:
                    print(f"üîÑ Executando verifica√ß√£o di√°ria de alertas - {hoje}")
                    
                    # Executar verifica√ß√£o
                    self.verificar_estagios_proximos_termino_thread(cursor_thread, conn_thread)
                    
                    # Atualizar data da √∫ltima verifica√ß√£o
                    cursor_thread.execute("""
                        UPDATE configuracoes 
                        SET valor = ?, data_atualizacao = ? 
                        WHERE chave = 'ultima_verificacao_diaria'
                    """, (hoje, datetime.now().strftime("%Y-%m-%d %H:%M")))
                    
                    conn_thread.commit()
                    print("‚úÖ Verifica√ß√£o di√°ria conclu√≠da")
                else:
                    print("‚ÑπÔ∏è Verifica√ß√£o di√°ria j√° executada hoje")
                
                conn_thread.close()
                    
            except Exception as e:
                print(f"‚ùå Erro na verifica√ß√£o di√°ria: {e}")
        
        # Executar em thread separada para n√£o bloquear a interface
        thread = threading.Thread(target=verificar, daemon=True)
        thread.start()

    def verificar_estagios_proximos_termino_thread(self, cursor_thread, conn_thread):
        """Verificar est√°gios pr√≥ximos do t√©rmino usando conex√£o da thread"""
        try:
            # Buscar configura√ß√£o de dias de aviso
            cursor_thread.execute("SELECT valor FROM configuracoes WHERE chave = 'dias_aviso_termino'")
            dias_aviso = int(cursor_thread.fetchone()[0])
            
            # Calcular data limite
            from datetime import timedelta
            data_limite = (datetime.now() + timedelta(days=dias_aviso)).strftime("%Y-%m-%d")
            
            # Buscar est√°gios pr√≥ximos do t√©rmino
            cursor_thread.execute("""
                SELECT eo.id, eo.data_termino, est.nome as estudante_nome, est.telefone as estudante_telefone,
                       ori.nome as orientador_nome, ori.telefone as orientador_telefone,
                       emp.nome as empresa_nome, eo.carga_horaria,
                       JULIANDAY(eo.data_termino) - JULIANDAY('now') as dias_restantes
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.data_termino <= ? 
                AND eo.status != 'Conclu√≠do'
                AND NOT EXISTS (
                    SELECT 1 FROM alertas a 
                    WHERE a.estagio_id = eo.id 
                    AND a.tipo = 'PRAZO_WHATSAPP' 
                    AND a.whatsapp_enviado = 1
                    AND a.data_criacao >= date('now', '-7 days')
                )
                ORDER BY eo.data_termino ASC
            """, (data_limite,))
            
            estagios_vencendo = cursor_thread.fetchall()
            
            for estagio in estagios_vencendo:
                self.processar_alerta_estagio_termino_thread(estagio, dias_aviso, cursor_thread, conn_thread)
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar est√°gios pr√≥ximos do t√©rmino: {e}")

    def processar_alerta_estagio_termino_thread(self, estagio, dias_aviso, cursor_thread, conn_thread):
        """Processar alerta individual usando conex√£o da thread"""
        try:
            estagio_id, data_termino, estudante_nome, estudante_telefone, orientador_nome, orientador_telefone, empresa_nome, carga_horaria, dias_restantes = estagio
            
            # Criar alerta no sistema
            titulo = f"‚è∞ Est√°gio pr√≥ximo do t√©rmino - {estudante_nome}"
            mensagem = f"O est√°gio obrigat√≥rio do estudante {estudante_nome} na empresa {empresa_nome} tem data de t√©rmino em {data_termino} (aproximadamente {int(dias_restantes)} dias restantes)."
            
            # Inserir alerta no banco
            cursor_thread.execute("""
                INSERT INTO alertas (tipo, titulo, mensagem, prioridade, data_criacao, data_vencimento, estagio_id, whatsapp_enviado)
                VALUES ('PRAZO_WHATSAPP', ?, ?, 'ALTA', ?, ?, ?, 0)
            """, (titulo, mensagem, datetime.now().strftime("%Y-%m-%d %H:%M"), data_termino, estagio_id))
            
            alerta_id = cursor_thread.lastrowid
            
            # Enviar WhatsApp se API estiver configurada
            if self.whatsapp_api:
                self.enviar_alertas_whatsapp_estagio_thread(alerta_id, estagio, dias_aviso, cursor_thread, conn_thread)
            
            conn_thread.commit()
            
        except Exception as e:
            print(f"‚ùå Erro ao processar alerta do est√°gio {estagio_id}: {e}")

    def enviar_alertas_whatsapp_estagio_thread(self, alerta_id, estagio, dias_aviso, cursor_thread, conn_thread):
        """Enviar alertas por WhatsApp usando conex√£o da thread"""
        try:
            estagio_id, data_termino, estudante_nome, estudante_telefone, orientador_nome, orientador_telefone, empresa_nome, carga_horaria, dias_restantes = estagio
            
            dias_restantes_int = int(dias_restantes) if dias_restantes is not None else 0
            
            # Mensagem para o orientador
            mensagem_orientador = f"""
üéì *EstagioPro - Alerta de Est√°gio*

Prezado(a) Prof. {orientador_nome},

‚ö†Ô∏è *ATEN√á√ÉO: Est√°gio pr√≥ximo do t√©rmino*

üë§ *Estudante:* {estudante_nome}
üè¢ *Empresa:* {empresa_nome}
üìÖ *Data de t√©rmino:* {data_termino}
‚è∞ *Dias restantes:* {dias_restantes_int} dias
üïí *Carga hor√°ria:* {carga_horaria}h

Por favor, verifique se todos os relat√≥rios foram entregues e se o estudante est√° cumprindo adequadamente as atividades do est√°gio.

_Sistema EstagioPro - UFVJM_
_Ci√™ncias Cont√°beis_
            """.strip()
            
            # Mensagem para o estudante
            mensagem_estudante = f"""
üéì *EstagioPro - Lembrete de Est√°gio*

Ol√° {estudante_nome}!

‚ö†Ô∏è *LEMBRETE IMPORTANTE*

Seu est√°gio obrigat√≥rio na empresa *{empresa_nome}* est√° pr√≥ximo do t√©rmino:

üìÖ *Data de t√©rmino:* {data_termino}
‚è∞ *Dias restantes:* {dias_restantes_int} dias

üìã *IMPORTANTE:*
- Verifique se todos os relat√≥rios foram entregues
- Confirme se as atividades est√£o sendo cumpridas
- Entre em contato com seu orientador se tiver d√∫vidas

üë®‚Äçüè´ *Orientador:* Prof. {orientador_nome}

_Sistema EstagioPro - UFVJM_
_Ci√™ncias Cont√°beis_
            """.strip()
            
            # Enviar para orientador
            if orientador_telefone and self.whatsapp_api and self.whatsapp_api.validar_numero(orientador_telefone):
                resultado_orientador = self.whatsapp_api.enviar_mensagem(orientador_telefone, mensagem_orientador)
                self.registrar_log_whatsapp_thread(orientador_telefone, mensagem_orientador, resultado_orientador, estagio_id, "ORIENTADOR", cursor_thread)
                
                if resultado_orientador["sucesso"]:
                    print(f"‚úÖ WhatsApp enviado para orientador: {orientador_nome}")
                else:
                    print(f"‚ùå Erro ao enviar WhatsApp para orientador: {resultado_orientador['erro']}")
            
            # Enviar para estudante
            if estudante_telefone and self.whatsapp_api and self.whatsapp_api.validar_numero(estudante_telefone):
                resultado_estudante = self.whatsapp_api.enviar_mensagem(estudante_telefone, mensagem_estudante)
                self.registrar_log_whatsapp_thread(estudante_telefone, mensagem_estudante, resultado_estudante, estagio_id, "ESTUDANTE", cursor_thread)
                
                if resultado_estudante["sucesso"]:
                    print(f"‚úÖ WhatsApp enviado para estudante: {estudante_nome}")
                else:
                    print(f"‚ùå Erro ao enviar WhatsApp para estudante: {resultado_estudante['erro']}")
            
            # Marcar alerta como enviado por WhatsApp
            cursor_thread.execute("""
                UPDATE alertas 
                SET whatsapp_enviado = 1, data_envio_whatsapp = ?
                WHERE id = ?
            """, (datetime.now().strftime("%Y-%m-%d %H:%M"), alerta_id))
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar alertas WhatsApp: {e}")

    def registrar_log_whatsapp_thread(self, telefone, mensagem, resultado, estagio_id, tipo_destinatario, cursor_thread):
        """Registrar log de envio do WhatsApp usando conex√£o da thread"""
        try:
            status = "ENVIADO" if resultado["sucesso"] else "ERRO"
            resposta_api = json.dumps(resultado.get("resposta", resultado.get("erro", "")))
            
            cursor_thread.execute("""
                INSERT INTO log_whatsapp 
                (telefone, mensagem, status, resposta_api, data_envio, estagio_id, tipo_destinatario)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (telefone, mensagem[:500], status, resposta_api[:1000], 
                  datetime.now().strftime("%Y-%m-%d %H:%M"), estagio_id, tipo_destinatario))
            
        except Exception as e:
            print(f"‚ùå Erro ao registrar log WhatsApp: {e}")

    def verificar_estagios_proximos_termino(self):
        """Verificar est√°gios pr√≥ximos do t√©rmino e enviar alertas"""
        try:
            # Buscar configura√ß√£o de dias de aviso
            self.cursor.execute("SELECT valor FROM configuracoes WHERE chave = 'dias_aviso_termino'")
            dias_aviso = int(self.cursor.fetchone()[0])
            
            # Calcular data limite
            from datetime import timedelta
            data_limite = (datetime.now() + timedelta(days=dias_aviso)).strftime("%Y-%m-%d")
            
            # Buscar est√°gios pr√≥ximos do t√©rmino
            self.cursor.execute("""
                SELECT eo.id, eo.data_termino, est.nome as estudante_nome, est.telefone as estudante_telefone,
                       ori.nome as orientador_nome, ori.telefone as orientador_telefone,
                       emp.nome as empresa_nome, eo.carga_horaria,
                       JULIANDAY(eo.data_termino) - JULIANDAY('now') as dias_restantes
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.data_termino <= ? 
                AND eo.status != 'Conclu√≠do'
                AND NOT EXISTS (
                    SELECT 1 FROM alertas a 
                    WHERE a.estagio_id = eo.id 
                    AND a.tipo = 'PRAZO_WHATSAPP' 
                    AND a.whatsapp_enviado = 1
                    AND a.data_criacao >= date('now', '-7 days')
                )
                ORDER BY eo.data_termino ASC
            """, (data_limite,))
            
            estagios_vencendo = self.cursor.fetchall()
            
            for estagio in estagios_vencendo:
                self.processar_alerta_estagio_termino(estagio, dias_aviso)
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar est√°gios pr√≥ximos do t√©rmino: {e}")

    def processar_alerta_estagio_termino(self, estagio, dias_aviso):
        """Processar alerta individual de est√°gio pr√≥ximo do t√©rmino"""
        try:
            estagio_id, data_termino, estudante_nome, estudante_telefone, orientador_nome, orientador_telefone, empresa_nome, carga_horaria, dias_restantes = estagio
            
            # Criar alerta no sistema
            titulo = f"‚è∞ Est√°gio pr√≥ximo do t√©rmino - {estudante_nome}"
            mensagem = f"O est√°gio obrigat√≥rio do estudante {estudante_nome} na empresa {empresa_nome} tem data de t√©rmino em {data_termino} (aproximadamente {int(dias_restantes)} dias restantes)."
            
            # Inserir alerta no banco
            self.cursor.execute("""
                INSERT INTO alertas (tipo, titulo, mensagem, prioridade, data_criacao, data_vencimento, estagio_id, whatsapp_enviado)
                VALUES ('PRAZO_WHATSAPP', ?, ?, 'ALTA', ?, ?, ?, 0)
            """, (titulo, mensagem, datetime.now().strftime("%Y-%m-%d %H:%M"), data_termino, estagio_id))
            
            alerta_id = self.cursor.lastrowid
            
            # Enviar WhatsApp se API estiver configurada
            if self.whatsapp_api:
                self.enviar_alertas_whatsapp_estagio(alerta_id, estagio, dias_aviso)
            
            self.conn.commit()
            
        except Exception as e:
            print(f"‚ùå Erro ao processar alerta do est√°gio {estagio_id}: {e}")

    def enviar_alertas_whatsapp_estagio(self, alerta_id, estagio, dias_aviso):
        """Enviar alertas por WhatsApp para orientador e estudante"""
        try:
            estagio_id, data_termino, estudante_nome, estudante_telefone, orientador_nome, orientador_telefone, empresa_nome, carga_horaria, dias_restantes = estagio
            
            dias_restantes_int = int(dias_restantes) if dias_restantes is not None else 0
            
            # Mensagem para o orientador
            mensagem_orientador = f"""
üéì *EstagioPro - Alerta de Est√°gio*

Prezado(a) Prof. {orientador_nome},

‚ö†Ô∏è *ATEN√á√ÉO: Est√°gio pr√≥ximo do t√©rmino*

üë§ *Estudante:* {estudante_nome}
üè¢ *Empresa:* {empresa_nome}
üìÖ *Data de t√©rmino:* {data_termino}
‚è∞ *Dias restantes:* {dias_restantes_int} dias
üïí *Carga hor√°ria:* {carga_horaria}h

Por favor, verifique se todos os relat√≥rios foram entregues e se o estudante est√° cumprindo adequadamente as atividades do est√°gio.

_Sistema EstagioPro - UFVJM_
_Ci√™ncias Cont√°beis_
            """.strip()
            
            # Mensagem para o estudante
            mensagem_estudante = f"""
üéì *EstagioPro - Lembrete de Est√°gio*

Ol√° {estudante_nome}!

‚ö†Ô∏è *LEMBRETE IMPORTANTE*

Seu est√°gio obrigat√≥rio na empresa *{empresa_nome}* est√° pr√≥ximo do t√©rmino:

üìÖ *Data de t√©rmino:* {data_termino}
‚è∞ *Dias restantes:* {dias_restantes_int} dias

üìã *IMPORTANTE:*
- Verifique se todos os relat√≥rios foram entregues
- Confirme se as atividades est√£o sendo cumpridas
- Entre em contato com seu orientador se tiver d√∫vidas

üë®‚Äçüè´ *Orientador:* Prof. {orientador_nome}

_Sistema EstagioPro - UFVJM_
_Ci√™ncias Cont√°beis_
            """.strip()
            
            # Enviar para orientador
            if orientador_telefone and self.whatsapp_api and self.whatsapp_api.validar_numero(orientador_telefone):
                resultado_orientador = self.whatsapp_api.enviar_mensagem(orientador_telefone, mensagem_orientador)
                self.registrar_log_whatsapp(orientador_telefone, mensagem_orientador, resultado_orientador, estagio_id, "ORIENTADOR")
                
                if resultado_orientador["sucesso"]:
                    print(f"‚úÖ WhatsApp enviado para orientador: {orientador_nome}")
                else:
                    print(f"‚ùå Erro ao enviar WhatsApp para orientador: {resultado_orientador['erro']}")
            
            # Enviar para estudante
            if estudante_telefone and self.whatsapp_api and self.whatsapp_api.validar_numero(estudante_telefone):
                resultado_estudante = self.whatsapp_api.enviar_mensagem(estudante_telefone, mensagem_estudante)
                self.registrar_log_whatsapp(estudante_telefone, mensagem_estudante, resultado_estudante, estagio_id, "ESTUDANTE")
                
                if resultado_estudante["sucesso"]:
                    print(f"‚úÖ WhatsApp enviado para estudante: {estudante_nome}")
                else:
                    print(f"‚ùå Erro ao enviar WhatsApp para estudante: {resultado_estudante['erro']}")
            
            # Marcar alerta como enviado por WhatsApp
            self.cursor.execute("""
                UPDATE alertas 
                SET whatsapp_enviado = 1, data_envio_whatsapp = ?
                WHERE id = ?
            """, (datetime.now().strftime("%Y-%m-%d %H:%M"), alerta_id))
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar alertas WhatsApp: {e}")

    def registrar_log_whatsapp(self, telefone, mensagem, resultado, estagio_id, tipo_destinatario):
        """Registrar log de envio do WhatsApp"""
        try:
            status = "ENVIADO" if resultado["sucesso"] else "ERRO"
            resposta_api = json.dumps(resultado.get("resposta", resultado.get("erro", "")))
            
            self.cursor.execute("""
                INSERT INTO log_whatsapp 
                (telefone, mensagem, status, resposta_api, data_envio, estagio_id, tipo_destinatario)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (telefone, mensagem[:500], status, resposta_api[:1000], 
                  datetime.now().strftime("%Y-%m-%d %H:%M"), estagio_id, tipo_destinatario))
            
        except Exception as e:
            print(f"‚ùå Erro ao registrar log WhatsApp: {e}")

    def enviar_teste_whatsapp(self, numero, mensagem="Teste do EstagioPro - Sistema funcionando corretamente! üéì"):
        """Enviar mensagem de teste via WhatsApp"""
        if not self.whatsapp_api:
            return {"sucesso": False, "erro": "API do WhatsApp n√£o configurada"}
        
        resultado = self.whatsapp_api.enviar_mensagem(numero, mensagem)
        
        # Registrar log
        self.registrar_log_whatsapp(numero, mensagem, resultado, None, "TESTE")
        self.conn.commit()
        
        return resultado

    def toggle_fullscreen(self):
        """Alternar entre tela cheia e janela normal"""
        if self.root.attributes('-fullscreen'):
            self.root.attributes('-fullscreen', False)
        else:
            self.root.attributes('-fullscreen', True)
            
    def sair_sistema(self):
        if messagebox.askyesno("Sair", "Deseja realmente sair do sistema?"):
            # Parar aplica√ß√£o imediatamente
            self.app_running = False
            
            # Cancelar todos os timers
            if hasattr(self, 'datetime_timer_id') and self.datetime_timer_id:
                try:
                    self.root.after_cancel(self.datetime_timer_id)
                    self.datetime_timer_id = None
                except:
                    pass
            
            # Limpar todos os after() pendentes
            try:
                self.root.quit()
            except:
                pass
            
            # Parar sistema de backup (sem timeout longo)
            self.stop_backup_system()
            
            # Fechar conex√£o do banco de dados
            try:
                if hasattr(self, 'conn') and self.conn:
                    self.conn.close()
            except:
                pass
            
            # Destruir janela principal imediatamente
            try:
                self.root.destroy()
            except:
                pass
            
            # For√ßar sa√≠da do programa
            import sys
            sys.exit(0)
    
    # ========================================
    # M√âTODOS DE RELAT√ìRIOS MODERNOS
    # ========================================
    
    def exportar_relatorio_moderno_semestral_obrigatorio(self):
        """Exportar relat√≥rio semestral obrigat√≥rio em PDF moderno"""
        if not self.report_generator:
            messagebox.showerror("Erro", "Sistema de relat√≥rios modernos n√£o dispon√≠vel!\nInstale o ReportLab: pip install reportlab")
            return
        
        try:
            # Obter dados do relat√≥rio
            semestre = self.semestre_combo.get()
            ano = int(self.ano_combo.get())
            
            # Determinar per√≠odo
            if "1¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-06-30"
                periodo_texto = f"1¬∫ Semestre de {ano} (Janeiro a Junho)"
            elif "2¬∫ Semestre" in semestre:
                data_inicio = f"{ano}-07-01"
                data_fim = f"{ano}-12-31"
                periodo_texto = f"2¬∫ Semestre de {ano} (Julho a Dezembro)"
            else:  # Ano completo
                data_inicio = f"{ano}-01-01"
                data_fim = f"{ano}-12-31"
                periodo_texto = f"Ano Completo de {ano}"
            
            # Buscar dados
            self.cursor.execute("""
                SELECT 
                    eo.id,
                    est.nome as estudante_nome,
                    est.matricula,
                    est.curso,
                    ori.nome as orientador_nome,
                    emp.nome as empresa_nome,
                    eo.data_inicio,
                    eo.data_termino,
                    eo.carga_horaria,
                    eo.status,
                    eo.nome_supervisor
                FROM estagio_obrigatorio eo
                JOIN estudantes est ON eo.estudante_id = est.id
                JOIN orientadores ori ON eo.orientador_id = ori.id
                JOIN empresas emp ON eo.empresa_id = emp.id
                WHERE eo.data_inicio >= ? AND eo.data_inicio <= ?
                ORDER BY est.nome
            """, (data_inicio, data_fim))
            
            estagios = self.cursor.fetchall()
            
            if not estagios:
                messagebox.showwarning("Aviso", f"Nenhum est√°gio encontrado para o per√≠odo: {periodo_texto}")
                return
            
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title="Salvar Relat√≥rio",
                initialname=f"Relatorio_Semestral_Obrigatorio_{ano}_{semestre.split()[0]}.pdf"
            )
            
            if not filename:
                return
            
            # Gerar PDF moderno
            self._gerar_pdf_semestral_obrigatorio(filename, estagios, periodo_texto)
            
            messagebox.showinfo("Sucesso", f"Relat√≥rio gerado com sucesso!\n\nArquivo: {filename}")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {str(e)}")
            import traceback
            traceback.print_exc()
    
    def _gerar_pdf_semestral_obrigatorio(self, filename, estagios, periodo_texto):
        """Gerar PDF moderno para relat√≥rio semestral obrigat√≥rio"""
        # Criar documento
        doc = SimpleDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=3*cm,
            bottomMargin=2.5*cm
        )
        
        # Obter estilos
        styles = self.report_generator.get_styles()
        story = []
        
        # T√≠tulo principal
        story.append(Paragraph("RELAT√ìRIO SEMESTRAL DE EST√ÅGIOS OBRIGAT√ìRIOS", styles['CustomTitle']))
        story.append(Spacer(1, 0.5*cm))
        
        # Per√≠odo
        story.append(Paragraph(f"Per√≠odo: {periodo_texto}", styles['CustomSubtitle']))
        story.append(Spacer(1, 0.8*cm))
        
        # Informa√ß√µes gerais
        total_estagios = len(estagios)
        total_horas = sum(estagio[8] for estagio in estagios if estagio[8])
        
        # Caixa de informa√ß√µes
        info_content = f"""
        <b>Total de Est√°gios:</b> {total_estagios}<br/>
        <b>Total de Horas:</b> {total_horas:,.0f}h<br/>
        <b>M√©dia de Horas por Est√°gio:</b> {total_horas/total_estagios:.0f}h<br/>
        <b>Data de Gera√ß√£o:</b> {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
        """
        story.append(self.report_generator.create_info_box("Resumo Executivo", info_content, 'info'))
        story.append(Spacer(1, 0.5*cm))
        
        # Estat√≠sticas por status
        story.append(Paragraph("Distribui√ß√£o por Status", styles['SectionHeader']))
        story.append(Spacer(1, 0.3*cm))
        
        status_count = {}
        for estagio in estagios:
            status = estagio[9] or 'Em Andamento'
            status_count[status] = status_count.get(status, 0) + 1
        
        status_data = [['Status', 'Quantidade', 'Percentual']]
        for status, count in status_count.items():
            percentual = (count / total_estagios) * 100
            status_data.append([status, str(count), f"{percentual:.1f}%"])
        
        status_table = self.report_generator.create_modern_table(
            status_data[1:], 
            headers=status_data[0],
            col_widths=[6*cm, 3*cm, 3*cm]
        )
        story.append(status_table)
        story.append(Spacer(1, 0.8*cm))
        
        # Lista detalhada de est√°gios
        story.append(Paragraph("Lista Detalhada de Est√°gios", styles['SectionHeader']))
        story.append(Spacer(1, 0.3*cm))
        
        # Preparar dados da tabela
        table_data = [[
            'Estudante', 'Matr√≠cula', 'Curso', 'Orientador', 
            'Empresa', 'In√≠cio', 'T√©rmino', 'Horas', 'Status'
        ]]
        
        for estagio in estagios:
            table_data.append([
                estagio[1][:25] + "..." if len(estagio[1]) > 25 else estagio[1],  # Nome
                estagio[2],  # Matr√≠cula
                estagio[3][:15] + "..." if len(estagio[3]) > 15 else estagio[3],  # Curso
                estagio[4][:20] + "..." if len(estagio[4]) > 20 else estagio[4],  # Orientador
                estagio[5][:20] + "..." if len(estagio[5]) > 20 else estagio[5],  # Empresa
                estagio[6],  # Data in√≠cio
                estagio[7],  # Data t√©rmino
                str(estagio[8]) if estagio[8] else "0",  # Horas
                estagio[9] or "Em Andamento"  # Status
            ])
        
        # Criar tabela principal
        main_table = self.report_generator.create_modern_table(
            table_data[1:],
            headers=table_data[0],
            col_widths=[3.5*cm, 2*cm, 2.5*cm, 3*cm, 3*cm, 1.8*cm, 1.8*cm, 1.2*cm, 2.2*cm]
        )
        story.append(main_table)
        
        # Rodap√© com assinatura
        story.append(Spacer(1, 1*cm))
        story.append(Paragraph("_" * 50, styles['CenteredText']))
        story.append(Paragraph("Coordena√ß√£o de Est√°gios", styles['CenteredText']))
        story.append(Paragraph("Universidade Federal dos Vales do Jequitinhonha e Mucuri", styles['CenteredText']))
        
        # Construir PDF
        doc.build(story, onFirstPage=self.report_generator.create_header_footer, 
                 onLaterPages=self.report_generator.create_header_footer)
    
    def exportar_relatorio_moderno_semestral_nao_obrigatorio(self):
        """Exportar relat√≥rio semestral n√£o obrigat√≥rio em PDF moderno"""
        if not self.report_generator:
            messagebox.showerror("Erro", "Sistema de relat√≥rios modernos n√£o dispon√≠vel!\nInstale o ReportLab: pip install reportlab")
            return
        
        try:
            # Obter dados do relat√≥rio (assumindo que existem combos similares)
            semestre = getattr(self, 'semestre_combo_nao_obrig', None)
            ano = getattr(self, 'ano_combo_nao_obrig', None)
            
            if not semestre or not ano:
                # Valores padr√£o se os combos n√£o existirem
                ano_atual = datetime.now().year
                semestre_atual = "1¬∫ Semestre (Jan-Jun)" if datetime.now().month <= 6 else "2¬∫ Semestre (Jul-Dez)"
                ano_valor = ano_atual
                semestre_valor = semestre_atual
            else:
                semestre_valor = semestre.get()
                ano_valor = int(ano.get())
            
            # Determinar per√≠odo
            if "1¬∫ Semestre" in semestre_valor:
                data_inicio = f"{ano_valor}-01-01"
                data_fim = f"{ano_valor}-06-30"
                periodo_texto = f"1¬∫ Semestre de {ano_valor} (Janeiro a Junho)"
            elif "2¬∫ Semestre" in semestre_valor:
                data_inicio = f"{ano_valor}-07-01"
                data_fim = f"{ano_valor}-12-31"
                periodo_texto = f"2¬∫ Semestre de {ano_valor} (Julho a Dezembro)"
            else:  # Ano completo
                data_inicio = f"{ano_valor}-01-01"
                data_fim = f"{ano_valor}-12-31"
                periodo_texto = f"Ano Completo de {ano_valor}"
            
            # Buscar dados
            self.cursor.execute("""
                SELECT 
                    eno.id,
                    est.nome as estudante_nome,
                    est.matricula,
                    est.curso,
                    ori.nome as orientador_nome,
                    emp.nome as empresa_nome,
                    eno.data_inicio,
                    eno.data_termino,
                    eno.carga_horaria,
                    eno.status,
                    eno.nome_supervisor
                FROM estagio_nao_obrigatorio eno
                JOIN estudantes est ON eno.estudante_id = est.id
                JOIN orientadores ori ON eno.orientador_id = ori.id
                JOIN empresas emp ON eno.empresa_id = emp.id
                WHERE eno.data_inicio >= ? AND eno.data_inicio <= ?
                ORDER BY est.nome
            """, (data_inicio, data_fim))
            
            estagios = self.cursor.fetchall()
            
            if not estagios:
                messagebox.showwarning("Aviso", f"Nenhum est√°gio n√£o obrigat√≥rio encontrado para o per√≠odo: {periodo_texto}")
                return
            
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title="Salvar Relat√≥rio",
                initialname=f"Relatorio_Semestral_NaoObrigatorio_{ano_valor}_{semestre_valor.split()[0]}.pdf"
            )
            
            if not filename:
                return
            
            # Gerar PDF moderno
            self._gerar_pdf_semestral_nao_obrigatorio(filename, estagios, periodo_texto)
            
            messagebox.showinfo("Sucesso", f"Relat√≥rio gerado com sucesso!\n\nArquivo: {filename}")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {str(e)}")
            import traceback
            traceback.print_exc()
    
    def _gerar_pdf_semestral_nao_obrigatorio(self, filename, estagios, periodo_texto):
        """Gerar PDF moderno para relat√≥rio semestral n√£o obrigat√≥rio"""
        # Criar documento
        doc = SimpleDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=3*cm,
            bottomMargin=2.5*cm
        )
        
        # Obter estilos
        styles = self.report_generator.get_styles()
        story = []
        
        # T√≠tulo principal
        story.append(Paragraph("RELAT√ìRIO SEMESTRAL DE EST√ÅGIOS N√ÉO OBRIGAT√ìRIOS", styles['CustomTitle']))
        story.append(Spacer(1, 0.5*cm))
        
        # Per√≠odo
        story.append(Paragraph(f"Per√≠odo: {periodo_texto}", styles['CustomSubtitle']))
        story.append(Spacer(1, 0.8*cm))
        
        # Informa√ß√µes gerais
        total_estagios = len(estagios)
        total_horas = sum(estagio[8] for estagio in estagios if estagio[8])
        
        # Caixa de informa√ß√µes
        info_content = f"""
        <b>Total de Est√°gios N√£o Obrigat√≥rios:</b> {total_estagios}<br/>
        <b>Total de Horas:</b> {total_horas:,.0f}h<br/>
        <b>M√©dia de Horas por Est√°gio:</b> {total_horas/total_estagios:.0f}h<br/>
        <b>Data de Gera√ß√£o:</b> {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
        """
        story.append(self.report_generator.create_info_box("Resumo Executivo", info_content, 'success'))
        story.append(Spacer(1, 0.5*cm))
        
        # Estat√≠sticas por status
        story.append(Paragraph("Distribui√ß√£o por Status", styles['SectionHeader']))
        story.append(Spacer(1, 0.3*cm))
        
        status_count = {}
        for estagio in estagios:
            status = estagio[9] or 'Em Andamento'
            status_count[status] = status_count.get(status, 0) + 1
        
        status_data = [['Status', 'Quantidade', 'Percentual']]
        for status, count in status_count.items():
            percentual = (count / total_estagios) * 100
            status_data.append([status, str(count), f"{percentual:.1f}%"])
        
        status_table = self.report_generator.create_modern_table(
            status_data[1:], 
            headers=status_data[0],
            col_widths=[6*cm, 3*cm, 3*cm]
        )
        story.append(status_table)
        story.append(Spacer(1, 0.8*cm))
        
        # Lista detalhada de est√°gios
        story.append(Paragraph("Lista Detalhada de Est√°gios N√£o Obrigat√≥rios", styles['SectionHeader']))
        story.append(Spacer(1, 0.3*cm))
        
        # Preparar dados da tabela
        table_data = [[
            'Estudante', 'Matr√≠cula', 'Curso', 'Orientador', 
            'Empresa', 'Supervisor', 'In√≠cio', 'T√©rmino', 'Horas'
        ]]
        
        for estagio in estagios:
            table_data.append([
                estagio[1][:20] + "..." if len(estagio[1]) > 20 else estagio[1],  # Nome
                estagio[2],  # Matr√≠cula
                estagio[3][:12] + "..." if len(estagio[3]) > 12 else estagio[3],  # Curso
                estagio[4][:18] + "..." if len(estagio[4]) > 18 else estagio[4],  # Orientador
                estagio[5][:18] + "..." if len(estagio[5]) > 18 else estagio[5],  # Empresa
                estagio[10][:15] + "..." if estagio[10] and len(estagio[10]) > 15 else (estagio[10] or "N/I"),  # Supervisor
                estagio[6],  # Data in√≠cio
                estagio[7],  # Data t√©rmino
                str(estagio[8]) if estagio[8] else "0"  # Horas
            ])
        
        # Criar tabela principal
        main_table = self.report_generator.create_modern_table(
            table_data[1:],
            headers=table_data[0],
            col_widths=[3*cm, 1.8*cm, 2.2*cm, 3*cm, 3*cm, 2.5*cm, 1.5*cm, 1.5*cm, 1.5*cm]
        )
        story.append(main_table)
        
        # Rodap√© com assinatura
        story.append(Spacer(1, 1*cm))
        story.append(Paragraph("_" * 50, styles['CenteredText']))
        story.append(Paragraph("Coordena√ß√£o de Est√°gios", styles['CenteredText']))
        story.append(Paragraph("Universidade Federal dos Vales do Jequitinhonha e Mucuri", styles['CenteredText']))
        
        # Construir PDF
        doc.build(story, onFirstPage=self.report_generator.create_header_footer, 
                 onLaterPages=self.report_generator.create_header_footer)
    
    def exportar_relatorio_moderno_geral_estatisticas(self):
        """Exportar relat√≥rio geral de estat√≠sticas em PDF moderno"""
        if not self.report_generator:
            messagebox.showerror("Erro", "Sistema de relat√≥rios modernos n√£o dispon√≠vel!\nInstale o ReportLab: pip install reportlab")
            return
        
        try:
            # Solicitar local para salvar
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title="Salvar Relat√≥rio",
                initialname=f"Relatorio_Geral_Estatisticas_{datetime.now().strftime('%Y_%m_%d')}.pdf"
            )
            
            if not filename:
                return
            
            # Gerar PDF moderno
            self._gerar_pdf_geral_estatisticas(filename)
            
            messagebox.showinfo("Sucesso", f"Relat√≥rio gerado com sucesso!\n\nArquivo: {filename}")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {str(e)}")
            import traceback
            traceback.print_exc()
    
    def _gerar_pdf_geral_estatisticas(self, filename):
        """Gerar PDF moderno para relat√≥rio geral de estat√≠sticas"""
        # Criar documento
        doc = SimpleDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=3*cm,
            bottomMargin=2.5*cm
        )
        
        # Obter estilos
        styles = self.report_generator.get_styles()
        story = []
        
        # T√≠tulo principal
        story.append(Paragraph("RELAT√ìRIO GERAL DE ESTAT√çSTICAS", styles['CustomTitle']))
        story.append(Spacer(1, 0.5*cm))
        
        # Data de gera√ß√£o
        story.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", styles['CustomSubtitle']))
        story.append(Spacer(1, 0.8*cm))
        
        # Estat√≠sticas gerais
        self.cursor.execute("SELECT COUNT(*) FROM estudantes WHERE status = 'Ativo'")
        total_estudantes = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM orientadores WHERE status = 'Ativo'")
        total_orientadores = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM empresas WHERE status = 'Ativo'")
        total_empresas = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM estagio_obrigatorio")
        total_obrigatorios = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM estagio_nao_obrigatorio")
        total_nao_obrigatorios = self.cursor.fetchone()[0]
        
        # Caixa de informa√ß√µes gerais
        info_content = f"""
        <b>Total de Estudantes Ativos:</b> {total_estudantes}<br/>
        <b>Total de Orientadores Ativos:</b> {total_orientadores}<br/>
        <b>Total de Empresas Ativas:</b> {total_empresas}<br/>
        <b>Total de Est√°gios Obrigat√≥rios:</b> {total_obrigatorios}<br/>
        <b>Total de Est√°gios N√£o Obrigat√≥rios:</b> {total_nao_obrigatorios}<br/>
        <b>Total Geral de Est√°gios:</b> {total_obrigatorios + total_nao_obrigatorios}
        """
        story.append(self.report_generator.create_info_box("Vis√£o Geral do Sistema", info_content, 'info'))
        story.append(Spacer(1, 0.8*cm))
        
        # Estat√≠sticas por orientador
        story.append(Paragraph("Estat√≠sticas por Orientador", styles['SectionHeader']))
        story.append(Spacer(1, 0.3*cm))
        
        self.cursor.execute("""
            SELECT 
                o.nome,
                COUNT(eo.id) as obrigatorios,
                COUNT(eno.id) as nao_obrigatorios,
                (COUNT(eo.id) + COUNT(eno.id)) as total
            FROM orientadores o
            LEFT JOIN estagio_obrigatorio eo ON o.id = eo.orientador_id
            LEFT JOIN estagio_nao_obrigatorio eno ON o.id = eno.orientador_id
            WHERE o.status = 'Ativo'
            GROUP BY o.id, o.nome
            HAVING total > 0
            ORDER BY total DESC
        """)
        
        orientadores_data = self.cursor.fetchall()
        
        if orientadores_data:
            orientador_table_data = [['Orientador', 'Obrigat√≥rios', 'N√£o Obrigat√≥rios', 'Total']]
            for orientador in orientadores_data:
                orientador_table_data.append([
                    orientador[0][:35] + "..." if len(orientador[0]) > 35 else orientador[0],
                    str(orientador[1]),
                    str(orientador[2]),
                    str(orientador[3])
                ])
            
            orientador_table = self.report_generator.create_modern_table(
                orientador_table_data[1:],
                headers=orientador_table_data[0],
                col_widths=[8*cm, 3*cm, 3*cm, 3*cm]
            )
            story.append(orientador_table)
        else:
            story.append(Paragraph("Nenhum orientador com est√°gios cadastrados.", styles['CustomNormal']))
        
        story.append(Spacer(1, 0.8*cm))
        
        # Rodap√© com assinatura
        story.append(Spacer(1, 1*cm))
        story.append(Paragraph("_" * 50, styles['CenteredText']))
        story.append(Paragraph("Coordena√ß√£o de Est√°gios", styles['CenteredText']))
        story.append(Paragraph("Universidade Federal dos Vales do Jequitinhonha e Mucuri", styles['CenteredText']))
        
        # Construir PDF
        doc.build(story, onFirstPage=self.report_generator.create_header_footer, 
                 onLaterPages=self.report_generator.create_header_footer)
            
    def run(self):
        self.root.mainloop()

def main():
    """Fun√ß√£o principal que inicia o sistema com tela de login"""
    
    def on_login_success(usuario_logado):
        """Callback executado ap√≥s login bem-sucedido"""
        # Iniciar sistema principal com usu√°rio logado
        app = SistemaEstagio(usuario_logado)
        app.run()
    
    # Inicializar banco de dados se necess√°rio
    login_system = LoginSystem(on_login_success)
    login_system.init_database_if_needed()
    
    # Mostrar tela de login
    login_system.show()

if __name__ == "__main__":
    main()
